<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Air_katty</title>
  
  
  <link href="https://airrcat.github.io/atom.xml" rel="self"/>
  
  <link href="https://airrcat.github.io/"/>
  <updated>2024-11-15T08:26:38.000Z</updated>
  <id>https://airrcat.github.io/</id>
  
  <author>
    <name>Aircat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>DASCTF 2024 10月 Reverse</title>
    <link href="https://airrcat.github.io/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/"/>
    <id>https://airrcat.github.io/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/</id>
    <published>2024-11-08T07:47:25.000Z</published>
    <updated>2024-11-15T08:26:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>题目链接：<a href="https://github.com/Airrcat/long_long/tree/main/DASCTF_2024_10">https://github.com/Airrcat/long_long/tree/main/DASCTF_2024_10</a></p><h1 id="ezre"><a href="#ezre" class="headerlink" title="ezre"></a>ezre</h1><p>查PE<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-10.png" alt="alt text"><br>32位无壳</p><p>开始分析<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-11.png" alt="alt text"><br>看起来很像加壳了<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-12.png" alt="alt text"><br>字符串未有暴露信息，但是段中有一个themida<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-13.png" alt="alt text"><br>发现是一个壳，直接去找脱壳机<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-14.png" alt="alt text"><br>一些脱壳工具（Magicmida)是动态启动后脱壳，会被程序的反调试检查到<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-15.png" alt="alt text"><br>后来发现了这个静态脱壳工具<br><a href="https://github.com/ergrelet/unlicense">unlicense</a><br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-16.png" alt="alt text"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">PS</span> C:\Users\Songs\Desktop\DASCTF10月\tempdir\REVERSE附件&gt; .\unlicense.exe <span class="string">&#x27;.\ezre.exe&#x27;</span></span><br><span class="line">INFO - Detected packer version: <span class="number">3</span>.x</span><br><span class="line">frida<span class="literal">-agent</span>: Setting up OEP tracing <span class="keyword">for</span> <span class="string">&quot;ezre.exe&quot;</span></span><br><span class="line">frida<span class="literal">-agent</span>: Exception handler registered</span><br><span class="line">frida<span class="literal">-agent</span>: OEP found (thread <span class="comment">#22604): 0x8a18fe</span></span><br><span class="line">INFO - OEP reached: OEP=<span class="number">0</span>x8a18fe BASE=<span class="number">0</span>x8a0000 DOTNET=False</span><br><span class="line">INFO - Looking <span class="keyword">for</span> the IAT...</span><br><span class="line">INFO - Performing linear scan <span class="keyword">in</span> <span class="keyword">data</span> sections...</span><br><span class="line">INFO - Looking <span class="keyword">for</span> wrapped imports <span class="keyword">in</span> code sections...</span><br><span class="line">INFO - Potential import wrappers found: <span class="number">15</span></span><br><span class="line">INFO - IAT found: <span class="number">0</span>x8a3000<span class="literal">-0x8a300b</span></span><br><span class="line">INFO - Resolving imports ...</span><br><span class="line">INFO - Imports resolved: <span class="number">43</span></span><br><span class="line">INFO - Fixed IAT at <span class="number">0</span>x8a3000, size=<span class="number">0</span>xc5</span><br><span class="line">INFO - Dumping PE with OEP=<span class="number">0</span>x8a18fe ...</span><br><span class="line">INFO - Fixing dump ...</span><br><span class="line">INFO - Rebuilding PE ...</span><br><span class="line">INFO - Output file has been saved at <span class="string">&#x27;unpacked_ezre.exe&#x27;</span></span><br></pre></td></tr></table></figure><p>main函数默认反编译不了，有个花<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-17.png" alt="alt text"><br>处理一下把jmp地址的e8 patch成90即可<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-18.png" alt="main"><br>上头一个cipher，底下两个处理函数然后就比较了<br>处理函数也有花，记得处理<br>第一个是魔改rc4，<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-19.png" alt="alt text"><br>重命名一下<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-22.png" alt="alt text"><br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-21.png" alt="alt text"><br>第二个是魔改xtea<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-23.png" alt="alt text"><br>要注意的是，魔改xtea在执行的时候，地址是byte +1+1并patch回去，也就是cipher的[0:4]<del>[4:8] [1:5]</del>[4~9]…<br>因此最后得倒着运算<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 普通的rc4解密</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">key = <span class="string">&quot;th0s_i0_ke9&quot;</span></span><br><span class="line">S = []</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 期待输入存储字节型的列表。</span></span><br><span class="line"><span class="comment"># 预期输出存储0~256下标的列表。</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init</span>(<span class="params">S, K</span>):  <span class="comment"># S盒初始化置换,K为密钥</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    S.clear()  <span class="comment"># init的时候重置sbox</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        S.append(i)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            j = (j + S[i] + <span class="built_in">ord</span>(K[i % <span class="built_in">len</span>(K)])) % <span class="number">256</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            j = (j + S[i] + K[i % <span class="built_in">len</span>(K)]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]  <span class="comment"># 交换S[i],S[j]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_xor</span>(<span class="params">S, D</span>):</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> D:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            k = <span class="built_in">ord</span>(a) + (S[(S[i] + S[j]) % <span class="number">256</span>] ^ <span class="number">0x33</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            k = a + (S[(S[i] + S[j]) % <span class="number">256</span>] ^ <span class="number">0x33</span>)</span><br><span class="line">        result.append(k)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_xor2</span>(<span class="params">S, D</span>):</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    result = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> D:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            k = <span class="built_in">ord</span>(a) - (S[(S[i] + S[j]) % <span class="number">256</span>] ^ <span class="number">0x33</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            k = (a - (S[(S[i] + S[j]) % <span class="number">256</span>] ^ <span class="number">0x33</span>)) &amp; <span class="number">0xff</span></span><br><span class="line">        result.append(k)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, key</span>):</span><br><span class="line"></span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x9E3779B8</span></span><br><span class="line">    rounds = <span class="number">33</span></span><br><span class="line">    total = c_uint32(<span class="number">0x66778899</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v0.value += (((v1.value &lt;&lt; <span class="number">5</span>) ^ (v1.value &gt;&gt; <span class="number">6</span>)) +</span><br><span class="line">                     v1.value) ^ (total.value + key[total.value &amp; <span class="number">3</span>])</span><br><span class="line">        total.value += delta</span><br><span class="line">        v1.value += (((v0.value &lt;&lt; <span class="number">4</span>) ^ (v0.value &gt;&gt; <span class="number">5</span>)) +</span><br><span class="line">                     v0.value) ^ (total.value + key[(total.value &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, key</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    delta = <span class="number">0x9E3779B8</span></span><br><span class="line">    rounds = <span class="number">33</span></span><br><span class="line">    total = c_uint32(delta * rounds+<span class="number">0x66778899</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v1.value -= (((v0.value &lt;&lt; <span class="number">4</span>) ^ (v0.value &gt;&gt; <span class="number">5</span>)) +</span><br><span class="line">                     v0.value) ^ (total.value + key[(total.value &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        total.value -= delta</span><br><span class="line">        v0.value -= (((v1.value &lt;&lt; <span class="number">5</span>) ^ (v1.value &gt;&gt; <span class="number">6</span>)) +</span><br><span class="line">                     v1.value) ^ (total.value + key[total.value &amp; <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">rc4_init(S, key)</span><br><span class="line">cipher = rc4_xor(S, <span class="string">&quot;12341234&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br><span class="line">value = [<span class="number">0</span>]*<span class="number">2</span></span><br><span class="line">value[<span class="number">0</span>] = <span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(cipher[<span class="number">0</span>:<span class="number">4</span>]), <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">value[<span class="number">1</span>] = <span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(cipher[<span class="number">4</span>:<span class="number">8</span>]), <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(encrypt(value, [<span class="number">0x6e982837</span>, <span class="number">0x44332211</span>, <span class="number">0x11223344</span>, <span class="number">0x3728986e</span>]))</span><br><span class="line">cipher = decrypt([<span class="number">1690332198</span>, <span class="number">2660953638</span>], [</span><br><span class="line">    <span class="number">0x6e982837</span>, <span class="number">0x44332211</span>, <span class="number">0x11223344</span>, <span class="number">0x3728986e</span>])</span><br><span class="line">rc4_init(S, key)</span><br><span class="line">flag = rc4_xor2(S, cipher[<span class="number">0</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>) +</span><br><span class="line">                cipher[<span class="number">1</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># 标准xtea</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    cipher = <span class="string">b&#x27;P\xd4\xc8\xc4\x8f\x84@\xeb2\x81\x8f\x85l\xb2+\x06\xbf\x055].\xe3&#125;F\x8d5\x01p:\x80\x81\xc5\xe6q\xd3\xd6Pio\xe2nx\x14\xd8&#x27;</span></span><br><span class="line">    cipher = <span class="built_in">list</span>(cipher)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cypher len:&quot;</span>, <span class="built_in">len</span>(cipher))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;cipher :<span class="subst">&#123;cipher&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="comment"># 四个key，每个是32bit，即密钥长度为128bit</span></span><br><span class="line">    tea_key = [<span class="number">0x6e982837</span>, <span class="number">0x44332211</span>, <span class="number">0x11223344</span>, <span class="number">0x3728986e</span>]</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">36</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        value = [<span class="number">0</span>]*<span class="number">2</span></span><br><span class="line">        value[<span class="number">0</span>] = <span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(cipher[i:i+<span class="number">4</span>]), <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        value[<span class="number">1</span>] = <span class="built_in">int</span>.from_bytes(<span class="built_in">bytes</span>(cipher[i+<span class="number">4</span>:i+<span class="number">8</span>]), <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        value = decrypt(value, tea_key)</span><br><span class="line">        <span class="comment"># print(cipher)</span></span><br><span class="line">        <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            cipher[i+l] = value[<span class="number">0</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>)[l]</span><br><span class="line">            cipher[i+<span class="number">4</span>+l] = value[<span class="number">1</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>)[l]</span><br><span class="line">        <span class="comment"># print(cipher)</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;after xtea:<span class="subst">&#123;cipher&#125;</span>&quot;</span>)</span><br><span class="line">    rc4_init(S, key)</span><br><span class="line">    flag = rc4_xor2(S, cipher)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;after rc4:<span class="subst">&#123;<span class="built_in">bytes</span>(flag)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">Encrypted data is :  0xae685ec7 0x59af4238</span></span><br><span class="line"><span class="string">Decrypted data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[226, 192, 169, 129, 151, 101, 142, 195]</span><br><span class="line">(1690332198, 2660953638)</span><br><span class="line">[49, 50, 51, 52, 49, 50, 51, 52]</span><br><span class="line">cypher len: 44</span><br><span class="line">cipher :[80, 212, 200, 196, 143, 132, 64, 235, 50, 129, 143, 133, 108, 178, 43, 6, 191, 5, 53, 93, 46, 227, 125, 70, 141, 53, 1, 112, 58, 128, 129, 197, 230, 113, 211, 214, 80, 105, 111, 226, 110, 120, 20, 216]</span><br><span class="line">after xtea:[245, 207, 201, 144, 186, 121, 214, 227, 81, 34, 213, 44, 80, 233, 246, 153, 113, 77, 122, 222, 255, 68, 197, 171, 25, 55, 172, 232, 114, 182, 164, 14, 147, 134, 75, 195, 85, 54, 116, 25, 54, 162, 175, 69]</span><br><span class="line">after rc4:b<span class="string">&#x27;DASCTF&#123;Th1l_t8e1a_rc4_l8s_s8o_int9r3es4t1ng&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="ezelf"><a href="#ezelf" class="headerlink" title="ezelf"></a>ezelf</h1><p>查pe<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-24.png" alt="alt text"><br>64位<br>打开一看ollvm<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-25.png" alt="alt text"><br>试试D810<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-26.png" alt="alt text"><br>效果难以接受<br>deflat还可以，使用deflat的flat_control_flow<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-27.png" alt="alt text"><br>cipher1<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-28.png" alt="alt text"><br>cipher2<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-29.png" alt="alt text"><br>第一个加密是个rc4+xxtea<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-30.png" alt="alt text"><br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-31.png" alt="alt text"><br>这里经过deflat后代码结构可能会发生变化，比如xxtea的循环结构这里就不太对，可以参照源文件或者用ollvm解混淆的版本。<br>我大致看了下基本的结构，参数没变化，rounds16、n8.稍特别一点的是&amp;7,&amp;7这里实际应该是&amp;n，一个参考的xxtea如：<img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-38.png" alt="alt text"><br>每个n的小循环里最后一轮需要一个v[0]参数，而&amp;n能够直接在让p走一个循环，即y &#x3D; v[(p+1)&amp;n]可以在0~n内完成y从v[1]到v[n-1]后再到v[0]的变化。<br>部分变量优化后如图：<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-37.png" alt="alt text"></p><p>猜测是xxtea key，动调可对比<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-32.png" alt="alt text"><br>这个应该是rc4 key，盲猜<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-33.png" alt="alt text"><br>试着解一下第一个cipher，会发现xxtea能出东西，然后rc4没什么东西，实际调试发现rc4好像暂时用不到？<br>xxtea:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> dis</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">MX</span>(<span class="params">z, y, total, key, p, e</span>):</span><br><span class="line">    temp1 = (z.value &gt;&gt; <span class="number">5</span> ^ y.value &lt;&lt; <span class="number">2</span>) + (y.value &gt;&gt; <span class="number">3</span> ^ z.value &lt;&lt; <span class="number">4</span>)</span><br><span class="line">    temp2 = (total.value ^ y.value) + (key[(p &amp; <span class="number">3</span>) ^ e.value] ^ z.value)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c_uint32(temp1 ^ temp2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x11451400</span></span><br><span class="line">    rounds = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    z = c_uint32(v[n-<span class="number">1</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        total.value += delta</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>):</span><br><span class="line">            y = c_uint32(v[p+<span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32(v[p] + MX(z, y, total, key, p, e).value).value</span><br><span class="line">            z.value = v[p]</span><br><span class="line">        y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">        v[n-<span class="number">1</span>] = c_uint32(v[n-<span class="number">1</span>] + MX(z, y, total, key, n-<span class="number">1</span>, e).value).value</span><br><span class="line">        z.value = v[n-<span class="number">1</span>]</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">n, v, key</span>):</span><br><span class="line">    delta = <span class="number">0x11451400</span></span><br><span class="line">    rounds = <span class="number">16</span></span><br><span class="line"></span><br><span class="line">    total = c_uint32(rounds * delta)</span><br><span class="line">    y = c_uint32(v[<span class="number">0</span>])</span><br><span class="line">    e = c_uint32(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> rounds &gt; <span class="number">0</span>:</span><br><span class="line">        e.value = (total.value &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span></span><br><span class="line">        <span class="keyword">for</span> p <span class="keyword">in</span> <span class="built_in">range</span>(n-<span class="number">1</span>, <span class="number">0</span>, -<span class="number">1</span>):</span><br><span class="line">            z = c_uint32(v[p-<span class="number">1</span>])</span><br><span class="line">            v[p] = c_uint32((v[p] - MX(z, y, total, key, p, e).value)).value</span><br><span class="line">            y.value = v[p]</span><br><span class="line">        z = c_uint32(v[n-<span class="number">1</span>])</span><br><span class="line">        v[<span class="number">0</span>] = c_uint32(v[<span class="number">0</span>] - MX(z, y, total, key, <span class="number">0</span>, e).value).value</span><br><span class="line">        y.value = v[<span class="number">0</span>]</span><br><span class="line">        total.value -= delta</span><br><span class="line">        rounds -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#  test</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 该算法中每次可加密不只64bit的数据，并且加密的轮数由加密数据长度决定</span></span><br><span class="line">    cipher = <span class="string">b&#x27;\xb4\xb5ZB\xa6y\x0b\xac\x0e#x\xde\xe1-\xc6\x1d\xbb)\x8c\xe2\x94\xfe\x14\xd9\xaa\x03\xe3\x8a\x14\x92\x1cd&#x27;</span></span><br><span class="line">    <span class="comment"># cipher = b&#x27;01234567890123456790123465789012&#x27;</span></span><br><span class="line">    key = [<span class="number">0xb</span>, <span class="number">0x2d</span>, <span class="number">0xe</span>, <span class="number">0x309</span>]</span><br><span class="line">    v = [<span class="number">0</span>] * (<span class="built_in">len</span>(cipher)//<span class="number">4</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cipher len:&quot;</span>, <span class="built_in">len</span>(cipher))</span><br><span class="line">    <span class="comment"># 密文cipher格式转化，从字节转成int</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher), <span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;bytes&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(<span class="built_in">type</span>(cipher)):</span><br><span class="line">            v[i//<span class="number">4</span>] = <span class="built_in">int</span>.from_bytes(cipher[i:i+<span class="number">4</span>], <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&#x27;list&#x27;</span> <span class="keyword">in</span> <span class="built_in">str</span>(<span class="built_in">type</span>(cipher)):</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                v[i//<span class="number">4</span>] = (<span class="built_in">ord</span>(cipher[i]) | (<span class="built_in">ord</span>(cipher[i+<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                           (<span class="built_in">ord</span>(cipher[i+<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) | (<span class="built_in">ord</span>(cipher[i+<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>))</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                v[i//<span class="number">4</span>] = ((cipher[i]) | ((cipher[i+<span class="number">1</span>]) &lt;&lt; <span class="number">8</span>) |</span><br><span class="line">                           ((cipher[i+<span class="number">2</span>]) &lt;&lt; <span class="number">16</span>) | ((cipher[i+<span class="number">3</span>]) &lt;&lt; <span class="number">24</span>))</span><br><span class="line"></span><br><span class="line">    k = key</span><br><span class="line">    n = <span class="built_in">len</span>(v)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> v:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(i), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> k:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(i), end=<span class="string">&quot; &quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>()</span><br><span class="line">    res = decrypt(<span class="number">8</span>, v, k)</span><br><span class="line">    flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">        flag += i.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>之后翻到了疑似rc4加密的函数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> *__fastcall <span class="title function_">sub_403A90</span><span class="params">(<span class="type">int</span> *a1)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> *result; <span class="comment">// rax</span></span><br><span class="line">  _QWORD v2[<span class="number">10</span>]; <span class="comment">// [rsp+0h] [rbp-B0h] BYREF</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+54h] [rbp-5Ch]</span></span><br><span class="line">  <span class="type">int</span> *v4; <span class="comment">// [rsp+58h] [rbp-58h]</span></span><br><span class="line">  <span class="type">int</span> **v5; <span class="comment">// [rsp+60h] [rbp-50h]</span></span><br><span class="line">  <span class="type">int</span> *v6; <span class="comment">// [rsp+68h] [rbp-48h]</span></span><br><span class="line">  <span class="type">int</span> *v7; <span class="comment">// [rsp+70h] [rbp-40h]</span></span><br><span class="line">  <span class="type">int</span> v8; <span class="comment">// [rsp+78h] [rbp-38h]</span></span><br><span class="line">  <span class="type">bool</span> v9; <span class="comment">// [rsp+7Fh] [rbp-31h]</span></span><br><span class="line">  <span class="type">int</span> *v10; <span class="comment">// [rsp+80h] [rbp-30h]</span></span><br><span class="line">  <span class="type">int</span> v11; <span class="comment">// [rsp+8Ch] [rbp-24h]</span></span><br><span class="line">  <span class="type">int</span> v12; <span class="comment">// [rsp+90h] [rbp-20h]</span></span><br><span class="line">  <span class="type">int</span> v13; <span class="comment">// [rsp+94h] [rbp-1Ch]</span></span><br><span class="line">  <span class="type">int</span> *v14; <span class="comment">// [rsp+98h] [rbp-18h]</span></span><br><span class="line">  _DWORD v15[<span class="number">2</span>]; <span class="comment">// [rsp+A0h] [rbp-10h] BYREF</span></span><br><span class="line">  <span class="type">int</span> *v16; <span class="comment">// [rsp+A8h] [rbp-8h]</span></span><br><span class="line">  __int64 savedregs; <span class="comment">// [rsp+B0h] [rbp+0h] BYREF</span></span><br><span class="line"></span><br><span class="line">  v2[<span class="number">9</span>] = a1;</span><br><span class="line">  v5 = (<span class="type">int</span> **)&amp;v2[<span class="number">-2</span>];</span><br><span class="line">  i = <span class="number">1498122419</span>;</span><br><span class="line">  v6 = (<span class="type">int</span> *)&amp;savedregs;</span><br><span class="line">  v7 = v15;</span><br><span class="line">  v4 = a1;</span><br><span class="line">  *v5 = (<span class="type">int</span> *)v2[<span class="number">8</span>];</span><br><span class="line">  *v4 ^= pbox[<span class="number">0</span>];</span><br><span class="line">  *v7 = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">-391087700</span>; ; i = <span class="number">-391087700</span> )</span><br><span class="line">  &#123;</span><br><span class="line">    v8 = *v7;</span><br><span class="line">    v9 = v8 &lt;= <span class="number">16</span>;</span><br><span class="line">    i = <span class="number">1128705075</span>;</span><br><span class="line">    <span class="keyword">if</span> ( v8 &gt; <span class="number">16</span> )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v10 = v4;</span><br><span class="line">    i = <span class="number">-211233099</span>;</span><br><span class="line">    *v6 = *v4;</span><br><span class="line">    v11 = **v5;</span><br><span class="line">    v12 = dword_40A500[(<span class="type">unsigned</span> __int8)BYTE2(*v6)] + sbox[HIBYTE(*v6)];</span><br><span class="line">    v13 = dword_40A900[(<span class="type">unsigned</span> __int8)BYTE1(*v6)];</span><br><span class="line">    v14 = &amp;sbox[(<span class="type">unsigned</span> __int8)*v6 + <span class="number">768</span>];</span><br><span class="line">    i = <span class="number">822856190</span>;</span><br><span class="line">    *v4 = (*v14 + v13) ^ v12 ^ v11;</span><br><span class="line">    **v5 = *v6;</span><br><span class="line">    i = <span class="number">1380722011</span>;</span><br><span class="line">    v15[<span class="number">0</span>] = *v7 + <span class="number">1</span>;</span><br><span class="line">    *v7 = v15[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">  v15[<span class="number">1</span>] = dword_40A0E4;</span><br><span class="line">  i = <span class="number">2118140716</span>;</span><br><span class="line">  **v5 ^= dword_40A0E4;</span><br><span class="line">  *v6 = *v4;</span><br><span class="line">  v16 = *v5;</span><br><span class="line">  i = <span class="number">1584127650</span>;</span><br><span class="line">  *v4 = *v16;</span><br><span class="line">  result = *v5;</span><br><span class="line">  **v5 = *v6;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其接收了前面的rc4_init吐出来的参数，但这里可以看出来并不是rc4<br>结合题目的提示，我们可以猜测是blowfish加密<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-39.png" alt="alt text"><br>这里的加密部分略微魔改<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-40.png" alt="alt text"><br>left一开始异或了pbox[0]，而在结束时不再异或pbox[N+1]，同时每一轮里不再异或pbox，等于说pbox只异或了一次，循环内全程异或sbox，约等于rc4的加密模式<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-41.png" alt="alt text"><br>这里的加密差不多是：（xl即left，这里的left、right命名参考了网上blowfish博客里的命名）<br><img src="/2024/11/08/DASCTF-2024-10%E6%9C%88-Reverse/image-42.png" alt="alt text"><br>简单逆向分析一下<br>从正向来看，next_left是由left+right运算得来，而next_right存储了本轮的初始left，并不多做运算，算一个状态存储<br>即:<br>left+right-&gt;next_left<br>left-&gt;next_right<br>因此在一轮中，可以很直接从next_right得到left，进而由left+next_left求得right即：<br>next_right-&gt;left<br>next_left+left-&gt;right</p><p>ps:需要注意的是，encrypt最后交换了一次left和right，同时头尾还分别异或了一次pbox[0]和pbox[18]</p><p>算法完整实现：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">sbox = [[<span class="number">0x00000179</span>, <span class="number">0x000001BE</span>, <span class="number">0x243F6B50</span>, <span class="number">0x00000164</span>, <span class="number">0x243F6ABF</span>, <span class="number">0x243F6B94</span>, <span class="number">0x00000175</span>, <span class="number">0x243F6B20</span>, <span class="number">0x0000009A</span>, <span class="number">0x00000056</span>, <span class="number">0x243F6B1F</span>, <span class="number">0x000001E3</span>, <span class="number">0x243F6BE8</span>, <span class="number">0x243F6A16</span>, <span class="number">0x000000F7</span>, <span class="number">0x243F6B88</span>, <span class="number">0x000001BD</span>, <span class="number">0x000001BC</span>, <span class="number">0x243F6A41</span>, <span class="number">0x000000FB</span>, <span class="number">0x243F6B18</span>, <span class="number">0x243F6A04</span>, <span class="number">0x0000003D</span>, <span class="number">0x243F6B22</span>, <span class="number">0x000000F0</span>, <span class="number">0x00000042</span>, <span class="number">0x243F6BF5</span>, <span class="number">0x000000E0</span>, <span class="number">0x243F6A7F</span>, <span class="number">0x243F6A9A</span>, <span class="number">0x0000009C</span>, <span class="number">0x243F6A8C</span>, <span class="number">0x000001AD</span>, <span class="number">0x00000116</span>, <span class="number">0x243F6AF7</span>, <span class="number">0x000001C0</span>, <span class="number">0x243F6BBD</span>, <span class="number">0x243F6A2F</span>, <span class="number">0x0000016A</span>, <span class="number">0x0000079B</span>, <span class="number">0x243F6D8B</span>, <span class="number">0x000001CA</span>, <span class="number">0x000006A3</span>, <span class="number">0x243F6C37</span>, <span class="number">0x243F6A65</span>, <span class="number">0x243F6A6F</span>, <span class="number">0x0000018D</span>, <span class="number">0x00000617</span>, <span class="number">0x243F6DEA</span>, <span class="number">0x00000059</span>, <span class="number">0x000007CB</span>, <span class="number">0x243F6D22</span>, <span class="number">0x243F6B05</span>, <span class="number">0x243F6A2B</span>, <span class="number">0x0000007A</span>, <span class="number">0x00000717</span>, <span class="number">0x243F6CC1</span>, <span class="number">0x000001A2</span>, <span class="number">0x000007D3</span>, <span class="number">0x243F6D93</span>, <span class="number">0x243F6A5A</span>, <span class="number">0x243F6A5C</span>, <span class="number">0x00000041</span>, <span class="number">0x000007B6</span>, <span class="number">0x243F6D71</span>, <span class="number">0x00000139</span>, <span class="number">0x000006B7</span>, <span class="number">0x243F6D90</span>, <span class="number">0x243F6A2F</span>, <span class="number">0x243F6BF5</span>, <span class="number">0x00000026</span>, <span class="number">0x0000069D</span>, <span class="number">0x243F6D9A</span>, <span class="number">0x000001BF</span>, <span class="number">0x00000709</span>, <span class="number">0x243F6C54</span>, <span class="number">0x243F6AE9</span>, <span class="number">0x243F6BF7</span>, <span class="number">0x00000054</span>, <span class="number">0x00000752</span>, <span class="number">0x243F6C2C</span>, <span class="number">0x000000FA</span>, <span class="number">0x0000073A</span>, <span class="number">0x243F6C82</span>, <span class="number">0x243F6BB7</span>, <span class="number">0x243F6A09</span>, <span class="number">0x000000DA</span>, <span class="number">0x000007AF</span>, <span class="number">0x243F6C34</span>, <span class="number">0x000001E8</span>, <span class="number">0x000006E6</span>, <span class="number">0x243F6CCC</span>, <span class="number">0x243F6B05</span>, <span class="number">0x243F6AB7</span>, <span class="number">0x00000196</span>, <span class="number">0x00000693</span>, <span class="number">0x243F6C4D</span>, <span class="number">0x0000013B</span>, <span class="number">0x00000734</span>, <span class="number">0x243F6D31</span>, <span class="number">0x243F6B96</span>, <span class="number">0x243F6BD7</span>, <span class="number">0x00000110</span>, <span class="number">0x000007C2</span>, <span class="number">0x243F6DA1</span>, <span class="number">0x00000146</span>, <span class="number">0x00000795</span>, <span class="number">0x243F6C7A</span>, <span class="number">0x243F6A1F</span>, <span class="number">0x243F6A52</span>, <span class="number">0x00000087</span>, <span class="number">0x00000645</span>, <span class="number">0x243F6D74</span>, <span class="number">0x00000199</span>, <span class="number">0x00000707</span>, <span class="number">0x243F6C52</span>, <span class="number">0x243F6B1C</span>, <span class="number">0x243F6B6C</span>, <span class="number">0x00000138</span>, <span class="number">0x000006D7</span>, <span class="number">0x243F6D5C</span>, <span class="number">0x000000CA</span>, <span class="number">0x0000077A</span>, <span class="number">0x243F6DC3</span>, <span class="number">0x243F6A68</span>, <span class="number">0x243F6BC7</span>, <span class="number">0x0000008F</span>, <span class="number">0x000006CA</span>, <span class="number">0x243F6D11</span>, <span class="number">0x000001F2</span>, <span class="number">0x0000076E</span>, <span class="number">0x243F6CA9</span>, <span class="number">0x243F6A75</span>, <span class="number">0x243F6BC9</span>, <span class="number">0x00000135</span>, <span class="number">0x0000078A</span>, <span class="number">0x243F6D76</span>, <span class="number">0x00000013</span>, <span class="number">0x00000780</span>, <span class="number">0x243F6C46</span>, <span class="number">0x243F6BEB</span>, <span class="number">0x243F6A5B</span>, <span class="number">0x000000EB</span>, <span class="number">0x00000795</span>, <span class="number">0x243F6D4B</span>, <span class="number">0x0000004A</span>, <span class="number">0x000006C0</span>, <span class="number">0x243F6DDA</span>, <span class="number">0x243F6B71</span>, <span class="number">0x243F6A17</span>, <span class="number">0x000001E3</span>, <span class="number">0x00000667</span>, <span class="number">0x243F6C1B</span>, <span class="number">0x000000AF</span>, <span class="number">0x0000062A</span>, <span class="number">0x243F6DDE</span>, <span class="number">0x243F6B53</span>, <span class="number">0x243F6B4F</span>, <span class="number">0x0000019E</span>, <span class="number">0x00000613</span>, <span class="number">0x243F6D53</span>, <span class="number">0x000001EC</span>, <span class="number">0x0000076B</span>, <span class="number">0x243F6D78</span>, <span class="number">0x243F6B84</span>, <span class="number">0x243F6A1C</span>, <span class="number">0x00000009</span>, <span class="number">0x000006D8</span>, <span class="number">0x243F6CD1</span>, <span class="number">0x0000012B</span>, <span class="number">0x00000641</span>, <span class="number">0x243F6D10</span>, <span class="number">0x243F6A1C</span>, <span class="number">0x243F6A61</span>, <span class="number">0x00000104</span>, <span class="number">0x00000646</span>, <span class="number">0x243F6D6D</span>, <span class="number">0x0000000A</span>, <span class="number">0x0000061F</span>, <span class="number">0x243F6D92</span>, <span class="number">0x243F6A81</span>, <span class="number">0x243F6AE0</span>, <span class="number">0x0000017D</span>, <span class="number">0x00000666</span>, <span class="number">0x243F6C1D</span>, <span class="number">0x0000017B</span>, <span class="number">0x000007E6</span>, <span class="number">0x243F6C39</span>, <span class="number">0x243F6BE1</span>, <span class="number">0x243F6B23</span>, <span class="number">0x000000CA</span>, <span class="number">0x000006E5</span>, <span class="number">0x243F6D5A</span>, <span class="number">0x00000034</span>, <span class="number">0x0000079C</span>, <span class="number">0x243F6C18</span>, <span class="number">0x243F6B0F</span>, <span class="number">0x243F6AB2</span>, <span class="number">0x000000FC</span>, <span class="number">0x00000702</span>, <span class="number">0x243F6D7A</span>, <span class="number">0x0000005E</span>, <span class="number">0x000007D8</span>, <span class="number">0x243F6D9E</span>, <span class="number">0x243F6B03</span>, <span class="number">0x243F6A3A</span>, <span class="number">0x00000137</span>, <span class="number">0x00000619</span>, <span class="number">0x243F6C1C</span>, <span class="number">0x00000070</span>, <span class="number">0x0000071E</span>, <span class="number">0x243F6CB7</span>, <span class="number">0x243F6A42</span>, <span class="number">0x243F6A37</span>, <span class="number">0x00000150</span>, <span class="number">0x000007BB</span>, <span class="number">0x243F6D5A</span>, <span class="number">0x00000075</span>, <span class="number">0x0000071A</span>, <span class="number">0x243F6DCA</span>, <span class="number">0x243F6A48</span>, <span class="number">0x243F6B5B</span>, <span class="number">0x000001AA</span>, <span class="number">0x0000069C</span>, <span class="number">0x243F6D9D</span>, <span class="number">0x0000001B</span>, <span class="number">0x00000720</span>, <span class="number">0x243F6D57</span>, <span class="number">0x243F6B10</span>, <span class="number">0x243F6BE8</span>, <span class="number">0x000000FD</span>, <span class="number">0x00000656</span>, <span class="number">0x243F6CF4</span>, <span class="number">0x00000047</span>, <span class="number">0x00000686</span>, <span class="number">0x243F6C0B</span>, <span class="number">0x243F6BD9</span>, <span class="number">0x243F6BD8</span>, <span class="number">0x00000130</span>, <span class="number">0x000007DE</span>, <span class="number">0x243F6D74</span>, <span class="number">0x00000002</span>, <span class="number">0x000007F3</span>, <span class="number">0x243F6D4B</span>, <span class="number">0x243F6A41</span>, <span class="number">0x243F6B50</span>, <span class="number">0x00000033</span>, <span class="number">0x00000624</span>, <span class="number">0x243F6DC5</span>, <span class="number">0x00000133</span>, <span class="number">0x00000645</span>, <span class="number">0x243F6DCC</span>, <span class="number">0x243F6B43</span>, <span class="number">0x243F6B41</span>, <span class="number">0x000000E9</span>, <span class="number">0x00000753</span>], [<span class="number">0x243F6D0A</span>, <span class="number">0x000000D7</span>, <span class="number">0x243F6A70</span>, <span class="number">0x243F6CA6</span>, <span class="number">0x000006A7</span>, <span class="number">0x243F6B0C</span>, <span class="number">0x000001B5</span>, <span class="number">0x00000760</span>, <span class="number">0x243F6CEB</span>, <span class="number">0x000000EE</span>, <span class="number">0x243F6ADE</span>, <span class="number">0x243F6D02</span>, <span class="number">0x00000743</span>, <span class="number">0x243F6A5C</span>, <span class="number">0x000000DC</span>, <span class="number">0x000006D9</span>, <span class="number">0x243F6DC6</span>, <span class="number">0x000001DD</span>, <span class="number">0x243F6A12</span>, <span class="number">0x243F6DFF</span>, <span class="number">0x00000732</span>, <span class="number">0x243F6B80</span>, <span class="number">0x000001AC</span>, <span class="number">0x000007D5</span>, <span class="number">0x243F6D06</span>, <span class="number">0x000000C5</span>, <span class="number">0x243F6B51</span>, <span class="number">0x243F6D2B</span>, <span class="number">0x000006DC</span>, <span class="number">0x243F6A2D</span>, <span class="number">0x00000055</span>, <span class="number">0x000006FC</span>, <span class="number">0x243F6D7D</span>, <span class="number">0x000001D0</span>, <span class="number">0x243F6AA3</span>, <span class="number">0x243F6C75</span>, <span class="number">0x0000061A</span>, <span class="number">0x243F6A2A</span>, <span class="number">0x00000101</span>, <span class="number">0x000006F0</span>, <span class="number">0x243F6C4D</span>, <span class="number">0x00000138</span>, <span class="number">0x243F6A75</span>, <span class="number">0x243F6CA9</span>, <span class="number">0x000007FC</span>, <span class="number">0x243F6B27</span>, <span class="number">0x00000123</span>, <span class="number">0x000006C5</span>, <span class="number">0x243F6D32</span>, <span class="number">0x0000003B</span>, <span class="number">0x243F6A23</span>, <span class="number">0x243F6CB3</span>, <span class="number">0x00000686</span>, <span class="number">0x243F6B1A</span>, <span class="number">0x00000107</span>, <span class="number">0x00000608</span>, <span class="number">0x243F6DFD</span>, <span class="number">0x000001E8</span>, <span class="number">0x243F6BBB</span>, <span class="number">0x243F6D08</span>, <span class="number">0x0000062B</span>, <span class="number">0x243F6B94</span>, <span class="number">0x000000A1</span>, <span class="number">0x0000075A</span>, <span class="number">0x243F6CDC</span>, <span class="number">0x000000FB</span>, <span class="number">0x243F6B69</span>, <span class="number">0x243F6DD6</span>, <span class="number">0x00000655</span>, <span class="number">0x243F6ADD</span>, <span class="number">0x000000DD</span>, <span class="number">0x000007DC</span>, <span class="number">0x243F6DBD</span>, <span class="number">0x00000068</span>, <span class="number">0x243F6B0C</span>, <span class="number">0x243F6C95</span>, <span class="number">0x00000745</span>, <span class="number">0x243F6B15</span>, <span class="number">0x000001C9</span>, <span class="number">0x00000754</span>, <span class="number">0x243F6D3A</span>, <span class="number">0x0000003D</span>, <span class="number">0x243F6B34</span>, <span class="number">0x243F6DD6</span>, <span class="number">0x000006E1</span>, <span class="number">0x243F6A4E</span>, <span class="number">0x0000004E</span>, <span class="number">0x00000776</span>, <span class="number">0x243F6D6C</span>, <span class="number">0x000000F3</span>, <span class="number">0x243F6B5D</span>, <span class="number">0x243F6CEF</span>, <span class="number">0x000007F9</span>, <span class="number">0x243F6B68</span>, <span class="number">0x000001D0</span>, <span class="number">0x000007BB</span>, <span class="number">0x243F6DC9</span>, <span class="number">0x00000164</span>, <span class="number">0x243F6A2B</span>, <span class="number">0x243F6C43</span>, <span class="number">0x00000670</span>, <span class="number">0x243F6A8A</span>, <span class="number">0x0000007B</span>, <span class="number">0x000006DC</span>, <span class="number">0x243F6DAD</span>, <span class="number">0x000000FC</span>, <span class="number">0x243F6B51</span>, <span class="number">0x243F6CE4</span>, <span class="number">0x00000760</span>, <span class="number">0x243F6AF2</span>, <span class="number">0x00000004</span>, <span class="number">0x000006B5</span>, <span class="number">0x243F6D8E</span>, <span class="number">0x0000018C</span>, <span class="number">0x243F6B3C</span>, <span class="number">0x243F6D44</span>, <span class="number">0x0000071A</span>, <span class="number">0x243F6ADD</span>, <span class="number">0x0000002E</span>, <span class="number">0x0000075A</span>, <span class="number">0x243F6DCE</span>, <span class="number">0x00000120</span>, <span class="number">0x243F6BFB</span>, <span class="number">0x243F6D9F</span>, <span class="number">0x000007B1</span>, <span class="number">0x243F6BCC</span>, <span class="number">0x00000063</span>, <span class="number">0x0000068A</span>, <span class="number">0x243F6C2D</span>, <span class="number">0x00000034</span>, <span class="number">0x243F6A0C</span>, <span class="number">0x243F6D0A</span>, <span class="number">0x000006D7</span>, <span class="number">0x243F6B8B</span>, <span class="number">0x00000112</span>, <span class="number">0x000006EE</span>, <span class="number">0x243F6DF2</span>, <span class="number">0x000000AF</span>, <span class="number">0x243F6A7C</span>, <span class="number">0x243F6C01</span>, <span class="number">0x00000628</span>, <span class="number">0x243F6B11</span>, <span class="number">0x0000005D</span>, <span class="number">0x00000657</span>, <span class="number">0x243F6CE0</span>, <span class="number">0x0000008A</span>, <span class="number">0x243F6B43</span>, <span class="number">0x243F6C86</span>, <span class="number">0x00000682</span>, <span class="number">0x243F6B31</span>, <span class="number">0x0000003B</span>, <span class="number">0x000007A5</span>, <span class="number">0x243F6CF5</span>, <span class="number">0x00000058</span>, <span class="number">0x243F6B6B</span>, <span class="number">0x243F6DA1</span>, <span class="number">0x00000657</span>, <span class="number">0x243F6B40</span>, <span class="number">0x0000008E</span>, <span class="number">0x000006F1</span>, <span class="number">0x243F6C5E</span>, <span class="number">0x00000031</span>, <span class="number">0x243F6A50</span>, <span class="number">0x243F6CBD</span>, <span class="number">0x00000721</span>, <span class="number">0x243F6BF3</span>, <span class="number">0x0000019E</span>, <span class="number">0x00000766</span>, <span class="number">0x243F6C8A</span>, <span class="number">0x0000008D</span>, <span class="number">0x243F6B1B</span>, <span class="number">0x243F6C2B</span>, <span class="number">0x0000076D</span>, <span class="number">0x243F6BCA</span>, <span class="number">0x0000019D</span>, <span class="number">0x000007BD</span>, <span class="number">0x243F6C64</span>, <span class="number">0x000001F6</span>, <span class="number">0x243F6B7C</span>, <span class="number">0x243F6D1B</span>, <span class="number">0x00000735</span>, <span class="number">0x243F6BB3</span>, <span class="number">0x000000B0</span>, <span class="number">0x000006B1</span>, <span class="number">0x243F6D6A</span>, <span class="number">0x000000DD</span>, <span class="number">0x243F6BC6</span>, <span class="number">0x243F6CC0</span>, <span class="number">0x000007E2</span>, <span class="number">0x243F6A78</span>, <span class="number">0x0000004B</span>, <span class="number">0x00000639</span>, <span class="number">0x243F6D29</span>, <span class="number">0x000001DF</span>, <span class="number">0x243F6BB1</span>, <span class="number">0x243F6CD2</span>, <span class="number">0x000006E6</span>, <span class="number">0x243F6B54</span>, <span class="number">0x000001E0</span>, <span class="number">0x000007CC</span>, <span class="number">0x243F6C8D</span>, <span class="number">0x000000C7</span>, <span class="number">0x243F6B33</span>, <span class="number">0x243F6C98</span>, <span class="number">0x00000666</span>, <span class="number">0x243F6B02</span>, <span class="number">0x000001C8</span>, <span class="number">0x0000071D</span>, <span class="number">0x243F6CC3</span>, <span class="number">0x000000BF</span>, <span class="number">0x243F6AA3</span>, <span class="number">0x243F6DE8</span>, <span class="number">0x000006E9</span>, <span class="number">0x243F6BEF</span>, <span class="number">0x000000DB</span>, <span class="number">0x00000660</span>, <span class="number">0x243F6DB8</span>, <span class="number">0x000001DD</span>, <span class="number">0x243F6BD5</span>, <span class="number">0x243F6C87</span>, <span class="number">0x0000072C</span>, <span class="number">0x243F6BAA</span>, <span class="number">0x000001F5</span>, <span class="number">0x00000663</span>, <span class="number">0x243F6DB3</span>, <span class="number">0x00000069</span>, <span class="number">0x243F6A29</span>, <span class="number">0x243F6C6A</span>, <span class="number">0x000006EB</span>, <span class="number">0x243F6B17</span>, <span class="number">0x00000137</span>, <span class="number">0x0000071B</span>, <span class="number">0x243F6CF1</span>, <span class="number">0x00000193</span>, <span class="number">0x243F6A00</span>, <span class="number">0x243F6D1A</span>, <span class="number">0x000006FF</span>, <span class="number">0x243F6B0E</span>, <span class="number">0x00000021</span>, <span class="number">0x000007B1</span>, <span class="number">0x243F6D28</span>, <span class="number">0x000001BE</span>, <span class="number">0x243F6BEA</span>, <span class="number">0x243F6DB3</span>, <span class="number">0x00000787</span>, <span class="number">0x243F6B74</span>, <span class="number">0x00000104</span>, <span class="number">0x00000736</span>, <span class="number">0x243F6CBE</span>, <span class="number">0x00000089</span>, <span class="number">0x243F6A05</span>, <span class="number">0x243F6C0C</span>, <span class="number">0x000007AE</span>, <span class="number">0x243F6A08</span>, <span class="number">0x00000142</span>, <span class="number">0x000006B0</span>], [<span class="number">0x243F6DD9</span>, <span class="number">0x0000017F</span>, <span class="number">0x243F6A57</span>, <span class="number">0x0000012C</span>, <span class="number">0x243F6A21</span>, <span class="number">0x243F6B8B</span>, <span class="number">0x000000C6</span>, <span class="number">0x000018C5</span>, <span class="number">0x243F6ACE</span>, <span class="number">0x243F6C4B</span>, <span class="number">0x0000067A</span>, <span class="number">0x243F6A2B</span>, <span class="number">0x243F6F63</span>, <span class="number">0x00001C37</span>, <span class="number">0x000019D3</span>, <span class="number">0x00000114</span>, <span class="number">0x00001C6A</span>, <span class="number">0x243F73C0</span>, <span class="number">0x00001819</span>, <span class="number">0x243F740E</span>, <span class="number">0x243F7446</span>, <span class="number">0x243F73F7</span>, <span class="number">0x243F7319</span>, <span class="number">0x00000004</span>, <span class="number">0x243F683B</span>, <span class="number">0x243F7154</span>, <span class="number">0x243F6CD1</span>, <span class="number">0x00001B40</span>, <span class="number">0x000007D2</span>, <span class="number">0x00001A18</span>, <span class="number">0x243F6047</span>, <span class="number">0x000019FF</span>, <span class="number">0x243F6828</span>, <span class="number">0x0000120F</span>, <span class="number">0x243F788D</span>, <span class="number">0x00000358</span>, <span class="number">0x243F755C</span>, <span class="number">0x00001D78</span>, <span class="number">0x243F6EC0</span>, <span class="number">0x243F7510</span>, <span class="number">0x00000CB6</span>, <span class="number">0x00000259</span>, <span class="number">0x243F6AC6</span>, <span class="number">0x243F605F</span>, <span class="number">0x000010D7</span>, <span class="number">0x243F7496</span>, <span class="number">0x000006CA</span>, <span class="number">0x00001B44</span>, <span class="number">0x243F77E8</span>, <span class="number">0x243F750D</span>, <span class="number">0x00001E97</span>, <span class="number">0x243F74E5</span>, <span class="number">0x00001F57</span>, <span class="number">0x00000388</span>, <span class="number">0x000019A3</span>, <span class="number">0x243F6DF6</span>, <span class="number">0x243F74D4</span>, <span class="number">0x00000BD2</span>, <span class="number">0x243F782D</span>, <span class="number">0x00001DE7</span>, <span class="number">0x243F7596</span>, <span class="number">0x243F6E9E</span>, <span class="number">0x000005B8</span>, <span class="number">0x243F64B7</span>, <span class="number">0x243F7743</span>, <span class="number">0x243F79C4</span>, <span class="number">0x00000D70</span>, <span class="number">0x243F7230</span>, <span class="number">0x00000167</span>, <span class="number">0x00000FD2</span>, <span class="number">0x243F67CF</span>, <span class="number">0x0000028A</span>, <span class="number">0x243F6DAA</span>, <span class="number">0x00000914</span>, <span class="number">0x00000C6C</span>, <span class="number">0x000018C1</span>, <span class="number">0x243F6FD0</span>, <span class="number">0x00000D73</span>, <span class="number">0x243F7FFB</span>, <span class="number">0x000005DB</span>, <span class="number">0x243F728A</span>, <span class="number">0x0000109A</span>, <span class="number">0x243F7838</span>, <span class="number">0x243F6A4F</span>, <span class="number">0x00000590</span>, <span class="number">0x243F60EC</span>, <span class="number">0x00001ECE</span>, <span class="number">0x000018AE</span>, <span class="number">0x243F7780</span>, <span class="number">0x243F6C0D</span>, <span class="number">0x243F6944</span>, <span class="number">0x00001F7E</span>, <span class="number">0x243F6C54</span>, <span class="number">0x00001A3C</span>, <span class="number">0x243F69BD</span>, <span class="number">0x00001C8C</span>, <span class="number">0x243F6735</span>, <span class="number">0x243F6B1C</span>, <span class="number">0x00000E62</span>, <span class="number">0x243F6BAC</span>, <span class="number">0x243F77D8</span>, <span class="number">0x00000610</span>, <span class="number">0x00001C91</span>, <span class="number">0x243F72D8</span>, <span class="number">0x000002C3</span>, <span class="number">0x000006B5</span>, <span class="number">0x243F6EFD</span>, <span class="number">0x000004FA</span>, <span class="number">0x243F7964</span>, <span class="number">0x000000C1</span>, <span class="number">0x243F6B31</span>, <span class="number">0x00000FC6</span>, <span class="number">0x243F6599</span>, <span class="number">0x243F6FC0</span>, <span class="number">0x000016D1</span>, <span class="number">0x243F7E5C</span>, <span class="number">0x0000161A</span>, <span class="number">0x000001C2</span>, <span class="number">0x243F72FB</span>, <span class="number">0x00001AF6</span>, <span class="number">0x243F630A</span>, <span class="number">0x243F677E</span>, <span class="number">0x243F75A2</span>, <span class="number">0x0000008F</span>, <span class="number">0x243F612D</span>, <span class="number">0x000005C4</span>, <span class="number">0x00001739</span>, <span class="number">0x00001A95</span>, <span class="number">0x243F7163</span>, <span class="number">0x00001517</span>, <span class="number">0x243F73A9</span>, <span class="number">0x243F7B9F</span>, <span class="number">0x243F6605</span>, <span class="number">0x243F789F</span>, <span class="number">0x243F78D9</span>, <span class="number">0x243F6481</span>, <span class="number">0x00000407</span>, <span class="number">0x00001402</span>, <span class="number">0x243F76DD</span>, <span class="number">0x243F6C84</span>, <span class="number">0x243F65DE</span>, <span class="number">0x0000085E</span>, <span class="number">0x243F613E</span>, <span class="number">0x00001BE3</span>, <span class="number">0x243F6A7D</span>, <span class="number">0x000016B9</span>, <span class="number">0x00001A72</span>, <span class="number">0x243F7DE6</span>, <span class="number">0x243F6E50</span>, <span class="number">0x243F6582</span>, <span class="number">0x000001B3</span>, <span class="number">0x243F7A6A</span>, <span class="number">0x00001A0D</span>, <span class="number">0x0000195F</span>, <span class="number">0x243F6CEE</span>, <span class="number">0x243F6B4B</span>, <span class="number">0x00001517</span>, <span class="number">0x00000F71</span>, <span class="number">0x00001733</span>, <span class="number">0x00001304</span>, <span class="number">0x243F6D4A</span>, <span class="number">0x243F73EC</span>, <span class="number">0x000014C1</span>, <span class="number">0x00000D60</span>, <span class="number">0x00001A0A</span>, <span class="number">0x243F65C5</span>, <span class="number">0x243F6362</span>, <span class="number">0x000007DF</span>, <span class="number">0x0000090D</span>, <span class="number">0x000002B4</span>, <span class="number">0x243F7F3E</span>, <span class="number">0x00000E12</span>, <span class="number">0x243F7DB5</span>, <span class="number">0x243F709F</span>, <span class="number">0x243F712C</span>, <span class="number">0x243F638E</span>, <span class="number">0x243F77A0</span>, <span class="number">0x00000089</span>, <span class="number">0x243F7B1A</span>, <span class="number">0x00000763</span>, <span class="number">0x243F7C76</span>, <span class="number">0x243F6F14</span>, <span class="number">0x243F7626</span>, <span class="number">0x000009C4</span>, <span class="number">0x243F77BC</span>, <span class="number">0x243F6C86</span>, <span class="number">0x243F7FD2</span>, <span class="number">0x00000600</span>, <span class="number">0x243F76A8</span>, <span class="number">0x243F6F27</span>, <span class="number">0x0000047F</span>, <span class="number">0x000006DE</span>, <span class="number">0x243F78B8</span>, <span class="number">0x243F6DC0</span>, <span class="number">0x00001238</span>, <span class="number">0x243F7FF0</span>, <span class="number">0x243F66DE</span>, <span class="number">0x243F6E3F</span>, <span class="number">0x00000860</span>, <span class="number">0x000019ED</span>, <span class="number">0x000007B5</span>, <span class="number">0x00000C92</span>, <span class="number">0x243F70FE</span>, <span class="number">0x243F6DB7</span>, <span class="number">0x243F7049</span>, <span class="number">0x243F6BFF</span>, <span class="number">0x243F6C8F</span>, <span class="number">0x0000017F</span>, <span class="number">0x243F7510</span>, <span class="number">0x243F7C75</span>, <span class="number">0x00001AE7</span>, <span class="number">0x000015B8</span>, <span class="number">0x000009F6</span>, <span class="number">0x0000038E</span>, <span class="number">0x243F614F</span>, <span class="number">0x243F7A8B</span>, <span class="number">0x243F696F</span>, <span class="number">0x00001871</span>, <span class="number">0x243F7670</span>, <span class="number">0x243F699C</span>, <span class="number">0x243F7707</span>, <span class="number">0x243F6622</span>, <span class="number">0x243F643A</span>, <span class="number">0x000017B5</span>, <span class="number">0x0000170B</span>, <span class="number">0x00001405</span>, <span class="number">0x243F7819</span>, <span class="number">0x243F6A96</span>, <span class="number">0x243F6815</span>, <span class="number">0x00000892</span>, <span class="number">0x243F7699</span>, <span class="number">0x243F7FB6</span>, <span class="number">0x243F7F3F</span>, <span class="number">0x00000EF4</span>, <span class="number">0x243F777E</span>, <span class="number">0x000005C3</span>, <span class="number">0x0000006B</span>, <span class="number">0x00001984</span>, <span class="number">0x00001B5F</span>, <span class="number">0x000010CC</span>, <span class="number">0x00000155</span>, <span class="number">0x243F7738</span>, <span class="number">0x00001A56</span>, <span class="number">0x00000709</span>, <span class="number">0x00001DE0</span>, <span class="number">0x243F6CA6</span>, <span class="number">0x243F7F68</span>, <span class="number">0x243F7230</span>, <span class="number">0x00001280</span>, <span class="number">0x243F6E81</span>, <span class="number">0x00001078</span>, <span class="number">0x00001D32</span>, <span class="number">0x243F68BD</span>, <span class="number">0x00000818</span>, <span class="number">0x243F6311</span>, <span class="number">0x243F675C</span>], [<span class="number">0x243F78C4</span>, <span class="number">0x243F753E</span>, <span class="number">0x243F736D</span>, <span class="number">0x243F75C4</span>, <span class="number">0x243F7B49</span>, <span class="number">0x243F6182</span>, <span class="number">0x243F7736</span>, <span class="number">0x487EDA66</span>, <span class="number">0x6C41AE95</span>, <span class="number">0x00000ED2</span>, <span class="number">0x243F68E7</span>, <span class="number">0x243F51D9</span>, <span class="number">0x243F4D7E</span>, <span class="number">0x00001881</span>, <span class="number">0x487EFA5B</span>, <span class="number">0x243F50D5</span>, <span class="number">0x00003A76</span>, <span class="number">0x00004BFD</span>, <span class="number">0x000042CC</span>, <span class="number">0x243F5740</span>, <span class="number">0x4881D4F4</span>, <span class="number">0x243F3454</span>, <span class="number">0x487E9D94</span>, <span class="number">0x24C0BCA1</span>, <span class="number">0x24C0A52D</span>, <span class="number">0x6C41ECE3</span>, <span class="number">0x243FAFD6</span>, <span class="number">0x00FFCA25</span>, <span class="number">0x24C0A4AC</span>, <span class="number">0x6C418D7F</span>, <span class="number">0x0000322D</span>, <span class="number">0x24C0BC9A</span>, <span class="number">0xB4418102</span>, <span class="number">0x243F458F</span>, <span class="number">0x90FE5500</span>, <span class="number">0xFC3F4317</span>, <span class="number">0xD8003DE3</span>, <span class="number">0xD880B029</span>, <span class="number">0xD88067D2</span>, <span class="number">0xFD414299</span>, <span class="number">0x6D3F9C8A</span>, <span class="number">0x680273CD</span>, <span class="number">0x4C3D6B79</span>, <span class="number">0x907ED9F3</span>, <span class="number">0xD8005409</span>, <span class="number">0x4C3D9464</span>, <span class="number">0x04BC53DA</span>, <span class="number">0x9100426C</span>, <span class="number">0x01805807</span>, <span class="number">0x4CC294D4</span>, <span class="number">0x91FD752E</span>, <span class="number">0xB4BE1640</span>, <span class="number">0x48010E11</span>, <span class="number">0xE3032424</span>, <span class="number">0xE37C4473</span>, <span class="number">0x48012FF8</span>, <span class="number">0x48014B78</span>, <span class="number">0xE37C0627</span>, <span class="number">0x8B7EECC2</span>, <span class="number">0x6C3EE5FB</span>, <span class="number">0xFC3FB6E8</span>, <span class="number">0xAB02DFA6</span>, <span class="number">0x1E3DA9CE</span>, <span class="number">0xB3FA7DB4</span>, <span class="number">0x97C4E4E9</span>, <span class="number">0x6EBFFAE7</span>, <span class="number">0x3DBE4086</span>, <span class="number">0xDB3BD655</span>, <span class="number">0x9180AE11</span>, <span class="number">0x74402D92</span>, <span class="number">0xE4C0B226</span>, <span class="number">0x417E59CF</span>, <span class="number">0x2D3E9A98</span>, <span class="number">0x74C0161F</span>, <span class="number">0x3CBED7FF</span>, <span class="number">0x65404821</span>, <span class="number">0xBA7D1866</span>, <span class="number">0x453CFEF2</span>, <span class="number">0x4EF981B4</span>, <span class="number">0x63065FB2</span>, <span class="number">0xBBF9EB62</span>, <span class="number">0x6604C332</span>, <span class="number">0xC1409279</span>, <span class="number">0xCE3B5B30</span>, <span class="number">0xA27A27C0</span>, <span class="number">0xA402D0DB</span>, <span class="number">0xA402A165</span>, <span class="number">0x6A38B205</span>, <span class="number">0x9E4030AD</span>, <span class="number">0x8143D678</span>, <span class="number">0x81BCEF4A</span>, <span class="number">0x2A01BF61</span>, <span class="number">0xC33CB9D4</span>, <span class="number">0xA58387B8</span>, <span class="number">0xA5839152</span>, <span class="number">0x5C7FE1E9</span>, <span class="number">0x79BE6BC7</span>, <span class="number">0xD6FEA602</span>, <span class="number">0x9E80BA77</span>, <span class="number">0xD4BF5F2C</span>, <span class="number">0x7403D770</span>, <span class="number">0x63C1B0E9</span>, <span class="number">0xE683FB24</span>, <span class="number">0x8806F26D</span>, <span class="number">0x313A14C9</span>, <span class="number">0xF0FDD92D</span>, <span class="number">0x257EF53D</span>, <span class="number">0x6FFBD242</span>, <span class="number">0x93BB1CE6</span>, <span class="number">0x23F9C6D3</span>, <span class="number">0x40B9FEED</span>, <span class="number">0x247C6C25</span>, <span class="number">0xA5BE678D</span>, <span class="number">0xD1056FF7</span>, <span class="number">0x41047DD2</span>, <span class="number">0x3339C309</span>, <span class="number">0x2084BA70</span>, <span class="number">0x94B8F697</span>, <span class="number">0xBFBB7643</span>, <span class="number">0xCD40FE71</span>, <span class="number">0x18C7E438</span>, <span class="number">0x9FFA5966</span>, <span class="number">0x6DFBE110</span>, <span class="number">0xD9C73A1C</span>, <span class="number">0x8E8409F9</span>, <span class="number">0x457A62B9</span>, <span class="number">0x61BB67C5</span>, <span class="number">0xA34394F8</span>, <span class="number">0x133EC8BB</span>, <span class="number">0xD4044FDD</span>, <span class="number">0x37C2F42A</span>, <span class="number">0xD27CB5F5</span>, <span class="number">0xFA4385E6</span>, <span class="number">0xDB463532</span>, <span class="number">0xE77C83DB</span>, <span class="number">0x627AF59D</span>, <span class="number">0xB2BEF94C</span>, <span class="number">0x9538FC45</span>, <span class="number">0x94C780B8</span>, <span class="number">0xCE7D1809</span>, <span class="number">0x3600DB13</span>, <span class="number">0xD4043B07</span>, <span class="number">0x823978D3</span>, <span class="number">0xC941E157</span>, <span class="number">0xCF3B9C59</span>, <span class="number">0x1BBE0DBF</span>, <span class="number">0x45B82831</span>, <span class="number">0x2FBA2022</span>, <span class="number">0xBA404B95</span>, <span class="number">0xFBC6E8E9</span>, <span class="number">0x6BB97E01</span>, <span class="number">0xFE856CA4</span>, <span class="number">0xE0F86BE2</span>, <span class="number">0x417CFCC8</span>, <span class="number">0x593E2226</span>, <span class="number">0xCFC24E4C</span>, <span class="number">0x7A0120B8</span>, <span class="number">0x497C2328</span>, <span class="number">0xDABA34D7</span>, <span class="number">0xE4FEF97A</span>, <span class="number">0x30F9F8F0</span>, <span class="number">0xA3008CE8</span>, <span class="number">0x53042AB9</span>, <span class="number">0xDCC61F48</span>, <span class="number">0x413C8D0D</span>, <span class="number">0xF58629DF</span>, <span class="number">0xFE86F2F4</span>, <span class="number">0x9D7DC3B9</span>, <span class="number">0x78C46C05</span>, <span class="number">0x0F0042A4</span>, <span class="number">0xE0C6DC69</span>, <span class="number">0xF03965FE</span>, <span class="number">0x0D392FF5</span>, <span class="number">0x96BD28CC</span>, <span class="number">0x5007B425</span>, <span class="number">0xB23A094E</span>, <span class="number">0x78C58334</span>, <span class="number">0x554534AD</span>, <span class="number">0x76BB974C</span>, <span class="number">0xCE463A66</span>, <span class="number">0x503E5C7E</span>, <span class="number">0xECC6E9D5</span>, <span class="number">0xB2BC9A65</span>, <span class="number">0x7EFA2172</span>, <span class="number">0x9CBC1C30</span>, <span class="number">0x8ABB77E4</span>, <span class="number">0xC405B76D</span>, <span class="number">0x957E308C</span>, <span class="number">0x33C63316</span>, <span class="number">0x4538C965</span>, <span class="number">0x9E7DEEC8</span>, <span class="number">0x52429D62</span>, <span class="number">0x12477299</span>, <span class="number">0x5B06AB74</span>, <span class="number">0xE230A2BD</span>, <span class="number">0xECC0E3FC</span>, <span class="number">0x3BBB450A</span>, <span class="number">0xDD08DCAF</span>, <span class="number">0x85310C1D</span>, <span class="number">0xD6BF06E5</span>, <span class="number">0x8EFA5117</span>, <span class="number">0x008ED76D</span>, <span class="number">0xE60CBBDB</span>, <span class="number">0x153F2D29</span>, <span class="number">0x40036983</span>, <span class="number">0xCECDFD2E</span>, <span class="number">0xFBB1B2D1</span>, <span class="number">0x7545E297</span>, <span class="number">0xE8358074</span>, <span class="number">0x8DF723F0</span>, <span class="number">0xA23629D2</span>, <span class="number">0x5FCBD770</span>, <span class="number">0x94BB0B3F</span>, <span class="number">0xCC884977</span>, <span class="number">0x8DF5FC17</span>, <span class="number">0xA2F3EFA9</span>, <span class="number">0x0032BD44</span>, <span class="number">0x454EB69F</span>, <span class="number">0x52361CBE</span>, <span class="number">0x284A2C50</span>, <span class="number">0x808DB6EF</span>, <span class="number">0x100C2C87</span>, <span class="number">0xC231A257</span>, <span class="number">0xF649F162</span>, <span class="number">0x34744D4A</span>, <span class="number">0xA1C8D102</span>, <span class="number">0xA4BB9290</span>, <span class="number">0xD0889351</span>, <span class="number">0x880D0584</span>, <span class="number">0xD947E8F7</span>, <span class="number">0x6773EB5C</span>, <span class="number">0x150E2584</span>, <span class="number">0x0F75E358</span>, <span class="number">0xE5F772E0</span>, <span class="number">0x9F383204</span>, <span class="number">0x75F4A824</span>, <span class="number">0x20B41979</span>, <span class="number">0x7141F2E2</span>, <span class="number">0x2889B099</span>, <span class="number">0x3A48D877</span>, <span class="number">0x0D8FEB17</span>, <span class="number">0xBB82ED5A</span>, <span class="number">0x137E775D</span>, <span class="number">0x1489F19C</span>, <span class="number">0x1D4E3534</span>, <span class="number">0xEBF75BE4</span>, <span class="number">0x638042BA</span>, <span class="number">0x88B12A5F</span>, <span class="number">0x1B731B37</span>, <span class="number">0x7340DC9D</span>, <span class="number">0x86BF7902</span>, <span class="number">0x310D3C12</span>, <span class="number">0x00F6DEFE</span>, <span class="number">0xFF3B2E2F</span>, <span class="number">0x2748AF3A</span>, <span class="number">0xC6BE79AE</span>]</span><br><span class="line">        ]</span><br><span class="line">cipher = [<span class="number">0x8DF0B770</span>, <span class="number">0x4B1EB28E</span>, <span class="number">0x73C65C1C</span>, <span class="number">0x53DE48FD</span>,</span><br><span class="line">          <span class="number">0x982EDF34</span>, <span class="number">0xD8229123</span>, <span class="number">0x90271182</span>, <span class="number">0x1F4271E7</span>]</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(cipher), <span class="number">2</span>):</span><br><span class="line">    left = cipher[i+<span class="number">1</span>]</span><br><span class="line">    right = cipher[i] ^ <span class="number">0x243F6BA8</span></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">        prev_left = right</span><br><span class="line">        pref_right = left ^ (sbox[<span class="number">0</span>][right &gt;&gt; <span class="number">24</span>] + sbox[<span class="number">1</span>][right &gt;&gt; <span class="number">16</span> &amp; <span class="number">0xff</span>]) ^ (</span><br><span class="line">            sbox[<span class="number">2</span>][right &gt;&gt; <span class="number">8</span> &amp; <span class="number">0xff</span>] + sbox[<span class="number">3</span>][right &amp; <span class="number">0xff</span>])</span><br><span class="line">        left = prev_left</span><br><span class="line">        right = pref_right &amp; <span class="number">0xffffffff</span></span><br><span class="line">    left ^= <span class="number">0x125</span></span><br><span class="line">    flag += left.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>) + right.to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="ezAndroid"><a href="#ezAndroid" class="headerlink" title="ezAndroid"></a>ezAndroid</h1><p>本题的考点是会不会对luajava加密的lua文件进行解密。<br>解密的关键是分析加密函数，本题的加密落在常规的luaL_loadbufferx函数（参其它对luajava分析的文章）<br>针对本题的加密写了一个py脚本进行lua解密：<br><a href="https://github.com/Airrcat/luajava_decode">https://github.com/Airrcat/luajava_decode</a><br>解密出来得到的是luac，可以使用unluac等软件或一些在线反编译软件进行解密，本题用<a href="https://luadec.metaworm.site/%E8%BF%99%E4%B8%AA%E7%BD%91%E7%AB%99%E8%A7%A3%E5%AF%86%E6%95%88%E6%9E%9C%E8%BE%83%E5%A5%BD%E3%80%82">https://luadec.metaworm.site/这个网站解密效果较好。</a><br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line">cipher = [<span class="number">863918170</span>,</span><br><span class="line">          <span class="number">366827450</span>,</span><br><span class="line">          <span class="number">2944604520</span>,</span><br><span class="line">          <span class="number">1314064158</span>,</span><br><span class="line">          <span class="number">2534040034</span>,</span><br><span class="line">          <span class="number">1250268803</span>,</span><br><span class="line">          <span class="number">3402278143</span>,</span><br><span class="line">          <span class="number">1361039932</span>,</span><br><span class="line">          <span class="number">3087907484</span>,</span><br><span class="line">          <span class="number">3107271874</span>]</span><br><span class="line">key = [</span><br><span class="line">    <span class="number">5976</span>,</span><br><span class="line">    <span class="number">40857</span>,</span><br><span class="line">    <span class="number">3298229483</span>,</span><br><span class="line">    <span class="number">1500946329</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, key</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>] ^ <span class="number">14</span>), c_uint32(v[<span class="number">1</span>] ^ <span class="number">17</span>)</span><br><span class="line">    delta = <span class="number">0x80D6732B</span></span><br><span class="line">    rounds = <span class="number">38</span></span><br><span class="line">    total = c_uint32(delta * rounds)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        v1.value -= (((v0.value &lt;&lt; <span class="number">4</span>) ^ (v0.value &gt;&gt; <span class="number">5</span>)) +</span><br><span class="line">                     v0.value) ^ (total.value + key[(total.value &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>])</span><br><span class="line">        v0.value -= (((v1.value &lt;&lt; <span class="number">4</span>) ^ (v1.value &gt;&gt; <span class="number">5</span>)) +</span><br><span class="line">                     v1.value) ^ (total.value + key[total.value &amp; <span class="number">3</span>])</span><br><span class="line">        total.value -= delta</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 标准xtea</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    value = cipher</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;cypher len:&quot;</span>, <span class="built_in">len</span>(cipher))</span><br><span class="line"></span><br><span class="line">    flag = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(value), <span class="number">2</span>):</span><br><span class="line">        res = decrypt(value[i:i+<span class="number">2</span>], key)</span><br><span class="line">        flag += res[<span class="number">0</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>) + res[<span class="number">1</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(flag, <span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">Encrypted data is :  0xae685ec7 0x59af4238</span></span><br><span class="line"><span class="string">Decrypted data is :  0x12345678 0x78563412</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目链接：&lt;a href=&quot;https://github.com/Airrcat/long_long/tree/main/DASCTF_2024_10&quot;&gt;https://github.com/Airrcat/long_long/tree/main/DASCTF_2024_1</summary>
      
    
    
    
    
    <category term="Reverse" scheme="https://airrcat.github.io/tags/Reverse/"/>
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Error Problem: package iptables-legacy in yum install</title>
    <link href="https://airrcat.github.io/2024/09/26/Error-Problem-package-iptables-legacy-in-yum-install/"/>
    <id>https://airrcat.github.io/2024/09/26/Error-Problem-package-iptables-legacy-in-yum-install/</id>
    <published>2024-09-26T08:47:59.000Z</published>
    <updated>2024-09-26T08:49:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>About Error:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Error:</span><br><span class="line"> Problem: package iptables-legacy-1.8.10-2.2.el9.next.x86_64 from @System requires (iptables-libs(x86-64) = 1.8.10-2.el9 or iptables-libs(x86-64) = 1.8.10-2.el9_1), but none of the providers can be installed</span><br><span class="line">  - cannot install both iptables-libs-1.8.10-5.el9.x86_64 from baseos and iptables-libs-1.8.10-2.el9.x86_64 from @System</span><br><span class="line">  - cannot install both iptables-libs-1.8.10-5.el9.x86_64 from baseos and iptables-libs-1.8.10-2.el9.x86_64 from baseos</span><br><span class="line">  - cannot install the best update candidate <span class="keyword">for</span> package iptables-libs-1.8.10-2.el9.x86_64</span><br><span class="line">  - problem with installed package iptables-legacy-1.8.10-2.2.el9.next.x86_64</span><br><span class="line">(try to add <span class="string">&#x27;--allowerasing&#x27;</span> to <span class="built_in">command</span> line to replace conflicting packages or <span class="string">&#x27;--skip-broken&#x27;</span> to skip uninstallable packages or <span class="string">&#x27;--nobest&#x27;</span> to use not only best candidate packages)</span><br></pre></td></tr></table></figure><p>Solve solution:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum clean packages</span><br><span class="line">yum upgrade --skip-broken --allowerasing</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;About Error:&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/s</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>UPX ELF Linux 手动动态脱壳（含一魔改壳实例）</title>
    <link href="https://airrcat.github.io/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/"/>
    <id>https://airrcat.github.io/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/</id>
    <published>2024-08-30T06:14:56.000Z</published>
    <updated>2024-08-30T11:52:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>#upx #packer<br>近期见到不少UPX魔改壳，需要走linux手脱，这里简单记录<strong>一个demo</strong>和<strong>一个实例</strong>的手脱例子</p><p><a href="https://github.com/Airrcat/-/blob/main/UPX%20PRO">魔改实例下载地址</a></p><pre><code>我脱ELF的UPX壳主要有两条路径。第一条是常规分析，跟踪到几个特征点就能判断当前脱壳到了哪一步。如特殊的jmp点，连续的几个循环和call调用，第二条是入口点判断，ELF的UPX壳基本会走到call _dl_start、init、fini函数，或者说这是ELF程序函数头的特征，那么我们只需要调试到call _dl_start等初始化函数时，就能知道脱壳已完成了。上述两条思路均有在下文中体现。</code></pre><h2 id="demo手脱"><a href="#demo手脱" class="headerlink" title="demo手脱"></a>demo手脱</h2><p>简单写一个测试程序</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;here is hello!\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">        hello();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;here is main!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>普通编译指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc test.c -o <span class="built_in">test</span></span><br></pre></td></tr></table></figure><p>下载upx-linux版</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/upx/upx/releases/download/v4.2.4/upx-4.2.4-amd64_linux.tar.xz</span><br><span class="line">tar -xvf upx-4.2.4-amd64_linux.tar.xz</span><br></pre></td></tr></table></figure><p><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-10.png" alt="alt text"><br>这里同时测试一下-1和-9命令，对应两种压缩效果</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./upx -1 ../test -o test_compress_faster</span><br><span class="line">./upx -9 ../test -o test_compress_better</span><br></pre></td></tr></table></figure><p>ida看看<br>函数结构差别不大<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-11.png" alt="alt text"><br>无其它段，只有load段<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-12.png" alt="alt text"><br>upx的-1~-9压缩级别不影响基本的解压缩方式，这里用-9 compress better做一个手动脱壳演示。<br>首先在start处下个断点<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-13.png" alt="alt text">一路f7，单步跟入后可发现如下地方：<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-14.png" alt="alt text"><br>upx linux的特点是，其会用到不少syscall来执行sys_open、sys_mmap等函数，以此来新建段、解密并执行。就像windows shellcode的VirtualAlloc+VirtualProtect一样<br>于是一直f7我们很容易看到：<br>新建段<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-15.png" alt="alt text"><br>这里我们还可以看一下段视图（ctrl+s）<br>调用之前：<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-16.png" alt="alt text"><br>调用之后（若是没显示是ida的问题，需要run一下才能刷新段视图，但其实段已经新建了）：<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-17.png" alt="alt text"></p><p>修改段属性<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-18.png" alt="alt text"><br>紧跟着的<code>jmp r13</code>会跳转到新建的debug002段<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-19.png" alt="alt text"><br>依旧f7，f7之后会遇到三个循环体，这里没什么东西可以直接跳过<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-20.png" alt="alt text"><br>这个函数的下面还有一些函数<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-21.png" alt="alt text"><br>这些是会真正进行解密操作的函数，确定这一点是根据接下来的两种分析思路：<br>①一般这种小程序的入口点都是401000，我们可以在401000下硬件读、写断点或者执行断点，再或者接下来的几个call都f8，f8之后看看401000函数有没有变化.<br>如第一个call<img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-22.png" alt="alt text"><br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-23.png" alt="alt text"><br>执行后：<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-24.png" alt="alt text"><br>可看到解密成功。<br>②UPX的linux版有一些固定的规律，比如<br>看到最底下的这一句<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-25.png" alt="alt text"><br>你一直f8到这里也差不多，总之到这里后继续跟进<br>可发现：<br>进入初始化函数了。<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-26.png" alt="alt text"><br>再一跳转<br>哟，start<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-27.png" alt="alt text"></p><h2 id="魔改实例脱壳"><a href="#魔改实例脱壳" class="headerlink" title="魔改实例脱壳"></a>魔改实例脱壳</h2><p><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-28.png" alt="alt text"><br>这是一个4.01版本的魔改壳<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-29.png" alt="alt text"><br>需要注意的是，有的UPX打包的程序，其程序类型可能是DYN，ida动调时会提示：”Inputfile is a dynamic file。。。”然后不让你调试，这时候可以修改文件头信息从03-&gt;DYN改为02-&gt;EXEC<img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-30.png" alt="alt text"><br>照样开头下断点<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-31.png" alt="alt text"><br>该程序运行起来时的段信息和我们正常的不太一样，于是就不太能像前面说的，对可能的开头代码下执行断点。<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-32.png" alt="alt text"><br>按照步骤执行到此处：<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-33.png" alt="alt text"><br>熟悉的地方<br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-34.png" alt="alt text"></p><p>简易脱壳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ida_bytes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_idc <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_kernwin <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ida_dbg <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> idaapi <span class="keyword">import</span> *</span><br><span class="line">start = <span class="number">0</span></span><br><span class="line">end = <span class="number">0x692b</span></span><br><span class="line">content = get_bytes(start, end-start)</span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;unpack&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">f.write(content)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><p><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/1725018695340.png" alt="alt text"><br><img src="/2024/08/30/UPX-Linux-%E6%89%8B%E5%8A%A8%E5%8A%A8%E6%80%81%E8%84%B1%E5%A3%B3%EF%BC%88%E5%90%AB%E4%B8%80%E9%AD%94%E6%94%B9%E5%A3%B3%E5%AE%9E%E4%BE%8B%EF%BC%89/image-35.png" alt="alt text"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;#upx #packer&lt;br&gt;近期见到不少UPX魔改壳，需要走linux手脱，这里简单记录&lt;strong&gt;一个demo&lt;/strong&gt;和&lt;strong&gt;一个实例&lt;/strong&gt;的手脱例子&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/Airrc</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo g不生成任何文件的错误</title>
    <link href="https://airrcat.github.io/2024/08/28/hexo-g%E4%B8%8D%E7%94%9F%E6%88%90%E4%BB%BB%E4%BD%95%E6%96%87%E4%BB%B6%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://airrcat.github.io/2024/08/28/hexo-g%E4%B8%8D%E7%94%9F%E6%88%90%E4%BB%BB%E4%BD%95%E6%96%87%E4%BB%B6%E7%9A%84%E9%94%99%E8%AF%AF/</id>
    <published>2024-08-28T05:23:26.000Z</published>
    <updated>2024-08-28T05:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：<br>    <code>hexo g</code>不在public文件夹下生成任何文件，只生成了image、archive等几个空文件夹。<br>    <code>hexo g --debug</code>不生成任何错误信息，但是hexo generator 仅有几步处理<br>问题解决：<br>    更新node为实验版本v22后出现此问题，回退至LTS版本v20后问题解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题描述：&lt;br&gt;    &lt;code&gt;hexo g&lt;/code&gt;不在public文件夹下生成任何文件，只生成了image、archive等几个空文件夹。&lt;br&gt;    &lt;code&gt;hexo g --debug&lt;/code&gt;不生成任何错误信息，但是hexo generator</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>About hexo generate nothing in public folder</title>
    <link href="https://airrcat.github.io/2024/08/28/About-hexo-generate-nothing-in-public-folder/"/>
    <id>https://airrcat.github.io/2024/08/28/About-hexo-generate-nothing-in-public-folder/</id>
    <published>2024-08-28T05:14:44.000Z</published>
    <updated>2024-08-28T05:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>if you run <code>hexo g</code> and there nothing new in public folder, you can check the <strong>version of nodejs</strong>.</p><p>In my case, I first use hexo in nodejs version 20.16.0, it is a LTS version and hexo support it.</p><p>But when i update nodejs to 22.6.0(latest), command <code>hexo g</code> can not work ,it just leave some empty folder in public and no any error debug even i use <code>hexo g --debug</code></p><p>So if you has similar problem, you can switch you nodejs version to the LTS.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;if you run &lt;code&gt;hexo g&lt;/code&gt; and there nothing new in public folder, you can check the &lt;strong&gt;version of nodejs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In my</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发看板</title>
    <link href="https://airrcat.github.io/2024/08/12/%E5%BC%80%E5%8F%91%E7%9C%8B%E6%9D%BF/"/>
    <id>https://airrcat.github.io/2024/08/12/%E5%BC%80%E5%8F%91%E7%9C%8B%E6%9D%BF/</id>
    <published>2024-08-12T11:58:53.000Z</published>
    <updated>2024-10-29T09:40:20.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Tool-for-search-ip-and-domain-in-binary-stream"><a href="#1-Tool-for-search-ip-and-domain-in-binary-stream" class="headerlink" title="1. Tool for search ip and domain in binary stream"></a>1. Tool for search ip and domain in binary stream</h2><p><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：基本完成</p><p>基本完成，但是因为和关键词搜索撞了，还得重新做一下。<br><strong>todo</strong></p><ul><li><input disabled type="checkbox"> 做成pyd</li><li><input disabled type="checkbox"> 做成命令行工具</li><li><input disabled type="checkbox"> 拆分</li></ul><h2 id="2-Tool-for-search-keyword-in-file"><a href="#2-Tool-for-search-keyword-in-file" class="headerlink" title="2. Tool for search keyword in file"></a>2. Tool for search keyword in file</h2><p><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：初步</p><ol><li>完成任务实践</li><li>基本能读完csv</li><li>基本能读完excel</li><li>去重复</li></ol><ul><li><input disabled type="checkbox"> ppt读取</li><li><input disabled type="checkbox"> word读取</li><li><input disabled type="checkbox"> 统一输出流</li><li><input disabled type="checkbox"> 搜索效率优化</li><li><input disabled type="checkbox"> GUI</li><li><input disabled type="checkbox"> 交互优化</li><li><input disabled type="checkbox"> 结果优化</li></ul><h2 id="3-Tool-for-load-pe-file-and-parse-pe-info-in-unicorn2"><a href="#3-Tool-for-load-pe-file-and-parse-pe-info-in-unicorn2" class="headerlink" title="3. Tool for load pe file and parse pe info in unicorn2"></a>3. Tool for load pe file and parse pe info in unicorn2</h2><p><strong>MAIN TARGET</strong><br><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：初步<br>期待实现一个自动装载PE段、解析导入表、导入函数，能自动解析导入函数的功能，这样在做模拟执行时，我只需要考虑hook的功能。</p><ol><li>完成x86 PE解析</li><li>完成段加载</li></ol><ul><li><input disabled type="checkbox"> elf</li><li><input disabled type="checkbox"> 多架构</li><li><input disabled type="checkbox"> 段结构优化</li><li><input disabled type="checkbox"> 函数自动解析</li><li><input disabled type="checkbox"> 模板化</li></ul><h2 id="4-Tool-for-anti-obf-and-control-flow-flattening"><a href="#4-Tool-for-anti-obf-and-control-flow-flattening" class="headerlink" title="4. Tool for anti obf and control flow flattening"></a>4. Tool for anti obf and control flow flattening</h2><p><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：筹划<br>期待作为ida、binary ninja插件<br>unicorn、qiling trace指令并dump，把平坦化、混淆的指令线性化。</p><h2 id="5-Tool-for-anti-protect"><a href="#5-Tool-for-anti-protect" class="headerlink" title="5. Tool for anti protect"></a>5. Tool for anti protect</h2><p><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：筹划</p><p>trace 指令并log，寻找真实的执行流</p><h2 id="6-Tool-for-batch-decode-lua-in-android"><a href="#6-Tool-for-batch-decode-lua-in-android" class="headerlink" title="6. Tool for batch decode lua in android"></a>6. Tool for batch decode lua in android</h2><p><strong>编写语言</strong>: Python<br><strong>开发状态</strong>：完成初版<br><a href="https://github.com/Airrcat/luajava_decode">https://github.com/Airrcat/luajava_decode</a></p><p>解码安卓中庸libluajava.so解码的lua程序</p><ul><li><input disabled type="checkbox"> 更合适的交互</li><li><input disabled type="checkbox"> 反编译luac</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-Tool-for-search-ip-and-domain-in-binary-stream&quot;&gt;&lt;a href=&quot;#1-Tool-for-search-ip-and-domain-in-binary-stream&quot; class=&quot;headerlink&quot; tit</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo、github博客加入搜索引擎的方法简述</title>
    <link href="https://airrcat.github.io/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/"/>
    <id>https://airrcat.github.io/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/</id>
    <published>2024-07-17T07:39:09.000Z</published>
    <updated>2024-07-17T08:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>about:hexo、github.io<br>本篇考虑两个搜索引擎：bing、google。（百度引擎需要实名认证，因此撇弃）</p><h2 id="bing-Webmaster-Tool"><a href="#bing-Webmaster-Tool" class="headerlink" title="bing - Webmaster Tool"></a>bing - Webmaster Tool</h2><p>查看自家博客有没有加入搜索引擎：site:<a href="https://yourblog.github.io/">https://yourblog.github.io/</a><br>如有则能查看到类似如下：<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-10.png" alt="alt text"><br>如没有,则可搜索”bing 网站管理员工具”或进入网址：<a href="https://www.bing.com/webmasters/home">https://www.bing.com/webmasters/home</a><br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-11.png" alt="alt text"><br>这里我们如果先做好了谷歌的添加那可以直接同步，不过我的体验是bing的处理比谷歌快，所以我选了<strong>手动添加</strong><br>手动添加这一步其实是验证网址的所有权，所以bing会给你一个xml文件，你需要将这个文件放到网页web的根目录下，如：<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-12.png" alt="alt text"><br>ps：谷歌的手动添加同理。<br>完成添加之后，我们不急着post我们的博客，我们可以先添加一个站点文件sitemap.xml来帮助搜索引擎建立我们博客的索引。<br>在hexo目录下安装sitemap插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>在博客根目录（非主题）的_config.yml下添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><p>同时别忘记同文件的url项，如果该项没被正确配置，生成的sitemap也会出错。<br>example:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://airrcat.github.io</span></span><br></pre></td></tr></table></figure><h2 id="Google"><a href="#Google" class="headerlink" title="Google"></a>Google</h2><p>谷歌的搜索同上<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-13.png" alt="alt text"><br>可以直接跳转至谷歌搜索控制台（Google Search Console）<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-14.png" alt="alt text"><br>需要注意的是，如果我们hexo网页的url、sitemap配置不正确，有可能导致Google Search的编制索引一直：<br><strong>正在处理数据，请过 1 天左右再来查看</strong><br>此时可以考虑检查配置是否正确、提交反馈或删除资源重新添加等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;about:hexo、github.io&lt;br&gt;本篇考虑两个搜索引擎：bing、google。（百度引擎需要实名认证，因此撇弃）&lt;/p&gt;
&lt;h2 id=&quot;bing-Webmaster-Tool&quot;&gt;&lt;a href=&quot;#bing-Webmaster-Tool&quot; class=&quot;h</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blowfish例题 RCTF-DontEatMe</title>
    <link href="https://airrcat.github.io/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/"/>
    <id>https://airrcat.github.io/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/</id>
    <published>2024-07-15T08:03:42.000Z</published>
    <updated>2024-07-15T10:27:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本题的主要考点是Blowfish算法。附带反调试、迷宫<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-10.png" alt="alt text"><br>程序的开始阶段除了输入之外，还固定了一个随机数种子，并通过动态获取Ntdll地址的方式去调用ZwSetInformationThread来反调试。这里可以把该函数直接nop。而为了考虑栈平衡，需要计算有多少个push、call需要nop或者直接nop一片。<br>我将Ntdll相关的几个函数全nop后汇编头尾如下：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-11.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-12.png" alt="alt text"><br>之后程序开始获取随机数：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-13.png" alt="alt text"><br>需要注意的是：<br>    ①我动调扒取rand()、解码后的数组时，这个序列的最后是0xcd，而靠这个序列我解不出来最后的答案，最后是调试到最后，回头看了下这个全局数组发现最后一位不是0xcd，是0x20，将改为0x20后成功解出。这里可能有我手法的问题。<br>    ②原因未知，我使用ida 对上述的反调试nop后，在动调时被nop的代码还会出新的代码，此时可能需要重复patch。<br>获取完随机数序列后，该序列还会做一个简单的decode from ‘fishFISH’。之后进入sub_C41090函数,此为blowfish的box交换函数。<br>算法的分析有两点，第一点是寻找box特征：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-14.png" alt="alt text"><br>可在该函数开头看到：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-15.png" alt="alt text"><br>第二点是分析算法特征，需要有算法实现源码。最直接的对比是算法参数：循环长度、循环步长。需要分析的是算法结构：指令流（循环第一个指令、第二个指令、第三个指令分别是什么，是否匹配）、每个指令的输入、输出。初次分析可判断到是什么算法即可，当解不出来时考虑是否魔改，进而进一步分析算法细节。<br>①blowfish的pbox异或key，且异或长度为18，循环步长为+2<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-16.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-17.png" alt="alt text"><br>同理对比<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-18.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-19.png" alt="alt text"><br>BF_FN:<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-20.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-21.png" alt="alt text"><br>因此，基本确认这里是blowfish的初始化函数，通过key生成新的box，和输入无关。<br>接下来有几个重点：<br>①输入从str被vsscanf转为了hex如：’12’-&gt;b’\x12’<br>②在blowfish算法后有一个迷宫操作，迷宫的地图是通过计算生成的。<br>③一个小trick来了。<br>正常来说，我们默认题里的算法是做加密操作后进行密文匹配，而本题，输入的字符串转hex后，经过blowfish计算的结果要作为迷宫的前进方向，计算的结果是在’wasd’之内。<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-22.png" alt="alt text"><br>初始<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-23.png" alt="alt text"><br>最终check<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-24.png" alt="alt text"><br>也就是说，本题是：输入一串hex，经过blowfish处理变成wasd明文。<br>于是这里的blowfish处理就不能是加密的：明文-》hex密文，而得是解密的：hex密文-》明文。<br>那么我们这里就清晰了：迷宫的路径是明文，同时是blowfish解密的结果，而要获得最初输入，动调获取blowfish 的key并将明文加密即可。<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_maze</span>(<span class="params">maze: <span class="built_in">list</span>, weight: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze)):</span><br><span class="line">        <span class="keyword">if</span> i % weight == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(maze[i], end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机种子作key</span></span><br><span class="line">a = <span class="string">b&quot;\x90\xbbK\xee\xde\xfa\xf2\xcbh\xf8\x83\xd3\x96\xf8z\xc8\xd8\xfb\xc3\xd1V\xc5\xba\x8fh\xbc\x8b\x91\x9e\xba\xb2\x8b\x00&quot;</span></span><br><span class="line">a = <span class="built_in">list</span>(a)</span><br><span class="line">key = <span class="string">b&quot;DontEatM&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i] ^= key[i % <span class="built_in">len</span>(key)]</span><br><span class="line"></span><br><span class="line">maze = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    ptr = <span class="number">0xf</span></span><br><span class="line">    <span class="keyword">while</span> ptr &gt; -<span class="number">1</span>:</span><br><span class="line">        tmp = (((<span class="number">1</span> &lt;&lt; ptr) &amp; a[i]) &gt;&gt; ptr)</span><br><span class="line">        ptr -= <span class="number">1</span></span><br><span class="line">        maze.append(tmp)</span><br><span class="line">maze = [<span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>,</span><br><span class="line">        <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>]</span><br><span class="line">maze[<span class="number">0xa</span>*<span class="number">0x10</span>+<span class="number">5</span>] = <span class="string">&#x27;#&#x27;</span></span><br><span class="line">maze[<span class="number">0x4</span>*<span class="number">0x10</span>+<span class="number">9</span>] = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">print_maze(maze, <span class="number">0x10</span>)</span><br><span class="line"><span class="comment"># ddddwwwaaawwwddd</span></span><br><span class="line">key_array = <span class="built_in">list</span>(<span class="string">b&#x27;fishFISH&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key_array[1] = 0xf</span></span><br><span class="line"><span class="comment"># key_array[2] = (0x73 ^ key_array[1])</span></span><br><span class="line"><span class="comment"># key_array[3] = (0x68 ^ key_array[1])</span></span><br><span class="line"><span class="comment"># key_array[4] = key_array[2] ^ key_array[4]</span></span><br><span class="line">key_array = [<span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>, <span class="number">0x35</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0xCD</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">blowfish</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">self, code, key</span>):</span><br><span class="line">        key = key</span><br><span class="line">        l = <span class="built_in">len</span>(code)</span><br><span class="line">        <span class="keyword">if</span> l % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># Blowfish底层决定了字符串长度必须8的整数倍，所补位空格也可以根据自己需要补位其他字符</span></span><br><span class="line">            code = code + <span class="string">b&#x27; &#x27;</span> * (<span class="number">8</span> - (l % <span class="number">8</span>))</span><br><span class="line">        code = code</span><br><span class="line">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class="line">        encode = cl.encrypt(code)</span><br><span class="line">        <span class="comment"># hex_encode = codecs.encode(encode, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class="line">        <span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">self, string, key</span>):</span><br><span class="line">        key = key</span><br><span class="line">        string = string</span><br><span class="line">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class="line">        <span class="comment"># codecs.decode(string, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class="line">        ciphertext = string</span><br><span class="line">        code = cl.decrypt(ciphertext)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s&quot;</span> % (code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># encode = b&#x27;8749C71106E48B51&#x27;</span></span><br><span class="line">    code = <span class="string">b&#x27;ddddwwwaaawwwddd&#x27;</span></span><br><span class="line">    key_array = [<span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>, <span class="number">0x35</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0x20</span>]</span><br><span class="line">    key = <span class="built_in">bytes</span>(key_array)</span><br><span class="line">    gw = blowfish()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;明文密码：%s，经过key：%s加密之后的加密密码是：%s&quot;</span> % (code, key, gw.Encrypt(code, key)))</span><br><span class="line">    encode = gw.Encrypt(code, key)</span><br><span class="line">    <span class="built_in">print</span>(encode.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密密码：%s，经过key：%s解密之后的明文密码是：%s&quot;</span> %</span><br><span class="line">          (encode, key, gw.Decrypt(encode, key)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本题的主要考点是Blowfish算法。附带反调试、迷宫&lt;br&gt;&lt;img src=&quot;/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-10.png&quot; alt=&quot;alt text&quot;&gt;&lt;br&gt;程序的开始阶段除了</summary>
      
    
    
    
    
    <category term="Reverse" scheme="https://airrcat.github.io/tags/Reverse/"/>
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
    <category term="Blowfish" scheme="https://airrcat.github.io/tags/Blowfish/"/>
    
    <category term="Maze" scheme="https://airrcat.github.io/tags/Maze/"/>
    
  </entry>
  
  <entry>
    <title>Short solution about unicorn error: Could not allocate dynamic translator buffer</title>
    <link href="https://airrcat.github.io/2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/"/>
    <id>https://airrcat.github.io/2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/</id>
    <published>2024-06-18T07:40:23.000Z</published>
    <updated>2024-06-18T08:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>this error occured when i try to emu 1000+ elf file and about 100 times.<br>sample from <a href="https://buuoj.cn/challenges#[CFI-CTF%202018]Automated%20Reversing">CFI-CTF 2018 Automated Reversing</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span>  gc</span><br><span class="line"><span class="keyword">del</span> uc</span><br><span class="line">gc.collect()</span><br></pre></td></tr></table></figure><p>After read this <a href="https://github.com/unicorn-engine/unicorn/issues/508">issue</a>, I confirm that this error is about the bad resource release. So I try to call gc.collect() to solve it.</p><p><a href="https://github.com/Airrcat/unicorn_loader">pe_loader</a><br>total code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pe_loader.pe_loader <span class="keyword">import</span>  *</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> capstone <span class="keyword">as</span> cs</span><br><span class="line">check = <span class="number">0</span></span><br><span class="line">boom = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trace</span>(<span class="params">mu: Uc, address, size, data</span>):</span><br><span class="line">    <span class="keyword">global</span> check</span><br><span class="line">    <span class="keyword">global</span> boom</span><br><span class="line">    EIP = mu.reg_read(unicorn.x86_const.UC_X86_REG_EIP)</span><br><span class="line">    <span class="keyword">if</span> EIP == <span class="number">0x19</span>:</span><br><span class="line">        mu.reg_write(unicorn.x86_const.UC_X86_REG_DL,boom)</span><br><span class="line">    <span class="keyword">if</span> EIP == <span class="number">0x1f</span>:</span><br><span class="line">        <span class="keyword">if</span> mu.reg_read(unicorn.x86_const.UC_X86_REG_FLAGS)&amp;(<span class="number">2</span>**<span class="number">6</span>)==(<span class="number">2</span>**<span class="number">6</span>):</span><br><span class="line">                check = <span class="number">1</span></span><br><span class="line">                mu.emu_stop()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> EIP &gt; <span class="number">0x30</span>:</span><br><span class="line">        mu.emu_stop()</span><br><span class="line">anwsers = [<span class="number">0</span>]*<span class="number">1010</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> suffix <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1009</span>):</span><br><span class="line">    path = <span class="string">&quot;attachment/binaries/&quot;</span></span><br><span class="line">    prefix = <span class="string">&quot;binary&quot;</span></span><br><span class="line">    <span class="keyword">if</span> suffix == <span class="number">993</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    loader = pe_loader(path + prefix+ <span class="built_in">str</span>(suffix),UC_MODE_32)</span><br><span class="line">    vaddr = <span class="number">0</span></span><br><span class="line">    vsize = <span class="number">0xdf</span> - <span class="number">0xb0</span></span><br><span class="line">    raddr = <span class="number">0xb0</span></span><br><span class="line">    rsize = <span class="number">0xdf</span> - <span class="number">0xb0</span></span><br><span class="line">    content = loader.image[raddr:raddr + rsize]</span><br><span class="line"></span><br><span class="line">    CODE = content</span><br><span class="line">    BASE_ADDR = vaddr</span><br><span class="line">    CODE_LEN = vsize</span><br><span class="line"></span><br><span class="line">    uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class="line">    <span class="comment"># 整体内存空间的初始化</span></span><br><span class="line">    uc.mem_map(BASE_ADDR,<span class="number">32</span>*<span class="number">1024</span>)</span><br><span class="line">    uc.mem_write(BASE_ADDR,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">32</span>*<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 栈空间初始化，因为内存刚刚整体写了，这里其实可以不用。</span></span><br><span class="line">    STACK = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">1024</span></span><br><span class="line">    STACK_POINT = <span class="number">30</span> * <span class="number">1024</span></span><br><span class="line">    <span class="comment"># 栈初始化</span></span><br><span class="line">    uc.reg_write(unicorn.x86_const.UC_X86_REG_SP,STACK_POINT)</span><br><span class="line">    </span><br><span class="line">    uc.mem_write(BASE_ADDR,CODE)</span><br><span class="line">    uc.hook_add(UC_HOOK_CODE, trace)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0xff</span>):</span><br><span class="line">        <span class="keyword">if</span> check == <span class="number">1</span>:</span><br><span class="line">            anwsers[count] = boom</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            check = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            boom = i</span><br><span class="line">            uc.emu_start(BASE_ADDR, rsize)</span><br><span class="line">        <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ERROR &quot;</span>, e)</span><br><span class="line">    uc.mem_unmap(BASE_ADDR,<span class="number">32</span>*<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">import</span> gc</span><br><span class="line">    <span class="keyword">del</span> uc</span><br><span class="line">    gc.collect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;attachment/binaries/anwser.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(anwsers))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;this error occured when i try to emu 1000+ elf file and about 100 times.&lt;br&gt;sample from &lt;a href=&quot;https://buuoj.cn/challenges#[CFI-CTF%202</summary>
      
    
    
    
    
    <category term="unicorn" scheme="https://airrcat.github.io/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>Adjustment about unresolved stack usage in binary ninja</title>
    <link href="https://airrcat.github.io/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/"/>
    <id>https://airrcat.github.io/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/</id>
    <published>2024-06-17T02:03:34.000Z</published>
    <updated>2024-07-16T02:02:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a short article about the error <strong>“This function has unresolved stack usage.View graph of stack usage to resolve”</strong> in binary ninja and the function <strong>“Set Stack Adjustment”</strong>.</p><p>Acctually, this error has the similar solve way as IDA.<br>First, you should <strong>step in the “Graph of stack usage”</strong> as the image note:<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-10.png" alt="alt text"><br>In this Graph, you should care about the “Green Block” and <strong>“Bule Block”</strong>. Green means it is fine. and Blue, as the first sentence of blue block, is the <strong>error stack</strong>.<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-11.png" alt="alt text"><br>And, by <strong>right click</strong> in the first call of blue block, click the <strong>“Set Stack Adjustment”</strong> you can input <strong>number</strong> to adjust stack analyze in this call:<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-12.png" alt="alt text"><br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-13.png" alt="alt text"><br>But soon, a confused thing : why this error not solved? And <strong>graph not changed</strong>.<br>In fact, the reason is: this <strong>“Graph of stack usage” is a static graph</strong>. It will not update with our adjust just in time. So, you can re-step in this graph again to check your adjustment if it works.<br>In this case, I adjust two call’s stack usage, and set adjustment by 1<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-14.png" alt="alt text"><br>by 0<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-15.png" alt="alt text"><br>and solved.<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-16.png" alt="alt text"></p><p><a href="https://buuoj.cn/challenges#[RCTF2019]DontEatMe">example: RCTF2019-DontEatMe-main</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a short article about the error &lt;strong&gt;“This function has unresolved stack usage.View graph of stack usage to resolve”&lt;/strong&gt; </summary>
      
    
    
    
    
    <category term="Reverse" scheme="https://airrcat.github.io/tags/Reverse/"/>
    
    <category term="binary-ninja" scheme="https://airrcat.github.io/tags/binary-ninja/"/>
    
  </entry>
  
  <entry>
    <title>Cpython and Cpython hook -1</title>
    <link href="https://airrcat.github.io/2024/05/30/Cpython-and-Cpython-hook-1/"/>
    <id>https://airrcat.github.io/2024/05/30/Cpython-and-Cpython-hook-1/</id>
    <published>2024-05-30T09:16:26.000Z</published>
    <updated>2024-05-31T02:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>test.pyx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br></pre></td></tr></table></figure><p>setup.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    ext_modules=cythonize(<span class="string">&quot;./test.pyx&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>编译指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><p>这里–inplace可不要。添加该选项可让编译的库输出到工作目录下<br>test_import.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(test))</span><br><span class="line"></span><br><span class="line">a = test.a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_a</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook a&quot;</span>)</span><br><span class="line">    a(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test.a = hook_a</span><br><span class="line">test.a(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;__test__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">hook a</span><br><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test.pyx&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa</summary>
      
    
    
    
    
    <category term="Python" scheme="https://airrcat.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>XPATH报错注入小记</title>
    <link href="https://airrcat.github.io/2024/05/16/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"/>
    <id>https://airrcat.github.io/2024/05/16/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/</id>
    <published>2024-05-16T07:08:09.000Z</published>
    <updated>2024-05-16T07:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简述："><a href="#简述：" class="headerlink" title="简述："></a>简述：</h2><p>报错注入的危害主要是查询数据方面，它自己很难做一些如提权之类的动作。</p><p>报错注入主要涉及：extractvalue()、updatexml()等。这些函数的功能和注入结果类似，但使用的参数会略有不同。</p><p>本文讨论到的报错注入主要是“xml”的报错注入，先讨论<strong>注入点</strong></p><p>简单的来说，在数据库中，一些操作xml文件的函数会遵循一种叫“XPATH”的格式规范。这个规范会比较严格，限制了一些字符。而当数据库查询语句试图调用上面提到的函数时，若给出的查询语句——也就是查询的目标XPATH就会触发“报错”</p><p>这里可以发现，触发报错是很容易的，但有报错不一定有注入。安全的查询在报错时只会返回用户所查询的语句，而若存在暴露，数据库会解析extractvalue里存在的一些查询语句并返回，导致攻击者可以通过报错注入去爬取数据库的数据。</p><h2 id="payload案例："><a href="#payload案例：" class="headerlink" title="payload案例："></a>payload案例：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xxx.xxx.xxx/xxx/xxx/api/xxx/xxx?xxx=xxx%27%20AND%20EXTRACTVALUE(1,concat(0x7e,database(),0x7e))--%20xxxx</span><br></pre></td></tr></table></figure><p><img src="/2024/05/16/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/image-7.png" alt="alt text"></p><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>报错注入形式简单，判断简单，是一个可以模板化测试的漏洞（sqlmap）<br>而若有蓝队研判需求，主要关注报错注入的返回包是否<strong>没有返回查询语句</strong>而是返回其它一些有的没的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;简述：&quot;&gt;&lt;a href=&quot;#简述：&quot; class=&quot;headerlink&quot; title=&quot;简述：&quot;&gt;&lt;/a&gt;简述：&lt;/h2&gt;&lt;p&gt;报错注入的危害主要是查询数据方面，它自己很难做一些如提权之类的动作。&lt;/p&gt;
&lt;p&gt;报错注入主要涉及：extractvalue()、</summary>
      
    
    
    
    
    <category term="流量分析" scheme="https://airrcat.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    <category term="Web" scheme="https://airrcat.github.io/tags/Web/"/>
    
    <category term="安全监控" scheme="https://airrcat.github.io/tags/%E5%AE%89%E5%85%A8%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>ctf做题记录-svm</title>
    <link href="https://airrcat.github.io/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/"/>
    <id>https://airrcat.github.io/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/</id>
    <published>2024-04-30T07:38:52.000Z</published>
    <updated>2024-05-21T00:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="待补完"><a href="#待补完" class="headerlink" title="待补完"></a>待补完</h1><p><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image.png" alt="alt text"><br>导入表为空，纯静态编译<br>经检查初始化和推出程序均空<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-1.png" alt="alt text"><br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-2.png" alt="alt text"><br>程序执行会有 input 字符串，这是线索（这里用 ida 远程启动，会有其它信息<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-3.png" alt="alt text"><br>input 直接在 string 中搜到，有如下交叉引用：<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-4.png" alt="alt text"><br>直接下断点动调，发现 1780 是 main 函数，会 printf(input)<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-5.png" alt="alt text"><br>init 函数做了一个初始化：<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-6.png" alt="alt text"><br>sub_402000 是一个大虚拟机，不多赘述。<br>那么按照虚拟机的思路对函数重新命名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_401780</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 vm_mem[<span class="number">5</span>]; <span class="comment">// [rsp+0h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 vars28; <span class="comment">// [rsp+28h] [rbp+28h]</span></span><br><span class="line"></span><br><span class="line">  vars28 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">  <span class="built_in">init</span>(vm_mem, &amp;mem_src, <span class="number">4096LL</span>, <span class="number">2677LL</span>);</span><br><span class="line">  <span class="built_in">vm</span>(vm_mem);</span><br><span class="line">  <span class="built_in">may_printf</span>(vm_mem[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">may_printf</span>(vm_mem[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != vars28 )</span><br><span class="line">    <span class="built_in">sub_44C7D0</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对虚拟机init的一些初始判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall init(struct_vm *vm, __int64 a2, <span class="built_in">int</span> mem_size, <span class="built_in">int</span> code_size)</span><br><span class="line">&#123;</span><br><span class="line">  __m128i *mem; // rax</span><br><span class="line">  __int64 code_seg; // rax</span><br><span class="line">  __int64 result; // rax</span><br><span class="line"></span><br><span class="line">  mem = (__m128i *)malloc(4LL * mem_size);</span><br><span class="line">  vm-&gt;mem_size = mem_size;</span><br><span class="line">  vm-&gt;mem = mem;</span><br><span class="line">  memset(mem, <span class="number">0</span>, <span class="number">4</span> * mem_size);</span><br><span class="line">  code_seg = malloc(4LL * code_size);</span><br><span class="line">  vm-&gt;code_szie = code_size;</span><br><span class="line">  vm-&gt;code_seg = code_seg;</span><br><span class="line">  result = sub_401060();</span><br><span class="line">  vm-&gt;ip_point = <span class="number">0</span>;</span><br><span class="line">  vm-&gt;stack = -1LL;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前这一步，我们可以确定的分析不多，但有一点———该虚拟机似乎缺少了对寄存器的初始化，只进行了两个内存空间——很可能是代码和栈空间的初始化；接下来我们会印证这个想法。<br>该虚拟机的指令相当多，这里简单对内存空间进行扫描，取出大概率实际用到的指令<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-7.png" alt="alt text"><br>举例分析几个指令：<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-8.png" alt="alt text"><br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-9.png" alt="alt text"><br>注意，我这里用的“弹”是偏主观的理解，按实际的来说，这里并没有专门的寄存器来接收“弹”出的栈顶变量，而是在语句中临时赋值。而后栈顶指针会往下移动，符合“弹”的感觉（x</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;待补完&quot;&gt;&lt;a href=&quot;#待补完&quot; class=&quot;headerlink&quot; title=&quot;待补完&quot;&gt;&lt;/a&gt;待补完&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>some frida scripts</title>
    <link href="https://airrcat.github.io/2024/04/30/some-frida-scripts/"/>
    <id>https://airrcat.github.io/2024/04/30/some-frida-scripts/</id>
    <published>2024-04-30T02:44:22.000Z</published>
    <updated>2024-04-30T03:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>frida script</th><th>status</th></tr></thead><tbody><tr><td>hook java Android Api</td><td>√</td></tr><tr><td>hook new StringBuilder</td><td>√</td></tr><tr><td>modify func retVal</td><td>√</td></tr><tr><td>traceback</td><td>√</td></tr><tr><td>hook native func</td><td>√</td></tr><tr><td>hook win dll</td><td>√</td></tr></tbody></table><!-- toc --><ul><li><a href="#hook-java-android-api">hook java android api</a></li><li><a href="#hook-new-srtingbuilder">hook new SrtingBuilder</a></li><li><a href="#modify-func-retval">modify func retVal</a></li><li><a href="#traceback">traceback</a></li><li><a href="#hook-native-func">hook native func</a></li><li><a href="#hook-win-dll">hook win dll</a></li></ul><!-- tocstop --><h2 id="hook-java-android-api"><a href="#hook-java-android-api" class="headerlink" title="hook java android api"></a>hook java android api</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frida -U -f com.example.frida_java_anti_frida -l .\hook_java_android_api.js</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AppCompatActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(</span><br><span class="line"><span class="string">&quot;androidx.appcompat.app.AppCompatActivity&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> setSupportActionBar = <span class="title class_">AppCompatActivity</span>.<span class="property">setSupportActionBar</span>;</span><br><span class="line">setSupportActionBar.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> retVal = <span class="variable language_">this</span>.<span class="title function_">setSupportActionBar</span>(arg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="hook-new-SrtingBuilder"><a href="#hook-new-SrtingBuilder" class="headerlink" title="hook new SrtingBuilder"></a>hook new SrtingBuilder</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查java runtime可用性</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java available&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boot java perform function&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(</span><br><span class="line"><span class="string">&quot;com.example.frida_java_test_3.MainActivity&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load class&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.StringBuilder&quot;</span>).<span class="property">$init</span>.<span class="title function_">overload</span>(</span><br><span class="line"><span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="comment">// init？new?</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StringBuilder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.StringBuilder&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arg = args;</span><br><span class="line"><span class="keyword">var</span> result = <span class="variable language_">this</span>.$new(args);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the StringBuilder arg :&quot;</span>, arg);</span><br><span class="line"><span class="keyword">if</span> (arg == <span class="string">&quot;hack me&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check magic str!&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hack it!&quot;</span>);</span><br><span class="line">result = <span class="variable language_">this</span>.$new(<span class="string">&quot;hacked!&quot;</span>);</span><br><span class="line">args = result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>, result);</span><br><span class="line">result = <span class="variable language_">this</span>.$init(args);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// var a</span></span><br><span class="line"><span class="comment">//return a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MainActivity</span>.<span class="property">getOne</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> retVal = <span class="variable language_">this</span>.<span class="title function_">getOne</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(retVal);</span><br><span class="line"><span class="keyword">return</span> retVal.<span class="title function_">toString</span>();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="modify-func-retVal"><a href="#modify-func-retVal" class="headerlink" title="modify func retVal"></a>modify func retVal</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查java runtime可用性</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java available&quot;</span>);</span><br><span class="line"><span class="comment">// **app&#x27;s class loader？</span></span><br><span class="line"><span class="comment">// **Ensures that the current thread is attached to the VM and calls fn. (This isn&#x27;t necessary in callbacks from Java.)？</span></span><br><span class="line"><span class="comment">// 如果无需等待class loader的初始化，则调用performNow</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boot java perform function&quot;</span>);</span><br><span class="line"><span class="comment">// 获取MainActivity类</span></span><br><span class="line"><span class="comment">// 可以获取其它类的实例</span></span><br><span class="line"><span class="comment">// Uses the app&#x27;s class loader, but you may access classes on other loaders by calling Java.ClassFactory.get()</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(</span><br><span class="line"><span class="string">&quot;com.example.frida_java_test_1.MainActivity&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 获取MainActivity的getOne实例（实际上是一个函数）</span></span><br><span class="line"><span class="keyword">var</span> getOne = <span class="title class_">MainActivity</span>.<span class="property">getOne</span>;</span><br><span class="line"><span class="comment">// 重写实现</span></span><br><span class="line"></span><br><span class="line">getOne.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 先正常地走原函数的逻辑并获取返回值.</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getOne</span>();</span><br><span class="line"><span class="comment">// 打印返回值并篡改。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Get return value&quot;</span>, <span class="string">&quot;,value =&gt;&quot;</span>, result);</span><br><span class="line">result = <span class="string">&quot;Hacked!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It will be hooked to &quot;</span>, result);</span><br><span class="line"><span class="comment">// 返回我们所篡改的返回值</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="traceback"><a href="#traceback" class="headerlink" title="traceback"></a>traceback</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印onCreate时的调用堆栈</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> classname = <span class="string">&quot;com.example.&quot;</span> + <span class="string">&quot;antifrida&quot;</span> + <span class="string">&quot;.MainActivity&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> onCreate = <span class="title class_">Java</span>.<span class="title function_">use</span>(classname).<span class="property">onCreate</span>;</span><br><span class="line">onCreate.<span class="title function_">overload</span>(<span class="string">&quot;android.os.Bundle&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">args</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">onCreate</span>(args);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hook-native-func"><a href="#hook-native-func" class="headerlink" title="hook native func"></a>hook native func</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="comment">// Interceptor.attach第一参为hook的函数地址，第二参为导出函数</span></span><br><span class="line"><span class="comment">// Module.findExportByName通过函数导出的名字获得该函数地址，常与Interceptor打配合</span></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(</span><br><span class="line"><span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(</span><br><span class="line"><span class="string">&quot;libanti_frida.so&quot;</span>,</span><br><span class="line"><span class="string">&quot;Java_com_example_antifrida_MainActivity_HelloWorld&quot;</span></span><br><span class="line">),</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Interceptor.attach的callback应该是只走onEnter和onLeave这两个函数，且入参固定为</span></span><br><span class="line"><span class="comment">// 其参数分别为入参和返回值</span></span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enter native HelloWorld ——&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retVal</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Leave native HelloWorld ——&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retVal : &quot;</span>, retVal);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;try to modify it to : &quot;</span>, <span class="string">&quot;hacked!&quot;</span>);</span><br><span class="line"><span class="comment">// 制作jni规范的string串，mark</span></span><br><span class="line"><span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(); <span class="comment">//获取env对象，即第一个参数</span></span><br><span class="line"><span class="keyword">var</span> jstrings = env.<span class="title function_">newStringUtf</span>(<span class="string">&quot;hacked!&quot;</span>); <span class="comment">//返回的是字符串指针，构造一个newStringUtf对象用来代替这个指针</span></span><br><span class="line">retVal.<span class="title function_">replace</span>(jstrings); <span class="comment">//替换返回值</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// hook其它导出函数，可隐去。</span></span><br><span class="line"><span class="keyword">var</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libanti_frida.so&quot;</span>, <span class="string">&quot;hello_world&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello_world addr : &quot;</span>, addr);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr, &#123;</span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enter native hello_world ——&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retVal</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Leave native hello_world ——&quot;</span>);</span><br><span class="line"><span class="comment">// 返回的是字符串地址，用readUtf8String解释地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retVal : &quot;</span>, retVal.<span class="title function_">readUtf8String</span>());</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// // 通过地址直接计算并hook</span></span><br><span class="line"><span class="keyword">var</span> str_name_so = <span class="string">&quot;libanti_frida.so&quot;</span>; <span class="comment">//需要hook的so名</span></span><br><span class="line"><span class="keyword">var</span> n_addr_func_offset = <span class="number">0x00001970</span>; <span class="comment">//需要hook的函数的偏移</span></span><br><span class="line"><span class="keyword">var</span> n_addr_so = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(str_name_so); <span class="comment">//加载到内存后 函数地址 = so地址 + 函数偏移</span></span><br><span class="line"><span class="keyword">var</span> n_addr_func = <span class="built_in">parseInt</span>(n_addr_so, <span class="number">16</span>) + n_addr_func_offset;</span><br><span class="line"><span class="comment">// 应该是使用规范</span></span><br><span class="line"><span class="keyword">var</span> ptr_func = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(n_addr_func);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello_world addr : &quot;</span>, ptr_func);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(ptr_func, &#123;</span><br><span class="line"><span class="comment">//onEnter: 进入该函数前要执行的代码，其中args是传入的参数，一般so层函数第一个参数都是JniEnv，第二个参数是jclass，从第三个参数开始是我们java层传入的参数</span></span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address hook start&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line"><span class="comment">//onLeave: 该函数执行结束要执行的代码，其中retval参数即是返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;return&quot;</span>); <span class="comment">//返回值</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boot err&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="hook-win-dll"><a href="#hook-win-dll" class="headerlink" title="hook win dll"></a>hook win dll</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find dll address</span></span><br><span class="line"><span class="keyword">const</span> baseAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;mydll.dll&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] mydll.dll baseAddr:&quot;</span> + baseAddr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encode = <span class="title function_">resolveAddress</span>(<span class="string">&quot;0x180011082&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line"><span class="string">&quot;[+] Module found encode addr: &quot;</span> +</span><br><span class="line"><span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;mydll.dll&quot;</span>, <span class="string">&quot;encode&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(encode, &#123;</span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Called encode: &quot;</span> + <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rip</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] a: &quot;</span> + args[<span class="number">0</span>].<span class="title function_">readAnsiString</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] key: &quot;</span> + args[<span class="number">1</span>]); <span class="comment">// Plaintext// Length of data to en/decrypt</span></span><br><span class="line"><span class="comment">//dumpAddr(&quot;Input&quot;, args[0], args[1].toInt32());</span></span><br><span class="line"><span class="comment">//this.outptr = args[2]; // Store arg2 and arg3 in order to see when we leave the function</span></span><br><span class="line"><span class="comment">//this.outsize = args[3].toInt32();</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retVal</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Returned from func encode: &quot;</span> + <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rip</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAddress</span>(<span class="params">addr</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> base = <span class="title function_">ptr</span>(<span class="string">&quot;0x180000000&quot;</span>); <span class="comment">//ter the base address of jvm.dll as seen in your favorite disassembler</span></span><br><span class="line"><span class="keyword">const</span> offset = <span class="title function_">ptr</span>(addr).<span class="title function_">sub</span>(base); <span class="comment">//Calculate offset in memory from base address in disassembler database</span></span><br><span class="line"><span class="keyword">const</span> result = baseAddr.<span class="title function_">add</span>(offset); <span class="comment">//Add current memory base address to offset of function to monitor</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] New addr=&quot;</span> + result); <span class="comment">// Write location of function in memory to console</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dumpAddr</span>(<span class="params">info, addr, size</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (addr.<span class="title function_">isNull</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Data dump &quot;</span> + info + <span class="string">&quot; :&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> buf = addr.<span class="title function_">readByteArray</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line"><span class="title function_">hexdump</span>(buf, &#123; <span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">length</span>: size, <span class="attr">header</span>: <span class="literal">true</span>, <span class="attr">ansi</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;frida script&lt;/th&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;hook java Android Api&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Android" scheme="https://airrcat.github.io/tags/Android/"/>
    
    <category term="Frida" scheme="https://airrcat.github.io/tags/Frida/"/>
    
  </entry>
  
  <entry>
    <title>hash拓展攻击与例题hash_append</title>
    <link href="https://airrcat.github.io/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/"/>
    <id>https://airrcat.github.io/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/</id>
    <published>2024-04-29T08:28:58.000Z</published>
    <updated>2024-04-30T01:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>hash 长度拓展攻击是一个效果还挺“惊人”的攻击。简单的来说，他能在只知道“一部分”密文的情况下，获得和“完整”密文相同的 hash 结果。只要满足条件，这个攻击现在对 MD5、SHA1、SHA256、SHA512 和 SM3 都能生效。</p><p>这个攻击的原理是目前这些主流哈希计算的一个薄弱点。这些哈希计算是基于对明文的分组。比如 64 个字节为一组，不满 64 的倍数则 padding 为 64 位。<br>对于每一组的明文来说，它需要与一组“向量”混合加密、输出为一个 hash。而如果不止一组明文，每组明文的 hash 会作为下一组的“向量”，这里的向量可理解为会变的加密密钥。</p><p>于是，在分组加密的情况下，实际上是：<br>① 每组独立做明文+向量混合运算<br>② 向量由上一组的运算结果决定（等于）<br>这里要留意这个“独立”。因为这实际上隐含了一个意思：<br>假设有一个八个分组的明文，我们不需要知道前七组的明文，只需要知道最后一组——以及第七组（前七组）的运算结果，就能算出这第八组——也就是整个明文的哈希结果。</p><p>更进一步的，把前七组的明文看作 flag，第八组的明文看作独立 padding、append 拓展数据、salt 盐，那么这就是长度<strong>拓展</strong>攻击了。</p><p>以 MD5 为例子：<img src="/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/%E5%8F%82%E8%80%83.png"></p><p>放到例题中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3, func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MySecretInfo = os.urandom(<span class="number">64</span>) <span class="comment"># 有密文</span></span><br><span class="line"></span><br><span class="line">HashValue = sm3.sm3_hash(func.bytes_to_list(MySecretInfo))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MySecretInfo Hash:&#x27;</span>, HashValue) <span class="comment"># 有密文hash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AppendData = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;Input AppendData: &#x27;</span>)) <span class="comment"># salt、append数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(AppendData) == <span class="number">64</span></span><br><span class="line"></span><br><span class="line">NewSecretInfo = MySecretInfo + AppendData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GeneratedHash = <span class="built_in">input</span>(<span class="string">&#x27;Input NewSecretInfo Hash: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">NewHashValue = sm3.sm3_hash(func.bytes_to_list(NewSecretInfo))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(NewHashValue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> GeneratedHash == NewHashValue:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Nope&#x27;</span>)</span><br></pre></td></tr></table></figure><p>sm3 的分组标准是 64 位一组，因此 secret 和 appendData 是分别两组，基本要求满足。<br>知晓 secret 的 hash，appendData 自己构造，这就很清晰了。<br>但落到实现上：①gmssl 库会默认在加密时做一个 64 位的 padding② 我们如何将 secret 的 hash 构造成加密的向量？<br>② 可以翻阅库实现解决：<br>首先是 padding 部分：<br><img src="/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image.png" alt="alt text"><br>而后是向量 Vector<br><img src="/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image-1.png" alt="alt text"><br>这里我们只需要为这个函数添加一个新的参数，作为 V[0]的初始值即可（同时记得 group_count -1）<br>参考攻击实现：<br><a href="https://github.com/hjzin/SM3LengthExtensionAttack">https://github.com/hjzin/SM3LengthExtensionAttack</a><br>而对于 ①，这里很有趣<br>我们之前的实现逻辑是：<br>知道 Hash(Secret)，知道 append，可知 Hash(Secret+append)<br>而默认 padding 时：Hash(Secret+padding)，知道 append，可知 Hash(Secret+append+padding)<br>发现了么？这两次 hash 的值似乎对不上。</p><p>但这里，我要说拓展攻击，是一个很“模板”的攻击。这里不要被 append 这个名词所束缚。它能是 append，它能是 salt，甚至它也能是“padding”——是第一次 hash 的“padding”。<br>阅读 padding 部分的代码可知这个 padding 是很朴素的一个 padding，有变化，但变化不多。明文为一组时 padding 固定是：<br>b’\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00’<br>明文为两组时 padding 固定是：<br>b’\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00’<br>仅仅在末尾会有一些改变。<br>那么我们可以把用第一次 padding 的值去 append，这样就有：<br>Hash(Secret+padding1)，知道 append，可知 Hash(Secret+padding1+padding2)<br>bingo~攻击完成 √<br>参考 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Time：2019/10/12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Author: hhzjj</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Description：SM3长度扩展攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1.随机生成一个secret，算出secret的hash值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2.根据hash值推出第一次压缩之后各个寄存器里的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    3.在secret+padding之后附加一段消息，用上一步寄存器里的值作为IV去加密附加的那段消息，得到hash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    4.用sm3去加密secret+padding+m&#x27;，得到hash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    5.第3步和第4步得到的hash值应该相等</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3, func</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> my_sm3</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secret = <span class="string">&quot;3131313131313131313131313131313131313131313131313131313131313131&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = func.bytes_to_list(<span class="built_in">bytes</span>(secret, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">secret_hash = <span class="string">&quot;f6dd54733108fa21bb08102f367787ed9ac388b8bc8311a1e999d5b5d09ba0a6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(secret_hash)</span><br><span class="line"></span><br><span class="line">secret_len = <span class="built_in">len</span>(secret)</span><br><span class="line"></span><br><span class="line">append_m = <span class="string">b&#x27;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">pad_str = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">pad = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_sm3.sm3_hash2(func.bytes_to_list(secret.encode()+append_m)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_guess_hash</span>(<span class="params">old_hash, secret_len, append_m</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 攻击关键在于重设vector</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    SM3长度扩展攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param old_hash: secret的hash值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param secret_len: secret的长度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param append_m: 附加的消息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: hash(secret + padding + append_m)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    vectors = []</span><br><span class="line"></span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将old_hash分组，每组8个字节, 并转换为整数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(old_hash), <span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">        vectors.append(<span class="built_in">int</span>(old_hash[r:r + <span class="number">8</span>], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 伪造消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> secret_len &gt; <span class="number">64</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">int</span>(secret_len / <span class="number">64</span>) * <span class="number">64</span>):</span><br><span class="line"></span><br><span class="line">            message += <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, secret_len):</span><br><span class="line"></span><br><span class="line">        message += <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    message = func.bytes_to_list(<span class="built_in">bytes</span>(message, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># message = padding(message)</span></span><br><span class="line"></span><br><span class="line">    message.extend(func.bytes_to_list(</span><br><span class="line"></span><br><span class="line">        append_m))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;meesage len&quot;</span>, <span class="built_in">len</span>(message))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> my_sm3.sm3_hash(message, vectors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">guess_hash = generate_guess_hash(secret_hash, secret_len, append_m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(guess_hash)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hash 长度拓展攻击是一个效果还挺“惊人”的攻击。简单的来说，他能在只知道“一部分”密文的情况下，获得和“完整”密文相同的 hash 结果。只要满足条件，这个攻击现在对 MD5、SHA1、SHA256、SHA512 和 SM3 都能生效。&lt;/p&gt;
&lt;p&gt;这个攻击的原理是目</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
    <category term="Crypto" scheme="https://airrcat.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>xyctf2023-re-writeup</title>
    <link href="https://airrcat.github.io/2024/04/28/xyctf2023-re-writeup/"/>
    <id>https://airrcat.github.io/2024/04/28/xyctf2023-re-writeup/</id>
    <published>2024-04-28T14:33:07.000Z</published>
    <updated>2024-04-29T01:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>感觉第一周最好玩，没了。</p><h2 id="聪明的信使"><a href="#聪明的信使" class="headerlink" title="聪明的信使"></a>聪明的信使</h2><p>九位凯撒。<br>flag{Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!}</p><h2 id="给阿姨倒一杯卡布奇诺"><a href="#给阿姨倒一杯卡布奇诺" class="headerlink" title="给阿姨倒一杯卡布奇诺"></a>给阿姨倒一杯卡布奇诺</h2><p>代码没去符号，一切都很明显，不多赘述<br><img src="/2024/04/28/xyctf2023-re-writeup/image.png" alt="alt text"><br>加密是魔改 xxtea。魔改了三处，其中还涉及一个全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    v0.value ^= <span class="number">0x5F797274</span></span><br><span class="line">    v1.value ^= <span class="number">0x64726168</span></span><br><span class="line">    delta = <span class="number">0x6E75316C</span></span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        total.value += delta</span><br><span class="line">        v0.value += ((v1.value &lt;&lt; <span class="number">4</span>) + k0) ^ (v1.value +                                          total.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1) ^ (total.value + i)</span><br><span class="line">        v1.value += ((v0.value &lt;&lt; <span class="number">4</span>) + k2) ^ (v0.value +                                        total.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3) ^ (total.value + i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(v0.value), <span class="built_in">hex</span>(v1.value))</span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line">data1 = <span class="number">0x5F797274</span></span><br><span class="line">data2 = <span class="number">0x64726168</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    <span class="keyword">global</span> data1</span><br><span class="line">    <span class="keyword">global</span> data2</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    t_1 = v[<span class="number">0</span>]</span><br><span class="line">    t_2 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x6E75316C</span></span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    total = c_uint32(delta * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        v1.value -= ((v0.value &lt;&lt; <span class="number">4</span>) + k2) ^ (v0.value +                                      total.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3) ^ (total.value + i)</span><br><span class="line">        v0.value -= ((v1.value &lt;&lt; <span class="number">4</span>) + k0) ^ (v1.value +                                     total.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1) ^ (total.value + i)</span><br><span class="line">        total.value -= delta</span><br><span class="line">        <span class="comment"># print(hex(v0.value), hex(v1.value))</span></span><br><span class="line">    v0.value ^= data1</span><br><span class="line">    v1.value ^= data2</span><br><span class="line">    data1 = t_1</span><br><span class="line">    data2 = t_2</span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># value = [0x880012C7, 0x58EE54]</span></span><br><span class="line">    value = [<span class="number">0x9B28ED45</span>, <span class="number">0x145EC6E9</span>, <span class="number">0x5B27A6C3</span>, <span class="number">0xE59E75D5</span>,</span><br><span class="line">             <span class="number">0xE82C2500</span>, <span class="number">0xA4211D92</span>, <span class="number">0xCD8A4B62</span>, <span class="number">0xA668F440</span>]</span><br><span class="line">    key = [<span class="number">0x65766967</span>, <span class="number">0x756F795F</span>, <span class="number">0x7075635F</span>, <span class="number">0x6165745F</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密</span></span><br><span class="line">    flag2 = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(value), <span class="number">2</span>):</span><br><span class="line">        res = decrypt(value[i:i+<span class="number">2</span>], key)</span><br><span class="line">        flag2 += res[<span class="number">0</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>) + res[<span class="number">1</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure><h2 id="何须相思煮余年"><a href="#何须相思煮余年" class="headerlink" title="何须相思煮余年"></a>何须相思煮余年</h2><p>数据开头是 0x55，结尾是 0xc3，可认为是汇编机器码<br><img src="/2024/04/28/xyctf2023-re-writeup/image-2.png" alt="alt text"><br>转化为 hex 数据后 ida 查看（注意这里如果复制到 010editor 后使用 paste from hex text 会吞一些数据。）<br><img src="/2024/04/28/xyctf2023-re-writeup/image-3.png" alt="alt text"><br>直接解即可。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-4.png" alt="alt text"><br>b’XYCTF{5b3e07567a9034d06851475481507a75}’</p><h2 id="今夕是何年"><a href="#今夕是何年" class="headerlink" title="今夕是何年"></a>今夕是何年</h2><p>ida 和 die 都认为是未知架构。搜索架构码 or 搜索 cpu 特征可知可能是龙芯架构。<br>配置 qemu 环境模拟执行<br><img src="/2024/04/28/xyctf2023-re-writeup/image-5.png" alt="alt text"></p><h2 id="馒头"><a href="#馒头" class="headerlink" title="馒头"></a>馒头</h2><p><img src="/2024/04/28/xyctf2023-re-writeup/image-6.png" alt="alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">tree = [<span class="number">0x8DE</span>, <span class="number">0x395</span>, <span class="number">0x1BE</span>, <span class="number">0x0D9</span>, <span class="number">0x06A</span>, <span class="number">0x033</span>, <span class="number">0x014</span>, <span class="number">0x00F</span>, <span class="number">0x011</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0E5</span>, <span class="number">0x072</span>, <span class="number">0x010</span>, <span class="number">0x00B</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x1D7</span>, <span class="number">0x0E9</span>, <span class="number">0x074</span>, <span class="number">0x00E</span>, <span class="number">0x00D</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0EE</span>, <span class="number">0x076</span>, <span class="number">0x00C</span>, <span class="number">0x007</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x549</span>, <span class="number">0x22D</span>, <span class="number">0x0F8</span>, <span class="number">0x07B</span>, <span class="number">0x006</span>, <span class="number">0x018</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x135</span>, <span class="number">0x089</span>, <span class="number">0x043</span>, <span class="number">0x003</span>, <span class="number">0x005</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0AC</span>, <span class="number">0x054</span>, <span class="number">0x004</span>, <span class="number">0x001</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x31C</span>, <span class="number">0x17F</span>, <span class="number">0x0BA</span>, <span class="number">0x059</span>, <span class="number">0x002</span>, <span class="number">0x008</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0C5</span>, <span class="number">0x061</span>, <span class="number">0x030</span>, <span class="number">0x017</span>, <span class="number">0x00A</span>, <span class="number">0x015</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x19D</span>, <span class="number">0x0CB</span>, <span class="number">0x065</span>, <span class="number">0x016</span>, <span class="number">0x009</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0D2</span>, <span class="number">0x068</span>, <span class="number">0x013</span>, <span class="number">0x012</span>]</span><br><span class="line"></span><br><span class="line">fake_flag = <span class="string">&quot;1&quot;</span>*<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fake_flag)</span><br><span class="line"></span><br><span class="line">len_tree = <span class="built_in">len</span>(tree)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(len_tree)</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">25</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">dcount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x65</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_tree-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tree[i] &lt; <span class="number">25</span>:</span><br><span class="line"></span><br><span class="line">        data = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        dcount = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> tree[i] &lt; <span class="number">0x7f</span>:</span><br><span class="line"></span><br><span class="line">        flag[tree[i+dcount]] = tree[i]</span><br><span class="line"></span><br><span class="line">        data = tree[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dcount += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> count &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        flag[tree[i+dcount]] = tree[i] - data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># flag.append(tree[i] - data)</span></span><br><span class="line"></span><br><span class="line">        data += tree[i]</span><br><span class="line"></span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        dcount += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(bytes(flag), len(flag))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">sum</span>(flag)))</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0xac</span> - <span class="number">0x54</span>, <span class="number">0x59</span>, <span class="number">0x43</span>, <span class="number">0x54</span>, <span class="number">0x89</span>-<span class="number">0x43</span>, <span class="number">0x7b</span>, <span class="number">0xee</span>-<span class="number">0x76</span>, <span class="number">0xba</span>-<span class="number">0x59</span>, <span class="number">0xcb</span>-<span class="number">0x65</span>, <span class="number">0x61</span>-<span class="number">0x30</span>, <span class="number">0xe5</span>-<span class="number">0x72</span>, <span class="number">0x76</span>, <span class="number">0xe9</span>-<span class="number">0x74</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x74</span>, <span class="number">0x6a</span>-<span class="number">0x33</span>, <span class="number">0x72</span>, <span class="number">0xd9</span>-<span class="number">0x6a</span>, <span class="number">0xd2</span>-<span class="number">0x68</span>, <span class="number">0x68</span>, <span class="number">0x33</span>, <span class="number">0xc5</span>-<span class="number">0x61</span>, <span class="number">0x65</span>, <span class="number">0x30</span>, <span class="number">0xf8</span>-<span class="number">0x7b</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="喵喵喵的-flag-碎了一地"><a href="#喵喵喵的-flag-碎了一地" class="headerlink" title="喵喵喵的 flag 碎了一地"></a>喵喵喵的 flag 碎了一地</h2><p>推理游戏<br><img src="/2024/04/28/xyctf2023-re-writeup/image-7.png" alt="alt text"><br><img src="/2024/04/28/xyctf2023-re-writeup/image-8.png" alt="alt text"><br>同个函数有不被解析的部分<br><img src="/2024/04/28/xyctf2023-re-writeup/image-9.png" alt="alt text"></p><h2 id="你是真的大学生吗？"><a href="#你是真的大学生吗？" class="headerlink" title="你是真的大学生吗？"></a>你是真的大学生吗？</h2><p>汇编阅读。<br>相邻两位依次异或<br><img src="/2024/04/28/xyctf2023-re-writeup/image-10.png" alt="alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0x76</span>, <span class="number">0x0E</span>, <span class="number">0x77</span>, <span class="number">0x14</span>, <span class="number">0x60</span>, <span class="number">0x06</span>, <span class="number">0x7D</span>, <span class="number">0x04</span>, <span class="number">0x6B</span>, <span class="number">0x1E</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x5C</span>, <span class="number">0x03</span>, <span class="number">0x3B</span>, <span class="number">0x0B</span>, <span class="number">0x33</span>, <span class="number">0x05</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    cipher[i] = (cipher[i] ^ cipher[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cipher))</span><br></pre></td></tr></table></figure><p>输出会有一位偏移，修复一下即可。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-11.png" alt="alt text"><br>xyctf{you_know_8086}</p><h2 id="砸核桃"><a href="#砸核桃" class="headerlink" title="砸核桃"></a>砸核桃</h2><p>NsPack，esp 定律或者附加下断点脱壳<br><img src="/2024/04/28/xyctf2023-re-writeup/image-12.png" alt="alt text"><br>esp：<br>pushad 后对 esp 的地址下硬件访问断点，待到 popad 或代码到 0x401000+后使用 dump 插件 dump 并调整<br><img src="/2024/04/28/xyctf2023-re-writeup/image-13.png" alt="alt text"><br>最后发现是一个异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">b&quot;this_is_not_flag&quot;</span></span><br><span class="line"></span><br><span class="line">cipher = [<span class="number">0x00000012</span>, <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000014</span>, <span class="number">0x00000024</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000056</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000067</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000044</span>, <span class="number">0x00000042</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">0x00000044</span>, <span class="number">0x00000072</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000040</span>, <span class="number">0x0000003E</span>, <span class="number">0x0000004B</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x0000004C</span>, <span class="number">0x0000005E</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000017</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000016</span>, <span class="number">0x00000068</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000012</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line"></span><br><span class="line">    cipher[i] ^= key[i % <span class="built_in">len</span>(key)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cipher))</span><br></pre></td></tr></table></figure><h2 id="babyUnity"><a href="#babyUnity" class="headerlink" title="babyUnity"></a>babyUnity</h2><p><strong>该题可直接用 il2cppdumper 脱</strong><br>脱完后建议直接用 dnspy 分析 assembly，可看见几个函数的偏移<br><img src="/2024/04/28/xyctf2023-re-writeup/image-14.png" alt="alt text"><br>在 ida 里直接 ctrl+g 飞过去，可看得函数逻辑（有些是空函数，空就别管）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">b&quot;\x58\x49\x63\x4B\x59\x4A\x55\x38\x42\x75\x68\x3A\x55\x65\x56\x3A\x42\x4B\x4E\x7B\x55\x5B\x4A\x76\x55\x4C\x3F\x3F\x56\x75\x5A\x3F\x43\x58\x4A\x3B\x41\x58\x5E\x7B\x41\x65\x5D\x67\x41\x5B\x5D\x67\x55\x65\x63\x62\x40\x4B\x5D\x65\x69\x5E\x32\x32&quot;</span></span><br><span class="line">cipher = <span class="built_in">list</span>(cipher)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    cipher[i] ^= <span class="number">0xf</span></span><br><span class="line">cipher = base64.b64decode(<span class="built_in">bytes</span>(cipher))</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br></pre></td></tr></table></figure><p>XYCTF{389f6900-e12d-4c54-a85d-64a54af9f84c}</p><h2 id="DebugMe"><a href="#DebugMe" class="headerlink" title="DebugMe"></a>DebugMe</h2><p><img src="/2024/04/28/xyctf2023-re-writeup/image-15.png" alt="alt text"><br>JEB 打开，程序被 vm 混淆<br>MainActivity 里有暴露 cipher 数组，程序无输入，点击按键后默认只弹出无用信息，同时相邻部分的另一个 Toast 弹出有和 cipher 有关的参数。可推测需通过调试篡改到弹出 flag 的逻辑。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-16.png" alt="alt text"><br>追踪调用：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-17.png" alt="alt text"><br>分析 What 类或 x 的交叉引用树，可知该类是做了 tea 加解密类。x 调用了解密算法<br>key 的初始化：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-18.png" alt="alt text"><br>tea 算法特征：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-19.png" alt="alt text"><br>除此之外还进行了 base64 和稍微的变形,並修复了 cipher 的 base64 格式（有一个 url 格式的%2b 需替换为+）<br><img src="/2024/04/28/xyctf2023-re-writeup/image-20.png" alt="alt text"><br>这里我静态不知为何解不出，那么尝试用 frida 动态解。<br>frida 脚本思路是：hook 一个被执行的函数，篡改为 What.x 解密函数并使用修复后的密文作为参数。最终选择 hook 了 Debug 的 check 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// 检查java runtime可用性</span><br><span class="line"></span><br><span class="line">// frida -U -f com.xyctf.ezapk -l .\hook_1.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Java.available) &#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var What = Java.use(<span class="string">&quot;com.xyctf.ezapk.What&quot;</span>);</span><br><span class="line"></span><br><span class="line">        var x = What.x;</span><br><span class="line"></span><br><span class="line">        x.implementation = function (arg) &#123;</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&quot;hook in&quot;</span>);</span><br><span class="line"></span><br><span class="line">            var retVal = this.x(arg);</span><br><span class="line"></span><br><span class="line">            console.log(retVal);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> retVal;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var Debug = Java.use(<span class="string">&quot;android.os.Debug&quot;</span>);</span><br><span class="line"></span><br><span class="line">        var isDebuggerConnected = Debug.isDebuggerConnected;</span><br><span class="line"></span><br><span class="line">        isDebuggerConnected.implementation = function () &#123;</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&quot;in debug check&quot;</span>);</span><br><span class="line"></span><br><span class="line">            var a = What.x(</span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;WikFhRxyYjoSJ8mMbM3fRwty/74bc7Ip7ojqenHaSqc9wDv3JDG9XfV6xEiC7Eg1RWTUa4LaM+D0W+PKanSA5w==&quot;</span></span><br><span class="line"></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> console.log(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="easy-language"><a href="#easy-language" class="headerlink" title="easy language"></a>easy language</h2><p>搜字符串容易判断是 aes ecb 加密，但 key 很难找，且没有 aes 常量暴露<br><img src="/2024/04/28/xyctf2023-re-writeup/image-21.png" alt="alt text"><br>但是，又发现有 CryptoAPI 的字样<br><img src="/2024/04/28/xyctf2023-re-writeup/image-22.png" alt="alt text"><br>猜测是动态注册调用，尝试 hook<br><img src="/2024/04/28/xyctf2023-re-writeup/image-23.png" alt="alt text"><br>确实使用了，但是 key 试了 RUUU 和 KSSM 都不对<br>但是又看到底下的 xyctf 和 abctf，长度刚好 16 位，满足 aeskey 的要求<br>尝试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher1 = <span class="string">&quot;adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class="line"></span><br><span class="line">cipher2 = <span class="string">&quot;qBr4adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class="line"></span><br><span class="line">cipher3 = <span class="string">&quot;RZy/zVEWMFxaCbzChAg8x26XZYr51rNVnM+zBoBp3gya93L9QQXpFRin1JE33vyx&quot;</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="string">&quot;oVFXvP32lAb6S1bs5xj2mg==&quot;</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;welcometoxyctf!!&quot;</span></span><br><span class="line"></span><br><span class="line">a = base64.b64decode(cipher3)</span><br><span class="line"></span><br><span class="line">b = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b.decrypt(a)</span><br></pre></td></tr></table></figure><p>XYCTF{y0u_@r3_v3ry_g00d_a7_E_l@ngu@ge}</p><h2 id="ez-enc"><a href="#ez-enc" class="headerlink" title="ez_enc"></a>ez_enc</h2><p>本题的其它计算都不算重要，重要的是 mod 20.<br>加密带有 mod 20，会丢失信息，因此不能单纯逆推。<br>而事实上，mod 20 不仅是一个解题限制，更是解题线索.一个可见字符的大小范围是 0x20-0x7e。而当中 mod 20，同一个数字约有 5-6 种的可能。<br>同时加密算法中，flag[i]同时受 flag[i]自己和 flag[i+1]影响，也就是受前一位解密的影响。<br>也就是说我们从最后一位往前推，每一位都有约 5 种可能，而每一位都是上一位推理的继续。那么事实上，这个就是以 flag 最后一位为根节点，以 mod 20 为运算推理出的一个树，某一条能走到树最后一层的路径就是最终的 flag。<br>那么解题的关键找到了。剩下的就是让解题变为可行，这里分析题目有几个约束可用：<br>①flag[i]和 flag[i+1]强相关，如何 flag[i+1]，也就是上一位的值不对，那 flag[i]大概率也不对<br>②flag[i]正确的情况为：flag[i]在推理时小于 20（这里的 flag[i]是由 flag[i+1]推出的 flag[i]%20）且 flag[i]推理完毕后&gt;&#x3D;0x20,&lt;&#x3D;0x7e<br>那么写一个递归算法实现这个思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;2724170b5003c80c1f173655cb2de9320e1126020c07fc273d2ded3559eb3c3ee47d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#lag&#123;!_r3ea11y_w4nt_@_cu7e_s1$ter&#125;</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">list</span>(cipher)</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;IMouto&quot;</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line">flag.append(cipher[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trace_back</span>(<span class="params">flag:<span class="built_in">list</span>,p:<span class="built_in">int</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逆推求解cipher[p]的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(bytes(flag),p)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p == -<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">        flag.reverse()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line">        flag.reverse()</span><br><span class="line"></span><br><span class="line">        flag.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    a = cipher[p]</span><br><span class="line"></span><br><span class="line">    a ^= key[p%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    a -= flag[-<span class="number">1</span>] <span class="comment"># 减去上一个推得的值，也就是减去cipher[p+1].此时的值是cipher[p]_原初%20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a &gt;= <span class="number">20</span> <span class="keyword">or</span> a &lt; <span class="number">0</span>: <span class="comment"># 上一个值不合适，pop</span></span><br><span class="line"></span><br><span class="line">        flag.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line"></span><br><span class="line">            b = a + i * <span class="number">20</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> b &gt;= <span class="number">0x20</span> <span class="keyword">and</span> b &lt;= <span class="number">0x7f</span>:</span><br><span class="line"></span><br><span class="line">                <span class="comment">#print(p,b)</span></span><br><span class="line"></span><br><span class="line">                flag.append(b)</span><br><span class="line"></span><br><span class="line">                trace_back(flag,p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当进行到最后的时候pop出来</span></span><br><span class="line"></span><br><span class="line">    flag.pop()</span><br><span class="line"></span><br><span class="line">trace_back(flag,<span class="built_in">len</span>(cipher)-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/04/28/xyctf2023-re-writeup/image-24.png" alt="alt text"></p><h2 id="ezcube"><a href="#ezcube" class="headerlink" title="ezcube"></a>ezcube</h2><p>魔方，约束右手公式和 12 步<br>在网上搜到了同款初始情况：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-25.png" alt="alt text"><br><a href="http://i-mofang.com/ba_07.shtml">魔方入门解法第 7 步：调整顶层棱块位置 - 爱魔方 (i-mofang.com)</a></p><h2 id="ezmath"><a href="#ezmath" class="headerlink" title="ezmath"></a>ezmath</h2><p>我认为出得很差的一个题。<br>python 3.8 打包为 exe，使用 python3.8 环境下的 pyinstxtractor.py 解包，使用 uncompyle6 反编译。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>(<span class="string">&#x27;flag:&#x27;</span>)]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) == <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>([flag[<span class="number">23</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">23</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">12</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">12</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">1</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">24</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">222</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">22</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">22</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">31</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">31</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">26</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">26</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">9</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">178</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">29</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">232</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">17</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">17</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">23</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">150</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">6</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">226</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">7</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">110</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">19</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">19</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">2</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">176</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">10</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">10</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">12</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">198</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">24</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">24</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">9</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">9</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">3</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">168</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">8</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">134</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">14</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">14</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">13</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">170</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">4</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">4</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">10</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">142</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">27</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">27</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">15</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">15</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">15</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">224</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">16</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">16</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">11</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">230</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">178</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">28</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">28</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">5</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">246</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">17</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">168</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">30</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">30</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">21</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">220</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">22</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">212</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">16</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">232</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">25</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">25</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">4</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">140</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">31</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">250</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">28</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">150</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">11</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">11</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">13</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">13</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">14</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">234</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">7</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">7</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">174</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">3</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">3</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">25</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">242</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">29</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">29</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">5</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">5</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">30</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">142</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">26</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">170</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">19</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">176</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">0</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">27</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">168</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">20</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">20</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">20</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">212</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">21</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">21</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">6</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">6</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">18</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">18</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">18</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">178</span>)]) + <span class="number">297412</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br></pre></td></tr></table></figure><p>简单格式处理后如下：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-26.png" alt="alt text"><br>flag 长 32 位，<br>sum &#x3D; 0<br>for i in range(32):<br>sum +&#x3D; flag[i]_ flag[i]<br>sum +&#x3D; flag[i]_ （100-300 的一个偶数）<br>sum &#x3D; -297412<br>可能按照出题人的想法，这题的解法是依据题目简介的提示：初中数学，配平。<br>A^2 + 2AB +B^2 &#x3D; X。这题每一位 flag 都有平方，也都有乘以一个偶数，那假设每位 flag 是 A，A 乘的那个偶数就是另外的 2B，由此可以推出 flag<br><img src="/2024/04/28/xyctf2023-re-writeup/image-27.png" alt="alt text"><br>那这不是很扯吗，题目的解是基于一个很低级的假设。大伙是来做逆向的，不是脑洞数学。</p><h2 id="ezrand"><a href="#ezrand" class="headerlink" title="ezrand"></a>ezrand</h2><p>随机种子随机数算法，因为随机种子根据 time64 得到，而 time64 返回值落在 0xffff 内，所以可爆。<br>中间随机数相关的复杂算法 ida 可能还原不正确，需要按汇编理解。本质上是 rand()%0xff</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v4;  <span class="comment">// ax</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v5;           <span class="comment">// edi</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> i;           <span class="comment">// rsi</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rand_value;   <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cipher[<span class="number">7</span>];    <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> v10;         <span class="comment">// [rsp+3Ch] [rbp-34h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v11;          <span class="comment">// [rsp+3Dh] [rbp-33h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *input;      <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> v13;         <span class="comment">// [rsp+50h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v14;          <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v15;          <span class="comment">// [rsp+5Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> v16;         <span class="comment">// [rsp+5Eh] [rbp-12h]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v13 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    input = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v14 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v15 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">0</span>] = <span class="number">0xEA6C0C5D</span>;</span><br><span class="line"></span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">1</span>] = <span class="number">0x34FC1946</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">2</span>] = <span class="number">0x72362B2</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">3</span>] = <span class="number">0xFB6E2262</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">4</span>] = <span class="number">0xA9F2E8B4</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">5</span>] = <span class="number">0x86211291</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">6</span>] = <span class="number">0x43E98EDB</span>;</span><br><span class="line"></span><br><span class="line">    v10 = <span class="number">77</span>;</span><br><span class="line"></span><br><span class="line">    v4 = _time64(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    srand(v4);</span><br><span class="line"></span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rand_arr[<span class="number">29</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (i = 0; i &lt; 29; i++)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     rand_arr[i] = rand();</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> seed = <span class="number">0</span>; seed &lt; <span class="number">0xffff</span>; seed++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> flag[<span class="number">30</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        srand(seed);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> tmp = rand();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> a = tmp &gt;&gt; <span class="number">32</span> &gt;&gt; <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> b = a &gt;&gt; <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> c = a + b;</span><br><span class="line"></span><br><span class="line">            b = c * <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> d = tmp - b;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> tmp2 = *((<span class="type">char</span> *)cipher + i) ^ d;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// tmp2 = d;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp2 &gt; <span class="number">0x7e</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp2 &lt; <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            flag[i] = tmp2; <span class="comment">// printf(&quot;%c&quot;, tmp2);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(flag) &gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="ezUnity"><a href="#ezUnity" class="headerlink" title="ezUnity"></a>ezUnity</h2><p>此题略微难在 metadata 文件格式修复<br>可对比 babyUnity 或者其它 Unity 文件的 dll，修复后：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-28.png" alt="alt text"><br>剩下操作类似 babyUnity<br>能通过 findcrypt 或者分析发现是 aes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cipher1 = <span class="string">&quot;pNufkEIU9dHjKXYXWiFyrthHYFEfqJAWcPM/t8/zX1w=&quot;</span></span><br><span class="line">key = <span class="string">&quot;a216d5d34c2723f5&quot;</span></span><br><span class="line">iv = <span class="string">&quot;9f68268f755b1363&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/04/28/xyctf2023-re-writeup/image-29.png" alt="alt text"><br>XYCTF{IL2CPP_1s_intere5t1ng}</p><h2 id="Trustme"><a href="#Trustme" class="headerlink" title="Trustme"></a>Trustme</h2><p>main 是一个没什么用的 rc4，并且和程序对不上。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-30.png" alt="alt text"><br>康康别的类<br><img src="/2024/04/28/xyctf2023-re-writeup/image-31.png" alt="alt text"><br>有一个对 dex 解密并输出什么的。这里静态解太麻烦了，动态找到安卓机的 data&#x2F;data 里对应的包，发现确实有东西<br>如：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-32.png" alt="alt text"><br>分析 dex 目录的 apk，发现其主要做了一个数据库查找操作。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-33.png" alt="alt text"><br>找到数据库：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-34.png" alt="alt text"><br>XYCTF{And0r1d_15_V3ryEasy}</p><h2 id="That’s-this"><a href="#That’s-this" class="headerlink" title="That’s this"></a>That’s this</h2><p>lua 字节码<br><img src="/2024/04/28/xyctf2023-re-writeup/image-35.png" alt="alt text"><br>在线反编译<br><a href="https://www.luatool.cn/index.php">https://www.luatool.cn/index.php</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">value = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">output</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(flag, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(Xor(temp, <span class="number">8</span>) % <span class="number">256</span>)</span><br><span class="line">  value = value .. temp</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> i &gt; <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">1000</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(value, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp + <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">output</span> = <span class="built_in">output</span> .. temp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result = <span class="built_in">output</span>:<span class="built_in">rep</span>(<span class="number">10</span>)</span><br><span class="line">invalid_list = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">20</span> <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="string">&quot;A&quot;</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(<span class="built_in">output</span>) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="built_in">output</span>, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">30</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="built_in">string</span>.<span class="built_in">lower</span>(<span class="built_in">output</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">950</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">-1</span></span><br><span class="line">  y = x * <span class="number">4</span></span><br><span class="line">  z = y / <span class="number">2</span></span><br><span class="line">  w = z - <span class="number">3</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will also never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">obfuscated_output = to_base64(<span class="built_in">output</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">reverse</span>(obfuscated_output)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">invalid_variable = obfuscated_output:<span class="built_in">rep</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> obfuscated_output == <span class="string">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span> <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;You get the flag.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;F**k!&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存在一些混淆代码，但从密文逆推可以很轻松地找到核心逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">list</span>(<span class="string">b&quot;==AeuFEcwxGPuJ0PBNzbC1WctFnPB5DPzI0bwxWbu9GQ2F1XOR1U&quot;</span>)</span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">list</span>(base64.b64decode(<span class="built_in">bytes</span>(a)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(<span class="built_in">bytes</span>(a)), <span class="built_in">len</span>(b))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>, <span class="number">0x7f</span>):</span><br><span class="line"></span><br><span class="line">        t = (l ^ <span class="number">8</span>) + <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t == b[i]:</span><br><span class="line"></span><br><span class="line">            flag += <span class="built_in">chr</span>(l)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># b[i] += 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># b[i] -= 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # b[i] &amp;= 0xff</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># b[i] ^= 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag, <span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure><p>XYCTF{5dcbaed781363fbfb7d8647c1aee6c}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感觉第一周最好玩，没了。&lt;/p&gt;
&lt;h2 id=&quot;聪明的信使&quot;&gt;&lt;a href=&quot;#聪明的信使&quot; class=&quot;headerlink&quot; title=&quot;聪明的信使&quot;&gt;&lt;/a&gt;聪明的信使&lt;/h2&gt;&lt;p&gt;九位凯撒。&lt;br&gt;flag{Y0u_KnOw_Crypt0_14_v3ry_</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://airrcat.github.io/2024/04/26/hello-world/"/>
    <id>https://airrcat.github.io/2024/04/26/hello-world/</id>
    <published>2024-04-26T14:24:48.660Z</published>
    <updated>2024-04-26T14:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
