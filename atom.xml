<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Air_katty</title>
  
  
  <link href="https://airrcat.github.io/atom.xml" rel="self"/>
  
  <link href="https://airrcat.github.io/"/>
  <updated>2024-08-28T05:26:52.000Z</updated>
  <id>https://airrcat.github.io/</id>
  
  <author>
    <name>Aircat</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>hexo g不生成任何文件的错误</title>
    <link href="https://airrcat.github.io/2024/08/28/hexo-g%E4%B8%8D%E7%94%9F%E6%88%90%E4%BB%BB%E4%BD%95%E6%96%87%E4%BB%B6%E7%9A%84%E9%94%99%E8%AF%AF/"/>
    <id>https://airrcat.github.io/2024/08/28/hexo-g%E4%B8%8D%E7%94%9F%E6%88%90%E4%BB%BB%E4%BD%95%E6%96%87%E4%BB%B6%E7%9A%84%E9%94%99%E8%AF%AF/</id>
    <published>2024-08-28T05:23:26.000Z</published>
    <updated>2024-08-28T05:26:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>问题描述：<br>    <code>hexo g</code>不在public文件夹下生成任何文件，只生成了image、archive等几个空文件夹。<br>    <code>hexo g --debug</code>不生成任何错误信息，但是hexo generator 仅有几步处理<br>问题解决：<br>    更新node为实验版本v22后出现此问题，回退至LTS版本v20后问题解决。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;问题描述：&lt;br&gt;    &lt;code&gt;hexo g&lt;/code&gt;不在public文件夹下生成任何文件，只生成了image、archive等几个空文件夹。&lt;br&gt;    &lt;code&gt;hexo g --debug&lt;/code&gt;不生成任何错误信息，但是hexo generator</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>About hexo generate nothing in public folder</title>
    <link href="https://airrcat.github.io/2024/08/28/About-hexo-generate-nothing-in-public-folder/"/>
    <id>https://airrcat.github.io/2024/08/28/About-hexo-generate-nothing-in-public-folder/</id>
    <published>2024-08-28T05:14:44.000Z</published>
    <updated>2024-08-28T05:22:52.000Z</updated>
    
    <content type="html"><![CDATA[<p>if you run <code>hexo g</code> and there nothing new in public folder, you can check the <strong>version of nodejs</strong>.</p><p>In my case, I first use hexo in nodejs version 20.16.0, it is a LTS version and hexo support it.</p><p>But when i update nodejs to 22.6.0(latest), command <code>hexo g</code> can not work ,it just leave some empty folder in public and no any error debug even i use <code>hexo g --debug</code></p><p>So if you has similar problem, you can switch you nodejs version to the LTS.</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;if you run &lt;code&gt;hexo g&lt;/code&gt; and there nothing new in public folder, you can check the &lt;strong&gt;version of nodejs&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;In my</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>开发看板</title>
    <link href="https://airrcat.github.io/2024/08/12/%E5%BC%80%E5%8F%91%E7%9C%8B%E6%9D%BF/"/>
    <id>https://airrcat.github.io/2024/08/12/%E5%BC%80%E5%8F%91%E7%9C%8B%E6%9D%BF/</id>
    <published>2024-08-12T11:58:53.000Z</published>
    <updated>2024-08-12T12:27:50.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="1-tool-for-search-ip-and-domain-in-binary-stream">1. Tool for search ip and domain in binary stream</span></h2><p><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：基本完成</p><p>基本完成，但是因为和关键词搜索撞了，还得重新做一下。<br><strong>todo</strong></p><ul><li><input disabled type="checkbox"> 做成pyd</li><li><input disabled type="checkbox"> 做成命令行工具</li><li><input disabled type="checkbox"> 拆分</li></ul><h2><span id="2-tool-for-search-keyword-in-file">2. Tool for search keyword in file</span></h2><p><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：初步</p><ol><li>完成任务实践</li><li>基本能读完csv</li><li>基本能读完excel</li><li>去重复</li></ol><ul><li><input disabled type="checkbox"> ppt读取</li><li><input disabled type="checkbox"> word读取</li><li><input disabled type="checkbox"> 统一输出流</li><li><input disabled type="checkbox"> 搜索效率优化</li><li><input disabled type="checkbox"> GUI</li><li><input disabled type="checkbox"> 交互优化</li><li><input disabled type="checkbox"> 结果优化</li></ul><h2><span id="3-tool-for-load-pe-file-and-parse-pe-info-in-unicorn2">3. Tool for load pe file and parse pe info in unicorn2</span></h2><p><strong>MAIN TARGET</strong><br><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：初步<br>期待实现一个自动装载PE段、解析导入表、导入函数，能自动解析导入函数的功能，这样在做模拟执行时，我只需要考虑hook的功能。</p><ol><li>完成x86 PE解析</li><li>完成段加载</li></ol><ul><li><input disabled type="checkbox"> elf</li><li><input disabled type="checkbox"> 多架构</li><li><input disabled type="checkbox"> 段结构优化</li><li><input disabled type="checkbox"> 函数自动解析</li><li><input disabled type="checkbox"> 模板化</li></ul><h2><span id="4-tool-for-anti-obf-and-control-flow-flattening">4. Tool for anti obf and control flow flattening</span></h2><p><strong>编写语言</strong>：Python<br><strong>开发状态</strong>：筹划</p><p>unicorn、qiling trace指令并dump，把平坦化、混淆的指令线性化。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;1-tool-for-search-ip-and-domain-in-binary-stream&quot;&gt;1. Tool for search ip and domain in binary stream&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;编写语言</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>hexo、github博客加入搜索引擎的方法简述</title>
    <link href="https://airrcat.github.io/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/"/>
    <id>https://airrcat.github.io/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/</id>
    <published>2024-07-17T07:39:09.000Z</published>
    <updated>2024-07-17T08:02:32.000Z</updated>
    
    <content type="html"><![CDATA[<p>about:hexo、github.io<br>本篇考虑两个搜索引擎：bing、google。（百度引擎需要实名认证，因此撇弃）</p><h2><span id="bing-webmaster-tool">bing - Webmaster Tool</span></h2><p>查看自家博客有没有加入搜索引擎：site:<a href="https://yourblog.github.io/">https://yourblog.github.io/</a><br>如有则能查看到类似如下：<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-10.png" alt="alt text"><br>如没有,则可搜索”bing 网站管理员工具”或进入网址：<a href="https://www.bing.com/webmasters/home">https://www.bing.com/webmasters/home</a><br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-11.png" alt="alt text"><br>这里我们如果先做好了谷歌的添加那可以直接同步，不过我的体验是bing的处理比谷歌快，所以我选了<strong>手动添加</strong><br>手动添加这一步其实是验证网址的所有权，所以bing会给你一个xml文件，你需要将这个文件放到网页web的根目录下，如：<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-12.png" alt="alt text"><br>ps：谷歌的手动添加同理。<br>完成添加之后，我们不急着post我们的博客，我们可以先添加一个站点文件sitemap.xml来帮助搜索引擎建立我们博客的索引。<br>在hexo目录下安装sitemap插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-sitemap --save</span><br></pre></td></tr></table></figure><p>在博客根目录（非主题）的_config.yml下添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br></pre></td></tr></table></figure><p>同时别忘记同文件的url项，如果该项没被正确配置，生成的sitemap也会出错。<br>example:</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://airrcat.github.io</span></span><br></pre></td></tr></table></figure><h2><span id="google">Google</span></h2><p>谷歌的搜索同上<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-13.png" alt="alt text"><br>可以直接跳转至谷歌搜索控制台（Google Search Console）<br><img src="/2024/07/17/hexo-%E5%8D%9A%E5%AE%A2%E5%8A%A0%E5%85%A5%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E7%9A%84%E6%96%B9%E6%B3%95%E7%AE%80%E8%BF%B0/image-14.png" alt="alt text"><br>需要注意的是，如果我们hexo网页的url、sitemap配置不正确，有可能导致Google Search的编制索引一直：<br><strong>正在处理数据，请过 1 天左右再来查看</strong><br>此时可以考虑检查配置是否正确、提交反馈或删除资源重新添加等。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;about:hexo、github.io&lt;br&gt;本篇考虑两个搜索引擎：bing、google。（百度引擎需要实名认证，因此撇弃）&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;bing-webmaster-tool&quot;&gt;bing - Webmaster Tool&lt;/span&gt;&lt;/h2&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>blowfish例题 RCTF-DontEatMe</title>
    <link href="https://airrcat.github.io/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/"/>
    <id>https://airrcat.github.io/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/</id>
    <published>2024-07-15T08:03:42.000Z</published>
    <updated>2024-07-15T10:27:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>本题的主要考点是Blowfish算法。附带反调试、迷宫<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-10.png" alt="alt text"><br>程序的开始阶段除了输入之外，还固定了一个随机数种子，并通过动态获取Ntdll地址的方式去调用ZwSetInformationThread来反调试。这里可以把该函数直接nop。而为了考虑栈平衡，需要计算有多少个push、call需要nop或者直接nop一片。<br>我将Ntdll相关的几个函数全nop后汇编头尾如下：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-11.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-12.png" alt="alt text"><br>之后程序开始获取随机数：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-13.png" alt="alt text"><br>需要注意的是：<br>    ①我动调扒取rand()、解码后的数组时，这个序列的最后是0xcd，而靠这个序列我解不出来最后的答案，最后是调试到最后，回头看了下这个全局数组发现最后一位不是0xcd，是0x20，将改为0x20后成功解出。这里可能有我手法的问题。<br>    ②原因未知，我使用ida 对上述的反调试nop后，在动调时被nop的代码还会出新的代码，此时可能需要重复patch。<br>获取完随机数序列后，该序列还会做一个简单的decode from ‘fishFISH’。之后进入sub_C41090函数,此为blowfish的box交换函数。<br>算法的分析有两点，第一点是寻找box特征：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-14.png" alt="alt text"><br>可在该函数开头看到：<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-15.png" alt="alt text"><br>第二点是分析算法特征，需要有算法实现源码。最直接的对比是算法参数：循环长度、循环步长。需要分析的是算法结构：指令流（循环第一个指令、第二个指令、第三个指令分别是什么，是否匹配）、每个指令的输入、输出。初次分析可判断到是什么算法即可，当解不出来时考虑是否魔改，进而进一步分析算法细节。<br>①blowfish的pbox异或key，且异或长度为18，循环步长为+2<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-16.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-17.png" alt="alt text"><br>同理对比<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-18.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-19.png" alt="alt text"><br>BF_FN:<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-20.png" alt="alt text"><br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-21.png" alt="alt text"><br>因此，基本确认这里是blowfish的初始化函数，通过key生成新的box，和输入无关。<br>接下来有几个重点：<br>①输入从str被vsscanf转为了hex如：’12’-&gt;b’\x12’<br>②在blowfish算法后有一个迷宫操作，迷宫的地图是通过计算生成的。<br>③一个小trick来了。<br>正常来说，我们默认题里的算法是做加密操作后进行密文匹配，而本题，输入的字符串转hex后，经过blowfish计算的结果要作为迷宫的前进方向，计算的结果是在’wasd’之内。<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-22.png" alt="alt text"><br>初始<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-23.png" alt="alt text"><br>最终check<br><img src="/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-24.png" alt="alt text"><br>也就是说，本题是：输入一串hex，经过blowfish处理变成wasd明文。<br>于是这里的blowfish处理就不能是加密的：明文-》hex密文，而得是解密的：hex密文-》明文。<br>那么我们这里就清晰了：迷宫的路径是明文，同时是blowfish解密的结果，而要获得最初输入，动调获取blowfish 的key并将明文加密即可。<br>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> Blowfish</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">print_maze</span>(<span class="params">maze: <span class="built_in">list</span>, weight: <span class="built_in">int</span></span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(maze)):</span><br><span class="line">        <span class="keyword">if</span> i % weight == <span class="number">0</span>:</span><br><span class="line">            <span class="built_in">print</span>()</span><br><span class="line">        <span class="built_in">print</span>(maze[i], end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 随机种子作key</span></span><br><span class="line">a = <span class="string">b&quot;\x90\xbbK\xee\xde\xfa\xf2\xcbh\xf8\x83\xd3\x96\xf8z\xc8\xd8\xfb\xc3\xd1V\xc5\xba\x8fh\xbc\x8b\x91\x9e\xba\xb2\x8b\x00&quot;</span></span><br><span class="line">a = <span class="built_in">list</span>(a)</span><br><span class="line">key = <span class="string">b&quot;DontEatM&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    a[i] ^= key[i % <span class="built_in">len</span>(key)]</span><br><span class="line"></span><br><span class="line">maze = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    ptr = <span class="number">0xf</span></span><br><span class="line">    <span class="keyword">while</span> ptr &gt; -<span class="number">1</span>:</span><br><span class="line">        tmp = (((<span class="number">1</span> &lt;&lt; ptr) &amp; a[i]) &gt;&gt; ptr)</span><br><span class="line">        ptr -= <span class="number">1</span></span><br><span class="line">        maze.append(tmp)</span><br><span class="line">maze = [<span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>,</span><br><span class="line">        <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>]</span><br><span class="line">maze[<span class="number">0xa</span>*<span class="number">0x10</span>+<span class="number">5</span>] = <span class="string">&#x27;#&#x27;</span></span><br><span class="line">maze[<span class="number">0x4</span>*<span class="number">0x10</span>+<span class="number">9</span>] = <span class="string">&#x27;x&#x27;</span></span><br><span class="line">print_maze(maze, <span class="number">0x10</span>)</span><br><span class="line"><span class="comment"># ddddwwwaaawwwddd</span></span><br><span class="line">key_array = <span class="built_in">list</span>(<span class="string">b&#x27;fishFISH&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># key_array[1] = 0xf</span></span><br><span class="line"><span class="comment"># key_array[2] = (0x73 ^ key_array[1])</span></span><br><span class="line"><span class="comment"># key_array[3] = (0x68 ^ key_array[1])</span></span><br><span class="line"><span class="comment"># key_array[4] = key_array[2] ^ key_array[4]</span></span><br><span class="line">key_array = [<span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>, <span class="number">0x35</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0xCD</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">blowfish</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">self, code, key</span>):</span><br><span class="line">        key = key</span><br><span class="line">        l = <span class="built_in">len</span>(code)</span><br><span class="line">        <span class="keyword">if</span> l % <span class="number">8</span> != <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># Blowfish底层决定了字符串长度必须8的整数倍，所补位空格也可以根据自己需要补位其他字符</span></span><br><span class="line">            code = code + <span class="string">b&#x27; &#x27;</span> * (<span class="number">8</span> - (l % <span class="number">8</span>))</span><br><span class="line">        code = code</span><br><span class="line">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class="line">        encode = cl.encrypt(code)</span><br><span class="line">        <span class="comment"># hex_encode = codecs.encode(encode, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class="line">        <span class="keyword">return</span> encode</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Decrypt</span>(<span class="params">self, string, key</span>):</span><br><span class="line">        key = key</span><br><span class="line">        string = string</span><br><span class="line">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class="line">        <span class="comment"># codecs.decode(string, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class="line">        ciphertext = string</span><br><span class="line">        code = cl.decrypt(ciphertext)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;%s&quot;</span> % (code)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># encode = b&#x27;8749C71106E48B51&#x27;</span></span><br><span class="line">    code = <span class="string">b&#x27;ddddwwwaaawwwddd&#x27;</span></span><br><span class="line">    key_array = [<span class="number">0x00</span>, <span class="number">0x0F</span>, <span class="number">0x1A</span>, <span class="number">0x01</span>, <span class="number">0x35</span>, <span class="number">0x3A</span>, <span class="number">0x3B</span>, <span class="number">0x20</span>]</span><br><span class="line">    key = <span class="built_in">bytes</span>(key_array)</span><br><span class="line">    gw = blowfish()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;明文密码：%s，经过key：%s加密之后的加密密码是：%s&quot;</span> % (code, key, gw.Encrypt(code, key)))</span><br><span class="line">    encode = gw.Encrypt(code, key)</span><br><span class="line">    <span class="built_in">print</span>(encode.<span class="built_in">hex</span>())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;加密密码：%s，经过key：%s解密之后的明文密码是：%s&quot;</span> %</span><br><span class="line">          (encode, key, gw.Decrypt(encode, key)))</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本题的主要考点是Blowfish算法。附带反调试、迷宫&lt;br&gt;&lt;img src=&quot;/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-10.png&quot; alt=&quot;alt text&quot;&gt;&lt;br&gt;程序的开始阶段除了</summary>
      
    
    
    
    
    <category term="Reverse" scheme="https://airrcat.github.io/tags/Reverse/"/>
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
    <category term="Blowfish" scheme="https://airrcat.github.io/tags/Blowfish/"/>
    
    <category term="Maze" scheme="https://airrcat.github.io/tags/Maze/"/>
    
  </entry>
  
  <entry>
    <title>Short solution about unicorn error: Could not allocate dynamic translator buffer</title>
    <link href="https://airrcat.github.io/2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/"/>
    <id>https://airrcat.github.io/2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/</id>
    <published>2024-06-18T07:40:23.000Z</published>
    <updated>2024-06-18T08:48:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>this error occured when i try to emu 1000+ elf file and about 100 times.<br>sample from <a href="https://buuoj.cn/challenges#[CFI-CTF%202018]Automated%20Reversing">CFI-CTF 2018 Automated Reversing</a></p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class="line">...</span><br><span class="line"><span class="keyword">import</span>  gc</span><br><span class="line"><span class="keyword">del</span> uc</span><br><span class="line">gc.collect()</span><br></pre></td></tr></table></figure><p>After read this <a href="https://github.com/unicorn-engine/unicorn/issues/508">issue</a>, I confirm that this error is about the bad resource release. So I try to call gc.collect() to solve it.</p><p><a href="https://github.com/Airrcat/unicorn_loader">pe_loader</a><br>total code:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pe_loader.pe_loader <span class="keyword">import</span>  *</span><br><span class="line"><span class="keyword">from</span> unicorn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> capstone <span class="keyword">as</span> cs</span><br><span class="line">check = <span class="number">0</span></span><br><span class="line">boom = <span class="number">0</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trace</span>(<span class="params">mu: Uc, address, size, data</span>):</span><br><span class="line">    <span class="keyword">global</span> check</span><br><span class="line">    <span class="keyword">global</span> boom</span><br><span class="line">    EIP = mu.reg_read(unicorn.x86_const.UC_X86_REG_EIP)</span><br><span class="line">    <span class="keyword">if</span> EIP == <span class="number">0x19</span>:</span><br><span class="line">        mu.reg_write(unicorn.x86_const.UC_X86_REG_DL,boom)</span><br><span class="line">    <span class="keyword">if</span> EIP == <span class="number">0x1f</span>:</span><br><span class="line">        <span class="keyword">if</span> mu.reg_read(unicorn.x86_const.UC_X86_REG_FLAGS)&amp;(<span class="number">2</span>**<span class="number">6</span>)==(<span class="number">2</span>**<span class="number">6</span>):</span><br><span class="line">                check = <span class="number">1</span></span><br><span class="line">                mu.emu_stop()</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">    <span class="keyword">if</span> EIP &gt; <span class="number">0x30</span>:</span><br><span class="line">        mu.emu_stop()</span><br><span class="line">anwsers = [<span class="number">0</span>]*<span class="number">1010</span></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> suffix <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1009</span>):</span><br><span class="line">    path = <span class="string">&quot;attachment/binaries/&quot;</span></span><br><span class="line">    prefix = <span class="string">&quot;binary&quot;</span></span><br><span class="line">    <span class="keyword">if</span> suffix == <span class="number">993</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    loader = pe_loader(path + prefix+ <span class="built_in">str</span>(suffix),UC_MODE_32)</span><br><span class="line">    vaddr = <span class="number">0</span></span><br><span class="line">    vsize = <span class="number">0xdf</span> - <span class="number">0xb0</span></span><br><span class="line">    raddr = <span class="number">0xb0</span></span><br><span class="line">    rsize = <span class="number">0xdf</span> - <span class="number">0xb0</span></span><br><span class="line">    content = loader.image[raddr:raddr + rsize]</span><br><span class="line"></span><br><span class="line">    CODE = content</span><br><span class="line">    BASE_ADDR = vaddr</span><br><span class="line">    CODE_LEN = vsize</span><br><span class="line"></span><br><span class="line">    uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class="line">    <span class="comment"># 整体内存空间的初始化</span></span><br><span class="line">    uc.mem_map(BASE_ADDR,<span class="number">32</span>*<span class="number">1024</span>)</span><br><span class="line">    uc.mem_write(BASE_ADDR,<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">32</span>*<span class="number">1024</span>)</span><br><span class="line">    <span class="comment"># 栈空间初始化，因为内存刚刚整体写了，这里其实可以不用。</span></span><br><span class="line">    STACK = <span class="string">b&#x27;\x00&#x27;</span> * <span class="number">1024</span></span><br><span class="line">    STACK_POINT = <span class="number">30</span> * <span class="number">1024</span></span><br><span class="line">    <span class="comment"># 栈初始化</span></span><br><span class="line">    uc.reg_write(unicorn.x86_const.UC_X86_REG_SP,STACK_POINT)</span><br><span class="line">    </span><br><span class="line">    uc.mem_write(BASE_ADDR,CODE)</span><br><span class="line">    uc.hook_add(UC_HOOK_CODE, trace)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0xff</span>):</span><br><span class="line">        <span class="keyword">if</span> check == <span class="number">1</span>:</span><br><span class="line">            anwsers[count] = boom</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line">            check = <span class="number">0</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            boom = i</span><br><span class="line">            uc.emu_start(BASE_ADDR, rsize)</span><br><span class="line">        <span class="keyword">except</span> UcError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;ERROR &quot;</span>, e)</span><br><span class="line">    uc.mem_unmap(BASE_ADDR,<span class="number">32</span>*<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">import</span> gc</span><br><span class="line">    <span class="keyword">del</span> uc</span><br><span class="line">    gc.collect()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;attachment/binaries/anwser.txt&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(anwsers))</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;this error occured when i try to emu 1000+ elf file and about 100 times.&lt;br&gt;sample from &lt;a href=&quot;https://buuoj.cn/challenges#[CFI-CTF%202</summary>
      
    
    
    
    
    <category term="unicorn" scheme="https://airrcat.github.io/tags/unicorn/"/>
    
  </entry>
  
  <entry>
    <title>Adjustment about unresolved stack usage in binary ninja</title>
    <link href="https://airrcat.github.io/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/"/>
    <id>https://airrcat.github.io/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/</id>
    <published>2024-06-17T02:03:34.000Z</published>
    <updated>2024-07-16T02:02:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>This is a short article about the error <strong>“This function has unresolved stack usage.View graph of stack usage to resolve”</strong> in binary ninja and the function <strong>“Set Stack Adjustment”</strong>.</p><p>Acctually, this error has the similar solve way as IDA.<br>First, you should <strong>step in the “Graph of stack usage”</strong> as the image note:<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-10.png" alt="alt text"><br>In this Graph, you should care about the “Green Block” and <strong>“Bule Block”</strong>. Green means it is fine. and Blue, as the first sentence of blue block, is the <strong>error stack</strong>.<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-11.png" alt="alt text"><br>And, by <strong>right click</strong> in the first call of blue block, click the <strong>“Set Stack Adjustment”</strong> you can input <strong>number</strong> to adjust stack analyze in this call:<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-12.png" alt="alt text"><br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-13.png" alt="alt text"><br>But soon, a confused thing : why this error not solved? And <strong>graph not changed</strong>.<br>In fact, the reason is: this <strong>“Graph of stack usage” is a static graph</strong>. It will not update with our adjust just in time. So, you can re-step in this graph again to check your adjustment if it works.<br>In this case, I adjust two call’s stack usage, and set adjustment by 1<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-14.png" alt="alt text"><br>by 0<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-15.png" alt="alt text"><br>and solved.<br><img src="/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/image-16.png" alt="alt text"></p><p><a href="https://buuoj.cn/challenges#[RCTF2019]DontEatMe">example: RCTF2019-DontEatMe-main</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;This is a short article about the error &lt;strong&gt;“This function has unresolved stack usage.View graph of stack usage to resolve”&lt;/strong&gt; </summary>
      
    
    
    
    
    <category term="Reverse" scheme="https://airrcat.github.io/tags/Reverse/"/>
    
    <category term="binary-ninja" scheme="https://airrcat.github.io/tags/binary-ninja/"/>
    
  </entry>
  
  <entry>
    <title>Cpython and Cpython hook -1</title>
    <link href="https://airrcat.github.io/2024/05/30/Cpython-and-Cpython-hook-1/"/>
    <id>https://airrcat.github.io/2024/05/30/Cpython-and-Cpython-hook-1/</id>
    <published>2024-05-30T09:16:26.000Z</published>
    <updated>2024-05-31T02:16:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>test.pyx</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">a</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(arg)</span><br></pre></td></tr></table></figure><p>setup.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> setuptools <span class="keyword">import</span> setup</span><br><span class="line"><span class="keyword">from</span> Cython.Build <span class="keyword">import</span> cythonize</span><br><span class="line"></span><br><span class="line">setup(</span><br><span class="line">    ext_modules=cythonize(<span class="string">&quot;./test.pyx&quot;</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>编译指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python .\setup.py build_ext --inplace</span><br></pre></td></tr></table></figure><p>这里–inplace可不要。添加该选项可让编译的库输出到工作目录下<br>test_import.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> test</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">dir</span>(test))</span><br><span class="line"></span><br><span class="line">a = test.a</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hook_a</span>(<span class="params">arg</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hook a&quot;</span>)</span><br><span class="line">    a(arg)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test.a = hook_a</span><br><span class="line">test.a(<span class="number">1</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__file__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;__test__&#x27;</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line">hook a</span><br><span class="line">1</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;test.pyx&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/spa</summary>
      
    
    
    
    
    <category term="Python" scheme="https://airrcat.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>XPATH报错注入小记</title>
    <link href="https://airrcat.github.io/2024/05/16/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/"/>
    <id>https://airrcat.github.io/2024/05/16/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/</id>
    <published>2024-05-16T07:08:09.000Z</published>
    <updated>2024-05-16T07:47:06.000Z</updated>
    
    <content type="html"><![CDATA[<h2><span id="简述">简述：</span></h2><p>报错注入的危害主要是查询数据方面，它自己很难做一些如提权之类的动作。</p><p>报错注入主要涉及：extractvalue()、updatexml()等。这些函数的功能和注入结果类似，但使用的参数会略有不同。</p><p>本文讨论到的报错注入主要是“xml”的报错注入，先讨论<strong>注入点</strong></p><p>简单的来说，在数据库中，一些操作xml文件的函数会遵循一种叫“XPATH”的格式规范。这个规范会比较严格，限制了一些字符。而当数据库查询语句试图调用上面提到的函数时，若给出的查询语句——也就是查询的目标XPATH就会触发“报错”</p><p>这里可以发现，触发报错是很容易的，但有报错不一定有注入。安全的查询在报错时只会返回用户所查询的语句，而若存在暴露，数据库会解析extractvalue里存在的一些查询语句并返回，导致攻击者可以通过报错注入去爬取数据库的数据。</p><h2><span id="payload案例">payload案例：</span></h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://xxx.xxx.xxx/xxx/xxx/api/xxx/xxx?xxx=xxx%27%20AND%20EXTRACTVALUE(1,concat(0x7e,database(),0x7e))--%20xxxx</span><br></pre></td></tr></table></figure><p><img src="/2024/05/16/%E6%8A%A5%E9%94%99%E6%B3%A8%E5%85%A5%E5%B0%8F%E8%AE%B0/image-7.png" alt="alt text"></p><h2><span id="小结">小结：</span></h2><p>报错注入形式简单，判断简单，是一个可以模板化测试的漏洞（sqlmap）<br>而若有蓝队研判需求，主要关注报错注入的返回包是否<strong>没有返回查询语句</strong>而是返回其它一些有的没的。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2&gt;&lt;span id=&quot;简述&quot;&gt;简述：&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;报错注入的危害主要是查询数据方面，它自己很难做一些如提权之类的动作。&lt;/p&gt;
&lt;p&gt;报错注入主要涉及：extractvalue()、updatexml()等。这些函数的功能和注入结果类似，但使用的参数会略有不</summary>
      
    
    
    
    
    <category term="流量分析" scheme="https://airrcat.github.io/tags/%E6%B5%81%E9%87%8F%E5%88%86%E6%9E%90/"/>
    
    <category term="Web" scheme="https://airrcat.github.io/tags/Web/"/>
    
    <category term="安全监控" scheme="https://airrcat.github.io/tags/%E5%AE%89%E5%85%A8%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>ctf做题记录-svm</title>
    <link href="https://airrcat.github.io/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/"/>
    <id>https://airrcat.github.io/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/</id>
    <published>2024-04-30T07:38:52.000Z</published>
    <updated>2024-05-21T00:54:10.000Z</updated>
    
    <content type="html"><![CDATA[<h1><span id="待补完">待补完</span></h1><p><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image.png" alt="alt text"><br>导入表为空，纯静态编译<br>经检查初始化和推出程序均空<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-1.png" alt="alt text"><br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-2.png" alt="alt text"><br>程序执行会有 input 字符串，这是线索（这里用 ida 远程启动，会有其它信息<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-3.png" alt="alt text"><br>input 直接在 string 中搜到，有如下交叉引用：<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-4.png" alt="alt text"><br>直接下断点动调，发现 1780 是 main 函数，会 printf(input)<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-5.png" alt="alt text"><br>init 函数做了一个初始化：<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-6.png" alt="alt text"><br>sub_402000 是一个大虚拟机，不多赘述。<br>那么按照虚拟机的思路对函数重新命名</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">__int64 <span class="title">sub_401780</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  __int64 vm_mem[<span class="number">5</span>]; <span class="comment">// [rsp+0h] [rbp+0h] BYREF</span></span><br><span class="line">  <span class="type">unsigned</span> __int64 vars28; <span class="comment">// [rsp+28h] [rbp+28h]</span></span><br><span class="line"></span><br><span class="line">  vars28 = __readfsqword(<span class="number">0x28</span>u);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;input:&quot;</span>);</span><br><span class="line">  <span class="built_in">init</span>(vm_mem, &amp;mem_src, <span class="number">4096LL</span>, <span class="number">2677LL</span>);</span><br><span class="line">  <span class="built_in">vm</span>(vm_mem);</span><br><span class="line">  <span class="built_in">may_printf</span>(vm_mem[<span class="number">0</span>]);</span><br><span class="line">  <span class="built_in">may_printf</span>(vm_mem[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> ( __readfsqword(<span class="number">0x28</span>u) != vars28 )</span><br><span class="line">    <span class="built_in">sub_44C7D0</span>();</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0LL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对虚拟机init的一些初始判断：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">__int64 __fastcall init(struct_vm *vm, __int64 a2, <span class="built_in">int</span> mem_size, <span class="built_in">int</span> code_size)</span><br><span class="line">&#123;</span><br><span class="line">  __m128i *mem; // rax</span><br><span class="line">  __int64 code_seg; // rax</span><br><span class="line">  __int64 result; // rax</span><br><span class="line"></span><br><span class="line">  mem = (__m128i *)malloc(4LL * mem_size);</span><br><span class="line">  vm-&gt;mem_size = mem_size;</span><br><span class="line">  vm-&gt;mem = mem;</span><br><span class="line">  memset(mem, <span class="number">0</span>, <span class="number">4</span> * mem_size);</span><br><span class="line">  code_seg = malloc(4LL * code_size);</span><br><span class="line">  vm-&gt;code_szie = code_size;</span><br><span class="line">  vm-&gt;code_seg = code_seg;</span><br><span class="line">  result = sub_401060();</span><br><span class="line">  vm-&gt;ip_point = <span class="number">0</span>;</span><br><span class="line">  vm-&gt;stack = -1LL;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在当前这一步，我们可以确定的分析不多，但有一点———该虚拟机似乎缺少了对寄存器的初始化，只进行了两个内存空间——很可能是代码和栈空间的初始化；接下来我们会印证这个想法。<br>该虚拟机的指令相当多，这里简单对内存空间进行扫描，取出大概率实际用到的指令<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-7.png" alt="alt text"><br>举例分析几个指令：<br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-8.png" alt="alt text"><br><img src="/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image-9.png" alt="alt text"><br>注意，我这里用的“弹”是偏主观的理解，按实际的来说，这里并没有专门的寄存器来接收“弹”出的栈顶变量，而是在语句中临时赋值。而后栈顶指针会往下移动，符合“弹”的感觉（x</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;&lt;span id=&quot;待补完&quot;&gt;待补完&lt;/span&gt;&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/image.png&quot; alt=&quot;alt text&quot;&gt;&lt;br&gt;导入表为空，纯</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>some frida scripts</title>
    <link href="https://airrcat.github.io/2024/04/30/some-frida-scripts/"/>
    <id>https://airrcat.github.io/2024/04/30/some-frida-scripts/</id>
    <published>2024-04-30T02:44:22.000Z</published>
    <updated>2024-04-30T03:43:12.000Z</updated>
    
    <content type="html"><![CDATA[<table><thead><tr><th>frida script</th><th>status</th></tr></thead><tbody><tr><td>hook java Android Api</td><td>√</td></tr><tr><td>hook new StringBuilder</td><td>√</td></tr><tr><td>modify func retVal</td><td>√</td></tr><tr><td>traceback</td><td>√</td></tr><tr><td>hook native func</td><td>√</td></tr><tr><td>hook win dll</td><td>√</td></tr></tbody></table><!-- toc --><ul><li><a href="#hook-java-android-api">hook java android api</a></li><li><a href="#hook-new-srtingbuilder">hook new SrtingBuilder</a></li><li><a href="#modify-func-retval">modify func retVal</a></li><li><a href="#traceback">traceback</a></li><li><a href="#hook-native-func">hook native func</a></li><li><a href="#hook-win-dll">hook win dll</a></li></ul><!-- tocstop --><h2><span id="hook-java-android-api">hook java android api</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// frida -U -f com.example.frida_java_anti_frida -l .\hook_java_android_api.js</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">AppCompatActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(</span><br><span class="line"><span class="string">&quot;androidx.appcompat.app.AppCompatActivity&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">var</span> setSupportActionBar = <span class="title class_">AppCompatActivity</span>.<span class="property">setSupportActionBar</span>;</span><br><span class="line">setSupportActionBar.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">arg</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> retVal = <span class="variable language_">this</span>.<span class="title function_">setSupportActionBar</span>(arg);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hook!&quot;</span>);</span><br><span class="line"><span class="keyword">return</span> retVal;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2><span id="hook-new-srtingbuilder">hook new SrtingBuilder</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查java runtime可用性</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java available&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boot java perform function&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(</span><br><span class="line"><span class="string">&quot;com.example.frida_java_test_3.MainActivity&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;load class&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.StringBuilder&quot;</span>).<span class="property">$init</span>.<span class="title function_">overload</span>(</span><br><span class="line"><span class="string">&quot;java.lang.String&quot;</span></span><br><span class="line">).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="comment">// init？new?</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">StringBuilder</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.StringBuilder&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> arg = args;</span><br><span class="line"><span class="keyword">var</span> result = <span class="variable language_">this</span>.$new(args);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;the StringBuilder arg :&quot;</span>, arg);</span><br><span class="line"><span class="keyword">if</span> (arg == <span class="string">&quot;hack me&quot;</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;check magic str!&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hack it!&quot;</span>);</span><br><span class="line">result = <span class="variable language_">this</span>.$new(<span class="string">&quot;hacked!&quot;</span>);</span><br><span class="line">args = result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;ret:&quot;</span>, result);</span><br><span class="line">result = <span class="variable language_">this</span>.$init(args);</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line"><span class="comment">// var a</span></span><br><span class="line"><span class="comment">//return a</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">MainActivity</span>.<span class="property">getOne</span>.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> retVal = <span class="variable language_">this</span>.<span class="title function_">getOne</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(retVal);</span><br><span class="line"><span class="keyword">return</span> retVal.<span class="title function_">toString</span>();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2><span id="modify-func-retval">modify func retVal</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检查java runtime可用性</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java available&quot;</span>);</span><br><span class="line"><span class="comment">// **app&#x27;s class loader？</span></span><br><span class="line"><span class="comment">// **Ensures that the current thread is attached to the VM and calls fn. (This isn&#x27;t necessary in callbacks from Java.)？</span></span><br><span class="line"><span class="comment">// 如果无需等待class loader的初始化，则调用performNow</span></span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boot java perform function&quot;</span>);</span><br><span class="line"><span class="comment">// 获取MainActivity类</span></span><br><span class="line"><span class="comment">// 可以获取其它类的实例</span></span><br><span class="line"><span class="comment">// Uses the app&#x27;s class loader, but you may access classes on other loaders by calling Java.ClassFactory.get()</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MainActivity</span> = <span class="title class_">Java</span>.<span class="title function_">use</span>(</span><br><span class="line"><span class="string">&quot;com.example.frida_java_test_1.MainActivity&quot;</span></span><br><span class="line">);</span><br><span class="line"><span class="comment">// 获取MainActivity的getOne实例（实际上是一个函数）</span></span><br><span class="line"><span class="keyword">var</span> getOne = <span class="title class_">MainActivity</span>.<span class="property">getOne</span>;</span><br><span class="line"><span class="comment">// 重写实现</span></span><br><span class="line"></span><br><span class="line">getOne.<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// 先正常地走原函数的逻辑并获取返回值.</span></span><br><span class="line"><span class="keyword">var</span> result = <span class="variable language_">this</span>.<span class="title function_">getOne</span>();</span><br><span class="line"><span class="comment">// 打印返回值并篡改。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Get return value&quot;</span>, <span class="string">&quot;,value =&gt;&quot;</span>, result);</span><br><span class="line">result = <span class="string">&quot;Hacked!&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;It will be hooked to &quot;</span>, result);</span><br><span class="line"><span class="comment">// 返回我们所篡改的返回值</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2><span id="traceback">traceback</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 打印onCreate时的调用堆栈</span></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">var</span> classname = <span class="string">&quot;com.example.&quot;</span> + <span class="string">&quot;antifrida&quot;</span> + <span class="string">&quot;.MainActivity&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> onCreate = <span class="title class_">Java</span>.<span class="title function_">use</span>(classname).<span class="property">onCreate</span>;</span><br><span class="line">onCreate.<span class="title function_">overload</span>(<span class="string">&quot;android.os.Bundle&quot;</span>).<span class="property">implementation</span> = <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">args</span></span><br><span class="line"><span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;android.util.Log&quot;</span>).<span class="title function_">getStackTraceString</span>(</span><br><span class="line"><span class="title class_">Java</span>.<span class="title function_">use</span>(<span class="string">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line"><span class="variable language_">this</span>.<span class="title function_">onCreate</span>(args);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="hook-native-func">hook native func</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title class_">Java</span>.<span class="property">available</span>) &#123;</span><br><span class="line"><span class="comment">// Interceptor.attach第一参为hook的函数地址，第二参为导出函数</span></span><br><span class="line"><span class="comment">// Module.findExportByName通过函数导出的名字获得该函数地址，常与Interceptor打配合</span></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(</span><br><span class="line"><span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(</span><br><span class="line"><span class="string">&quot;libanti_frida.so&quot;</span>,</span><br><span class="line"><span class="string">&quot;Java_com_example_antifrida_MainActivity_HelloWorld&quot;</span></span><br><span class="line">),</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// Interceptor.attach的callback应该是只走onEnter和onLeave这两个函数，且入参固定为</span></span><br><span class="line"><span class="comment">// 其参数分别为入参和返回值</span></span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enter native HelloWorld ——&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retVal</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Leave native HelloWorld ——&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retVal : &quot;</span>, retVal);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;try to modify it to : &quot;</span>, <span class="string">&quot;hacked!&quot;</span>);</span><br><span class="line"><span class="comment">// 制作jni规范的string串，mark</span></span><br><span class="line"><span class="keyword">var</span> env = <span class="title class_">Java</span>.<span class="property">vm</span>.<span class="title function_">getEnv</span>(); <span class="comment">//获取env对象，即第一个参数</span></span><br><span class="line"><span class="keyword">var</span> jstrings = env.<span class="title function_">newStringUtf</span>(<span class="string">&quot;hacked!&quot;</span>); <span class="comment">//返回的是字符串指针，构造一个newStringUtf对象用来代替这个指针</span></span><br><span class="line">retVal.<span class="title function_">replace</span>(jstrings); <span class="comment">//替换返回值</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// hook其它导出函数，可隐去。</span></span><br><span class="line"><span class="keyword">var</span> addr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libanti_frida.so&quot;</span>, <span class="string">&quot;hello_world&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello_world addr : &quot;</span>, addr);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(addr, &#123;</span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Enter native hello_world ——&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retVal</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Leave native hello_world ——&quot;</span>);</span><br><span class="line"><span class="comment">// 返回的是字符串地址，用readUtf8String解释地址</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;retVal : &quot;</span>, retVal.<span class="title function_">readUtf8String</span>());</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// // 通过地址直接计算并hook</span></span><br><span class="line"><span class="keyword">var</span> str_name_so = <span class="string">&quot;libanti_frida.so&quot;</span>; <span class="comment">//需要hook的so名</span></span><br><span class="line"><span class="keyword">var</span> n_addr_func_offset = <span class="number">0x00001970</span>; <span class="comment">//需要hook的函数的偏移</span></span><br><span class="line"><span class="keyword">var</span> n_addr_so = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(str_name_so); <span class="comment">//加载到内存后 函数地址 = so地址 + 函数偏移</span></span><br><span class="line"><span class="keyword">var</span> n_addr_func = <span class="built_in">parseInt</span>(n_addr_so, <span class="number">16</span>) + n_addr_func_offset;</span><br><span class="line"><span class="comment">// 应该是使用规范</span></span><br><span class="line"><span class="keyword">var</span> ptr_func = <span class="keyword">new</span> <span class="title class_">NativePointer</span>(n_addr_func);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;hello_world addr : &quot;</span>, ptr_func);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(ptr_func, &#123;</span><br><span class="line"><span class="comment">//onEnter: 进入该函数前要执行的代码，其中args是传入的参数，一般so层函数第一个参数都是JniEnv，第二个参数是jclass，从第三个参数开始是我们java层传入的参数</span></span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;address hook start&quot;</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retval</span>) &#123;</span><br><span class="line"><span class="comment">//onLeave: 该函数执行结束要执行的代码，其中retval参数即是返回值</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;return&quot;</span>); <span class="comment">//返回值</span></span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;boot err&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="hook-win-dll">hook win dll</span></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//find dll address</span></span><br><span class="line"><span class="keyword">const</span> baseAddr = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(<span class="string">&quot;mydll.dll&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] mydll.dll baseAddr:&quot;</span> + baseAddr);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> encode = <span class="title function_">resolveAddress</span>(<span class="string">&quot;0x180011082&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line"><span class="string">&quot;[+] Module found encode addr: &quot;</span> +</span><br><span class="line"><span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;mydll.dll&quot;</span>, <span class="string">&quot;encode&quot;</span>)</span><br><span class="line">);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(encode, &#123;</span><br><span class="line"><span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Called encode: &quot;</span> + <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rip</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] a: &quot;</span> + args[<span class="number">0</span>].<span class="title function_">readAnsiString</span>(<span class="number">4</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] key: &quot;</span> + args[<span class="number">1</span>]); <span class="comment">// Plaintext// Length of data to en/decrypt</span></span><br><span class="line"><span class="comment">//dumpAddr(&quot;Input&quot;, args[0], args[1].toInt32());</span></span><br><span class="line"><span class="comment">//this.outptr = args[2]; // Store arg2 and arg3 in order to see when we leave the function</span></span><br><span class="line"><span class="comment">//this.outsize = args[3].toInt32();</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">onLeave</span>: <span class="keyword">function</span> (<span class="params">retVal</span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] Returned from func encode: &quot;</span> + <span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rip</span>);</span><br><span class="line">&#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">resolveAddress</span>(<span class="params">addr</span>) &#123;</span><br><span class="line"><span class="keyword">const</span> base = <span class="title function_">ptr</span>(<span class="string">&quot;0x180000000&quot;</span>); <span class="comment">//ter the base address of jvm.dll as seen in your favorite disassembler</span></span><br><span class="line"><span class="keyword">const</span> offset = <span class="title function_">ptr</span>(addr).<span class="title function_">sub</span>(base); <span class="comment">//Calculate offset in memory from base address in disassembler database</span></span><br><span class="line"><span class="keyword">const</span> result = baseAddr.<span class="title function_">add</span>(offset); <span class="comment">//Add current memory base address to offset of function to monitor</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;[+] New addr=&quot;</span> + result); <span class="comment">// Write location of function in memory to console</span></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">dumpAddr</span>(<span class="params">info, addr, size</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (addr.<span class="title function_">isNull</span>()) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Data dump &quot;</span> + info + <span class="string">&quot; :&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> buf = addr.<span class="title function_">readByteArray</span>(size);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(</span><br><span class="line"><span class="title function_">hexdump</span>(buf, &#123; <span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">length</span>: size, <span class="attr">header</span>: <span class="literal">true</span>, <span class="attr">ansi</span>: <span class="literal">true</span> &#125;)</span><br><span class="line">);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;frida script&lt;/th&gt;
&lt;th&gt;status&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;hook java Android Api&lt;/td&gt;
&lt;td&gt;√&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;</summary>
      
    
    
    
    
    <category term="Android" scheme="https://airrcat.github.io/tags/Android/"/>
    
    <category term="Frida" scheme="https://airrcat.github.io/tags/Frida/"/>
    
  </entry>
  
  <entry>
    <title>hash拓展攻击与例题hash_append</title>
    <link href="https://airrcat.github.io/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/"/>
    <id>https://airrcat.github.io/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/</id>
    <published>2024-04-29T08:28:58.000Z</published>
    <updated>2024-04-30T01:30:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>hash 长度拓展攻击是一个效果还挺“惊人”的攻击。简单的来说，他能在只知道“一部分”密文的情况下，获得和“完整”密文相同的 hash 结果。只要满足条件，这个攻击现在对 MD5、SHA1、SHA256、SHA512 和 SM3 都能生效。</p><p>这个攻击的原理是目前这些主流哈希计算的一个薄弱点。这些哈希计算是基于对明文的分组。比如 64 个字节为一组，不满 64 的倍数则 padding 为 64 位。<br>对于每一组的明文来说，它需要与一组“向量”混合加密、输出为一个 hash。而如果不止一组明文，每组明文的 hash 会作为下一组的“向量”，这里的向量可理解为会变的加密密钥。</p><p>于是，在分组加密的情况下，实际上是：<br>① 每组独立做明文+向量混合运算<br>② 向量由上一组的运算结果决定（等于）<br>这里要留意这个“独立”。因为这实际上隐含了一个意思：<br>假设有一个八个分组的明文，我们不需要知道前七组的明文，只需要知道最后一组——以及第七组（前七组）的运算结果，就能算出这第八组——也就是整个明文的哈希结果。</p><p>更进一步的，把前七组的明文看作 flag，第八组的明文看作独立 padding、append 拓展数据、salt 盐，那么这就是长度<strong>拓展</strong>攻击了。</p><p>以 MD5 为例子：<img src="/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/%E5%8F%82%E8%80%83.png"></p><p>放到例题中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3, func</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">    flag = f.read()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MySecretInfo = os.urandom(<span class="number">64</span>) <span class="comment"># 有密文</span></span><br><span class="line"></span><br><span class="line">HashValue = sm3.sm3_hash(func.bytes_to_list(MySecretInfo))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;MySecretInfo Hash:&#x27;</span>, HashValue) <span class="comment"># 有密文hash</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AppendData = <span class="built_in">bytes</span>.fromhex(<span class="built_in">input</span>(<span class="string">&#x27;Input AppendData: &#x27;</span>)) <span class="comment"># salt、append数据</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(AppendData) == <span class="number">64</span></span><br><span class="line"></span><br><span class="line">NewSecretInfo = MySecretInfo + AppendData</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GeneratedHash = <span class="built_in">input</span>(<span class="string">&#x27;Input NewSecretInfo Hash: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">NewHashValue = sm3.sm3_hash(func.bytes_to_list(NewSecretInfo))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(NewHashValue)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> GeneratedHash == NewHashValue:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Nope&#x27;</span>)</span><br></pre></td></tr></table></figure><p>sm3 的分组标准是 64 位一组，因此 secret 和 appendData 是分别两组，基本要求满足。<br>知晓 secret 的 hash，appendData 自己构造，这就很清晰了。<br>但落到实现上：①gmssl 库会默认在加密时做一个 64 位的 padding② 我们如何将 secret 的 hash 构造成加密的向量？<br>② 可以翻阅库实现解决：<br>首先是 padding 部分：<br><img src="/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image.png" alt="alt text"><br>而后是向量 Vector<br><img src="/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image-1.png" alt="alt text"><br>这里我们只需要为这个函数添加一个新的参数，作为 V[0]的初始值即可（同时记得 group_count -1）<br>参考攻击实现：<br><a href="https://github.com/hjzin/SM3LengthExtensionAttack">https://github.com/hjzin/SM3LengthExtensionAttack</a><br>而对于 ①，这里很有趣<br>我们之前的实现逻辑是：<br>知道 Hash(Secret)，知道 append，可知 Hash(Secret+append)<br>而默认 padding 时：Hash(Secret+padding)，知道 append，可知 Hash(Secret+append+padding)<br>发现了么？这两次 hash 的值似乎对不上。</p><p>但这里，我要说拓展攻击，是一个很“模板”的攻击。这里不要被 append 这个名词所束缚。它能是 append，它能是 salt，甚至它也能是“padding”——是第一次 hash 的“padding”。<br>阅读 padding 部分的代码可知这个 padding 是很朴素的一个 padding，有变化，但变化不多。明文为一组时 padding 固定是：<br>b’\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00’<br>明文为两组时 padding 固定是：<br>b’\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00’<br>仅仅在末尾会有一些改变。<br>那么我们可以把用第一次 padding 的值去 append，这样就有：<br>Hash(Secret+padding1)，知道 append，可知 Hash(Secret+padding1+padding2)<br>bingo~攻击完成 √<br>参考 exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Time：2019/10/12</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Author: hhzjj</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">@Description：SM3长度扩展攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    1.随机生成一个secret，算出secret的hash值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    2.根据hash值推出第一次压缩之后各个寄存器里的值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    3.在secret+padding之后附加一段消息，用上一步寄存器里的值作为IV去加密附加的那段消息，得到hash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    4.用sm3去加密secret+padding+m&#x27;，得到hash</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    5.第3步和第4步得到的hash值应该相等</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> gmssl <span class="keyword">import</span> sm3, func</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> my_sm3</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">secret = <span class="string">&quot;3131313131313131313131313131313131313131313131313131313131313131&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a = func.bytes_to_list(<span class="built_in">bytes</span>(secret, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">secret_hash = <span class="string">&quot;f6dd54733108fa21bb08102f367787ed9ac388b8bc8311a1e999d5b5d09ba0a6&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(secret_hash)</span><br><span class="line"></span><br><span class="line">secret_len = <span class="built_in">len</span>(secret)</span><br><span class="line"></span><br><span class="line">append_m = <span class="string">b&#x27;\x80\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">pad_str = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">pad = []</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(my_sm3.sm3_hash2(func.bytes_to_list(secret.encode()+append_m)))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_guess_hash</span>(<span class="params">old_hash, secret_len, append_m</span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 攻击关键在于重设vector</span></span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    SM3长度扩展攻击</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param old_hash: secret的hash值</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param secret_len: secret的长度</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :param append_m: 附加的消息</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    :return: hash(secret + padding + append_m)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    vectors = []</span><br><span class="line"></span><br><span class="line">    message = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将old_hash分组，每组8个字节, 并转换为整数</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> r <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(old_hash), <span class="number">8</span>):</span><br><span class="line"></span><br><span class="line">        vectors.append(<span class="built_in">int</span>(old_hash[r:r + <span class="number">8</span>], <span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # 伪造消息</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> secret_len &gt; <span class="number">64</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">int</span>(secret_len / <span class="number">64</span>) * <span class="number">64</span>):</span><br><span class="line"></span><br><span class="line">            message += <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, secret_len):</span><br><span class="line"></span><br><span class="line">        message += <span class="string">&#x27;a&#x27;</span></span><br><span class="line"></span><br><span class="line">    message = func.bytes_to_list(<span class="built_in">bytes</span>(message, encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># message = padding(message)</span></span><br><span class="line"></span><br><span class="line">    message.extend(func.bytes_to_list(</span><br><span class="line"></span><br><span class="line">        append_m))</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;meesage len&quot;</span>, <span class="built_in">len</span>(message))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> my_sm3.sm3_hash(message, vectors)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">guess_hash = generate_guess_hash(secret_hash, secret_len, append_m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(guess_hash)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;hash 长度拓展攻击是一个效果还挺“惊人”的攻击。简单的来说，他能在只知道“一部分”密文的情况下，获得和“完整”密文相同的 hash 结果。只要满足条件，这个攻击现在对 MD5、SHA1、SHA256、SHA512 和 SM3 都能生效。&lt;/p&gt;
&lt;p&gt;这个攻击的原理是目</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
    <category term="Crypto" scheme="https://airrcat.github.io/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>xyctf2023-re-writeup</title>
    <link href="https://airrcat.github.io/2024/04/28/xyctf2023-re-writeup/"/>
    <id>https://airrcat.github.io/2024/04/28/xyctf2023-re-writeup/</id>
    <published>2024-04-28T14:33:07.000Z</published>
    <updated>2024-04-29T01:54:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>感觉第一周最好玩，没了。</p><h2><span id="聪明的信使">聪明的信使</span></h2><p>九位凯撒。<br>flag{Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!}</p><h2><span id="给阿姨倒一杯卡布奇诺">给阿姨倒一杯卡布奇诺</span></h2><p>代码没去符号，一切都很明显，不多赘述<br><img src="/2024/04/28/xyctf2023-re-writeup/image.png" alt="alt text"><br>加密是魔改 xxtea。魔改了三处，其中还涉及一个全局变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    v0.value ^= <span class="number">0x5F797274</span></span><br><span class="line">    v1.value ^= <span class="number">0x64726168</span></span><br><span class="line">    delta = <span class="number">0x6E75316C</span></span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line">    total = c_uint32(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        total.value += delta</span><br><span class="line">        v0.value += ((v1.value &lt;&lt; <span class="number">4</span>) + k0) ^ (v1.value +                                          total.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1) ^ (total.value + i)</span><br><span class="line">        v1.value += ((v0.value &lt;&lt; <span class="number">4</span>) + k2) ^ (v0.value +                                        total.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3) ^ (total.value + i)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(v0.value), <span class="built_in">hex</span>(v1.value))</span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line">data1 = <span class="number">0x5F797274</span></span><br><span class="line">data2 = <span class="number">0x64726168</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">v, k</span>):</span><br><span class="line">    <span class="keyword">global</span> data1</span><br><span class="line">    <span class="keyword">global</span> data2</span><br><span class="line">    v0, v1 = c_uint32(v[<span class="number">0</span>]), c_uint32(v[<span class="number">1</span>])</span><br><span class="line">    t_1 = v[<span class="number">0</span>]</span><br><span class="line">    t_2 = v[<span class="number">1</span>]</span><br><span class="line">    delta = <span class="number">0x6E75316C</span></span><br><span class="line">    k0, k1, k2, k3 = k[<span class="number">0</span>], k[<span class="number">1</span>], k[<span class="number">2</span>], k[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">    total = c_uint32(delta * <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">31</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">        v1.value -= ((v0.value &lt;&lt; <span class="number">4</span>) + k2) ^ (v0.value +                                      total.value) ^ ((v0.value &gt;&gt; <span class="number">5</span>) + k3) ^ (total.value + i)</span><br><span class="line">        v0.value -= ((v1.value &lt;&lt; <span class="number">4</span>) + k0) ^ (v1.value +                                     total.value) ^ ((v1.value &gt;&gt; <span class="number">5</span>) + k1) ^ (total.value + i)</span><br><span class="line">        total.value -= delta</span><br><span class="line">        <span class="comment"># print(hex(v0.value), hex(v1.value))</span></span><br><span class="line">    v0.value ^= data1</span><br><span class="line">    v1.value ^= data2</span><br><span class="line">    data1 = t_1</span><br><span class="line">    data2 = t_2</span><br><span class="line">    <span class="keyword">return</span> v0.value, v1.value</span><br><span class="line"></span><br><span class="line"><span class="comment"># test</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># value = [0x880012C7, 0x58EE54]</span></span><br><span class="line">    value = [<span class="number">0x9B28ED45</span>, <span class="number">0x145EC6E9</span>, <span class="number">0x5B27A6C3</span>, <span class="number">0xE59E75D5</span>,</span><br><span class="line">             <span class="number">0xE82C2500</span>, <span class="number">0xA4211D92</span>, <span class="number">0xCD8A4B62</span>, <span class="number">0xA668F440</span>]</span><br><span class="line">    key = [<span class="number">0x65766967</span>, <span class="number">0x756F795F</span>, <span class="number">0x7075635F</span>, <span class="number">0x6165745F</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 解密</span></span><br><span class="line">    flag2 = <span class="string">b&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(value), <span class="number">2</span>):</span><br><span class="line">        res = decrypt(value[i:i+<span class="number">2</span>], key)</span><br><span class="line">        flag2 += res[<span class="number">0</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>) + res[<span class="number">1</span>].to_bytes(<span class="number">4</span>, <span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">hex</span>(res[<span class="number">1</span>]))</span><br><span class="line">    <span class="built_in">print</span>(flag2)</span><br></pre></td></tr></table></figure><h2><span id="何须相思煮余年">何须相思煮余年</span></h2><p>数据开头是 0x55，结尾是 0xc3，可认为是汇编机器码<br><img src="/2024/04/28/xyctf2023-re-writeup/image-2.png" alt="alt text"><br>转化为 hex 数据后 ida 查看（注意这里如果复制到 010editor 后使用 paste from hex text 会吞一些数据。）<br><img src="/2024/04/28/xyctf2023-re-writeup/image-3.png" alt="alt text"><br>直接解即可。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-4.png" alt="alt text"><br>b’XYCTF{5b3e07567a9034d06851475481507a75}’</p><h2><span id="今夕是何年">今夕是何年</span></h2><p>ida 和 die 都认为是未知架构。搜索架构码 or 搜索 cpu 特征可知可能是龙芯架构。<br>配置 qemu 环境模拟执行<br><img src="/2024/04/28/xyctf2023-re-writeup/image-5.png" alt="alt text"></p><h2><span id="馒头">馒头</span></h2><p><img src="/2024/04/28/xyctf2023-re-writeup/image-6.png" alt="alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">tree = [<span class="number">0x8DE</span>, <span class="number">0x395</span>, <span class="number">0x1BE</span>, <span class="number">0x0D9</span>, <span class="number">0x06A</span>, <span class="number">0x033</span>, <span class="number">0x014</span>, <span class="number">0x00F</span>, <span class="number">0x011</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0E5</span>, <span class="number">0x072</span>, <span class="number">0x010</span>, <span class="number">0x00B</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x1D7</span>, <span class="number">0x0E9</span>, <span class="number">0x074</span>, <span class="number">0x00E</span>, <span class="number">0x00D</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0EE</span>, <span class="number">0x076</span>, <span class="number">0x00C</span>, <span class="number">0x007</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x549</span>, <span class="number">0x22D</span>, <span class="number">0x0F8</span>, <span class="number">0x07B</span>, <span class="number">0x006</span>, <span class="number">0x018</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x135</span>, <span class="number">0x089</span>, <span class="number">0x043</span>, <span class="number">0x003</span>, <span class="number">0x005</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0AC</span>, <span class="number">0x054</span>, <span class="number">0x004</span>, <span class="number">0x001</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x31C</span>, <span class="number">0x17F</span>, <span class="number">0x0BA</span>, <span class="number">0x059</span>, <span class="number">0x002</span>, <span class="number">0x008</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0C5</span>, <span class="number">0x061</span>, <span class="number">0x030</span>, <span class="number">0x017</span>, <span class="number">0x00A</span>, <span class="number">0x015</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x19D</span>, <span class="number">0x0CB</span>, <span class="number">0x065</span>, <span class="number">0x016</span>, <span class="number">0x009</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x0D2</span>, <span class="number">0x068</span>, <span class="number">0x013</span>, <span class="number">0x012</span>]</span><br><span class="line"></span><br><span class="line">fake_flag = <span class="string">&quot;1&quot;</span>*<span class="number">24</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(fake_flag)</span><br><span class="line"></span><br><span class="line">len_tree = <span class="built_in">len</span>(tree)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(len_tree)</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0</span>] * <span class="number">25</span></span><br><span class="line"></span><br><span class="line">data = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">dcount = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">chr</span>(<span class="number">0x65</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(len_tree-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> tree[i] &lt; <span class="number">25</span>:</span><br><span class="line"></span><br><span class="line">        data = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        dcount = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> tree[i] &lt; <span class="number">0x7f</span>:</span><br><span class="line"></span><br><span class="line">        flag[tree[i+dcount]] = tree[i]</span><br><span class="line"></span><br><span class="line">        data = tree[i]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        dcount += <span class="number">2</span></span><br><span class="line"></span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">elif</span> count &gt; <span class="number">0</span>:</span><br><span class="line"></span><br><span class="line">        flag[tree[i+dcount]] = tree[i] - data</span><br><span class="line"></span><br><span class="line">        <span class="comment"># flag.append(tree[i] - data)</span></span><br><span class="line"></span><br><span class="line">        data += tree[i]</span><br><span class="line"></span><br><span class="line">        count -= <span class="number">1</span></span><br><span class="line"></span><br><span class="line">        dcount += <span class="number">2</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(bytes(flag), len(flag))</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">sum</span>(flag)))</span><br><span class="line"></span><br><span class="line">flag = [<span class="number">0xac</span> - <span class="number">0x54</span>, <span class="number">0x59</span>, <span class="number">0x43</span>, <span class="number">0x54</span>, <span class="number">0x89</span>-<span class="number">0x43</span>, <span class="number">0x7b</span>, <span class="number">0xee</span>-<span class="number">0x76</span>, <span class="number">0xba</span>-<span class="number">0x59</span>, <span class="number">0xcb</span>-<span class="number">0x65</span>, <span class="number">0x61</span>-<span class="number">0x30</span>, <span class="number">0xe5</span>-<span class="number">0x72</span>, <span class="number">0x76</span>, <span class="number">0xe9</span>-<span class="number">0x74</span>,</span><br><span class="line"></span><br><span class="line">        <span class="number">0x74</span>, <span class="number">0x6a</span>-<span class="number">0x33</span>, <span class="number">0x72</span>, <span class="number">0xd9</span>-<span class="number">0x6a</span>, <span class="number">0xd2</span>-<span class="number">0x68</span>, <span class="number">0x68</span>, <span class="number">0x33</span>, <span class="number">0xc5</span>-<span class="number">0x61</span>, <span class="number">0x65</span>, <span class="number">0x30</span>, <span class="number">0xf8</span>-<span class="number">0x7b</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2><span id="喵喵喵的-flag-碎了一地">喵喵喵的 flag 碎了一地</span></h2><p>推理游戏<br><img src="/2024/04/28/xyctf2023-re-writeup/image-7.png" alt="alt text"><br><img src="/2024/04/28/xyctf2023-re-writeup/image-8.png" alt="alt text"><br>同个函数有不被解析的部分<br><img src="/2024/04/28/xyctf2023-re-writeup/image-9.png" alt="alt text"></p><h2><span id="你是真的大学生吗">你是真的大学生吗？</span></h2><p>汇编阅读。<br>相邻两位依次异或<br><img src="/2024/04/28/xyctf2023-re-writeup/image-10.png" alt="alt text"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cipher = [<span class="number">0x76</span>, <span class="number">0x0E</span>, <span class="number">0x77</span>, <span class="number">0x14</span>, <span class="number">0x60</span>, <span class="number">0x06</span>, <span class="number">0x7D</span>, <span class="number">0x04</span>, <span class="number">0x6B</span>, <span class="number">0x1E</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">0x41</span>, <span class="number">0x2A</span>, <span class="number">0x44</span>, <span class="number">0x2B</span>, <span class="number">0x5C</span>, <span class="number">0x03</span>, <span class="number">0x3B</span>, <span class="number">0x0B</span>, <span class="number">0x33</span>, <span class="number">0x05</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)-<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line"></span><br><span class="line">    cipher[i] = (cipher[i] ^ cipher[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cipher))</span><br></pre></td></tr></table></figure><p>输出会有一位偏移，修复一下即可。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-11.png" alt="alt text"><br>xyctf{you_know_8086}</p><h2><span id="砸核桃">砸核桃</span></h2><p>NsPack，esp 定律或者附加下断点脱壳<br><img src="/2024/04/28/xyctf2023-re-writeup/image-12.png" alt="alt text"><br>esp：<br>pushad 后对 esp 的地址下硬件访问断点，待到 popad 或代码到 0x401000+后使用 dump 插件 dump 并调整<br><img src="/2024/04/28/xyctf2023-re-writeup/image-13.png" alt="alt text"><br>最后发现是一个异或</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">key = <span class="string">b&quot;this_is_not_flag&quot;</span></span><br><span class="line"></span><br><span class="line">cipher = [<span class="number">0x00000012</span>, <span class="number">0x00000004</span>, <span class="number">0x00000008</span>, <span class="number">0x00000014</span>, <span class="number">0x00000024</span>, <span class="number">0x0000005C</span>, <span class="number">0x0000004A</span>, <span class="number">0x0000003D</span>, <span class="number">0x00000056</span>, <span class="number">0x0000000A</span>, <span class="number">0x00000010</span>, <span class="number">0x00000067</span>, <span class="number">0x00000000</span>, <span class="number">0x00000041</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000046</span>, <span class="number">0x0000005A</span>, <span class="number">0x00000044</span>, <span class="number">0x00000042</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>,</span><br><span class="line"></span><br><span class="line">          <span class="number">0x00000044</span>, <span class="number">0x00000072</span>, <span class="number">0x0000000C</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000040</span>, <span class="number">0x0000003E</span>, <span class="number">0x0000004B</span>, <span class="number">0x0000005F</span>, <span class="number">0x00000002</span>, <span class="number">0x00000001</span>, <span class="number">0x0000004C</span>, <span class="number">0x0000005E</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000017</span>, <span class="number">0x0000006E</span>, <span class="number">0x0000000C</span>, <span class="number">0x00000016</span>, <span class="number">0x00000068</span>, <span class="number">0x0000005B</span>, <span class="number">0x00000012</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">42</span>):</span><br><span class="line"></span><br><span class="line">    cipher[i] ^= key[i % <span class="built_in">len</span>(key)]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(cipher))</span><br></pre></td></tr></table></figure><h2><span id="babyunity">babyUnity</span></h2><p><strong>该题可直接用 il2cppdumper 脱</strong><br>脱完后建议直接用 dnspy 分析 assembly，可看见几个函数的偏移<br><img src="/2024/04/28/xyctf2023-re-writeup/image-14.png" alt="alt text"><br>在 ida 里直接 ctrl+g 飞过去，可看得函数逻辑（有些是空函数，空就别管）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cipher = <span class="string">b&quot;\x58\x49\x63\x4B\x59\x4A\x55\x38\x42\x75\x68\x3A\x55\x65\x56\x3A\x42\x4B\x4E\x7B\x55\x5B\x4A\x76\x55\x4C\x3F\x3F\x56\x75\x5A\x3F\x43\x58\x4A\x3B\x41\x58\x5E\x7B\x41\x65\x5D\x67\x41\x5B\x5D\x67\x55\x65\x63\x62\x40\x4B\x5D\x65\x69\x5E\x32\x32&quot;</span></span><br><span class="line">cipher = <span class="built_in">list</span>(cipher)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(cipher)):</span><br><span class="line">    cipher[i] ^= <span class="number">0xf</span></span><br><span class="line">cipher = base64.b64decode(<span class="built_in">bytes</span>(cipher))</span><br><span class="line"><span class="built_in">print</span>(cipher)</span><br></pre></td></tr></table></figure><p>XYCTF{389f6900-e12d-4c54-a85d-64a54af9f84c}</p><h2><span id="debugme">DebugMe</span></h2><p><img src="/2024/04/28/xyctf2023-re-writeup/image-15.png" alt="alt text"><br>JEB 打开，程序被 vm 混淆<br>MainActivity 里有暴露 cipher 数组，程序无输入，点击按键后默认只弹出无用信息，同时相邻部分的另一个 Toast 弹出有和 cipher 有关的参数。可推测需通过调试篡改到弹出 flag 的逻辑。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-16.png" alt="alt text"><br>追踪调用：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-17.png" alt="alt text"><br>分析 What 类或 x 的交叉引用树，可知该类是做了 tea 加解密类。x 调用了解密算法<br>key 的初始化：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-18.png" alt="alt text"><br>tea 算法特征：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-19.png" alt="alt text"><br>除此之外还进行了 base64 和稍微的变形,並修复了 cipher 的 base64 格式（有一个 url 格式的%2b 需替换为+）<br><img src="/2024/04/28/xyctf2023-re-writeup/image-20.png" alt="alt text"><br>这里我静态不知为何解不出，那么尝试用 frida 动态解。<br>frida 脚本思路是：hook 一个被执行的函数，篡改为 What.x 解密函数并使用修复后的密文作为参数。最终选择 hook 了 Debug 的 check 函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">// 检查java runtime可用性</span><br><span class="line"></span><br><span class="line">// frida -U -f com.xyctf.ezapk -l .\hook_1.js</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (Java.available) &#123;</span><br><span class="line"></span><br><span class="line">    Java.perform(function () &#123;</span><br><span class="line"></span><br><span class="line">        var What = Java.use(<span class="string">&quot;com.xyctf.ezapk.What&quot;</span>);</span><br><span class="line"></span><br><span class="line">        var x = What.x;</span><br><span class="line"></span><br><span class="line">        x.implementation = function (arg) &#123;</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&quot;hook in&quot;</span>);</span><br><span class="line"></span><br><span class="line">            var retVal = this.x(arg);</span><br><span class="line"></span><br><span class="line">            console.log(retVal);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> retVal;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        var Debug = Java.use(<span class="string">&quot;android.os.Debug&quot;</span>);</span><br><span class="line"></span><br><span class="line">        var isDebuggerConnected = Debug.isDebuggerConnected;</span><br><span class="line"></span><br><span class="line">        isDebuggerConnected.implementation = function () &#123;</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&quot;in debug check&quot;</span>);</span><br><span class="line"></span><br><span class="line">            var a = What.x(</span><br><span class="line"></span><br><span class="line">                <span class="string">&quot;WikFhRxyYjoSJ8mMbM3fRwty/74bc7Ip7ojqenHaSqc9wDv3JDG9XfV6xEiC7Eg1RWTUa4LaM+D0W+PKanSA5w==&quot;</span></span><br><span class="line"></span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            console.log(<span class="string">&quot;a&quot;</span>);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> false;</span><br><span class="line"></span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">else</span> console.log(<span class="string">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure><h2><span id="easy-language">easy language</span></h2><p>搜字符串容易判断是 aes ecb 加密，但 key 很难找，且没有 aes 常量暴露<br><img src="/2024/04/28/xyctf2023-re-writeup/image-21.png" alt="alt text"><br>但是，又发现有 CryptoAPI 的字样<br><img src="/2024/04/28/xyctf2023-re-writeup/image-22.png" alt="alt text"><br>猜测是动态注册调用，尝试 hook<br><img src="/2024/04/28/xyctf2023-re-writeup/image-23.png" alt="alt text"><br>确实使用了，但是 key 试了 RUUU 和 KSSM 都不对<br>但是又看到底下的 xyctf 和 abctf，长度刚好 16 位，满足 aeskey 的要求<br>尝试：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">cipher1 = <span class="string">&quot;adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class="line"></span><br><span class="line">cipher2 = <span class="string">&quot;qBr4adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class="line"></span><br><span class="line">cipher3 = <span class="string">&quot;RZy/zVEWMFxaCbzChAg8x26XZYr51rNVnM+zBoBp3gya93L9QQXpFRin1JE33vyx&quot;</span></span><br><span class="line"></span><br><span class="line">tmp = <span class="string">&quot;oVFXvP32lAb6S1bs5xj2mg==&quot;</span></span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;welcometoxyctf!!&quot;</span></span><br><span class="line"></span><br><span class="line">a = base64.b64decode(cipher3)</span><br><span class="line"></span><br><span class="line">b = AES.new(key, AES.MODE_ECB)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(b.decrypt(a)</span><br></pre></td></tr></table></figure><p>XYCTF{y0u_@r3_v3ry_g00d_a7_E_l@ngu@ge}</p><h2><span id="ez_enc">ez_enc</span></h2><p>本题的其它计算都不算重要，重要的是 mod 20.<br>加密带有 mod 20，会丢失信息，因此不能单纯逆推。<br>而事实上，mod 20 不仅是一个解题限制，更是解题线索.一个可见字符的大小范围是 0x20-0x7e。而当中 mod 20，同一个数字约有 5-6 种的可能。<br>同时加密算法中，flag[i]同时受 flag[i]自己和 flag[i+1]影响，也就是受前一位解密的影响。<br>也就是说我们从最后一位往前推，每一位都有约 5 种可能，而每一位都是上一位推理的继续。那么事实上，这个就是以 flag 最后一位为根节点，以 mod 20 为运算推理出的一个树，某一条能走到树最后一层的路径就是最终的 flag。<br>那么解题的关键找到了。剩下的就是让解题变为可行，这里分析题目有几个约束可用：<br>①flag[i]和 flag[i+1]强相关，如何 flag[i+1]，也就是上一位的值不对，那 flag[i]大概率也不对<br>②flag[i]正确的情况为：flag[i]在推理时小于 20（这里的 flag[i]是由 flag[i+1]推出的 flag[i]%20）且 flag[i]推理完毕后&gt;&#x3D;0x20,&lt;&#x3D;0x7e<br>那么写一个递归算法实现这个思路：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">cipher = <span class="built_in">bytes</span>.fromhex(</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;2724170b5003c80c1f173655cb2de9320e1126020c07fc273d2ded3559eb3c3ee47d&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#lag&#123;!_r3ea11y_w4nt_@_cu7e_s1$ter&#125;</span></span><br><span class="line"></span><br><span class="line">cipher = <span class="built_in">list</span>(cipher)</span><br><span class="line"></span><br><span class="line">key = <span class="string">b&quot;IMouto&quot;</span></span><br><span class="line"></span><br><span class="line">flag = []</span><br><span class="line"></span><br><span class="line">flag.append(cipher[-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">trace_back</span>(<span class="params">flag:<span class="built_in">list</span>,p:<span class="built_in">int</span></span>):</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 逆推求解cipher[p]的值</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#print(bytes(flag),p)</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> p == -<span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">        flag.reverse()</span><br><span class="line"></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>(flag))</span><br><span class="line"></span><br><span class="line">        flag.reverse()</span><br><span class="line"></span><br><span class="line">        flag.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    a = cipher[p]</span><br><span class="line"></span><br><span class="line">    a ^= key[p%<span class="number">6</span>]</span><br><span class="line"></span><br><span class="line">    a -= flag[-<span class="number">1</span>] <span class="comment"># 减去上一个推得的值，也就是减去cipher[p+1].此时的值是cipher[p]_原初%20</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> a &gt;= <span class="number">20</span> <span class="keyword">or</span> a &lt; <span class="number">0</span>: <span class="comment"># 上一个值不合适，pop</span></span><br><span class="line"></span><br><span class="line">        flag.pop()</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">7</span>):</span><br><span class="line"></span><br><span class="line">            b = a + i * <span class="number">20</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> b &gt;= <span class="number">0x20</span> <span class="keyword">and</span> b &lt;= <span class="number">0x7f</span>:</span><br><span class="line"></span><br><span class="line">                <span class="comment">#print(p,b)</span></span><br><span class="line"></span><br><span class="line">                flag.append(b)</span><br><span class="line"></span><br><span class="line">                trace_back(flag,p-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 当进行到最后的时候pop出来</span></span><br><span class="line"></span><br><span class="line">    flag.pop()</span><br><span class="line"></span><br><span class="line">trace_back(flag,<span class="built_in">len</span>(cipher)-<span class="number">2</span>)</span><br></pre></td></tr></table></figure><p><img src="/2024/04/28/xyctf2023-re-writeup/image-24.png" alt="alt text"></p><h2><span id="ezcube">ezcube</span></h2><p>魔方，约束右手公式和 12 步<br>在网上搜到了同款初始情况：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-25.png" alt="alt text"><br><a href="http://i-mofang.com/ba_07.shtml">魔方入门解法第 7 步：调整顶层棱块位置 - 爱魔方 (i-mofang.com)</a></p><h2><span id="ezmath">ezmath</span></h2><p>我认为出得很差的一个题。<br>python 3.8 打包为 exe，使用 python3.8 环境下的 pyinstxtractor.py 解包，使用 uncompyle6 反编译。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">flag = [<span class="built_in">ord</span>(i) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">input</span>(<span class="string">&#x27;flag:&#x27;</span>)]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) == <span class="number">32</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">sum</span>([flag[<span class="number">23</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">23</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">12</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">12</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">1</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">24</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">222</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">22</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">22</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">31</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">31</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">26</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">26</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">9</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">178</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">29</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">232</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">17</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">17</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">23</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">150</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">6</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">226</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">7</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">110</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">19</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">19</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">2</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">176</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">10</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">10</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">12</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">198</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">24</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">24</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">9</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">9</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">3</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">168</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">8</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">2</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">134</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">14</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">14</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">13</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">170</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">4</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">4</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">10</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">142</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">27</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">27</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">15</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">15</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">15</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">224</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">16</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">16</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">11</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">230</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">1</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">178</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">28</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">28</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">5</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">246</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">17</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">168</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">30</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">30</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">21</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">220</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">22</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">212</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">16</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">232</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">25</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">25</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">4</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">140</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">31</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">250</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">28</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">150</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">11</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">11</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">13</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">13</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">14</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">234</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">7</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">7</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">174</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">3</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">3</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">25</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">242</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">29</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">29</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">5</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">5</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">30</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">142</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">26</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">170</span>)]) - <span class="built_in">sum</span>([flag[<span class="number">19</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">176</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">0</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">0</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">27</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">168</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">20</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">20</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">20</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">212</span>)]) + <span class="built_in">sum</span>([flag[<span class="number">21</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">21</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">6</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">6</span>])]) + <span class="built_in">sum</span>([flag[<span class="number">18</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(flag[<span class="number">18</span>])]) - <span class="built_in">sum</span>([flag[<span class="number">18</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">178</span>)]) + <span class="number">297412</span> == <span class="number">0</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;yes&#x27;</span>)</span><br></pre></td></tr></table></figure><p>简单格式处理后如下：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-26.png" alt="alt text"><br>flag 长 32 位，<br>sum &#x3D; 0<br>for i in range(32):<br>sum +&#x3D; flag[i]_ flag[i]<br>sum +&#x3D; flag[i]_ （100-300 的一个偶数）<br>sum &#x3D; -297412<br>可能按照出题人的想法，这题的解法是依据题目简介的提示：初中数学，配平。<br>A^2 + 2AB +B^2 &#x3D; X。这题每一位 flag 都有平方，也都有乘以一个偶数，那假设每位 flag 是 A，A 乘的那个偶数就是另外的 2B，由此可以推出 flag<br><img src="/2024/04/28/xyctf2023-re-writeup/image-27.png" alt="alt text"><br>那这不是很扯吗，题目的解是基于一个很低级的假设。大伙是来做逆向的，不是脑洞数学。</p><h2><span id="ezrand">ezrand</span></h2><p>随机种子随机数算法，因为随机种子根据 time64 得到，而 time64 返回值落在 0xffff 内，所以可爆。<br>中间随机数相关的复杂算法 ida 可能还原不正确，需要按汇编理解。本质上是 rand()%0xff</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> __cdecl <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">const</span> <span class="type">char</span> **argv, <span class="type">const</span> <span class="type">char</span> **envp)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">long</span> v3; <span class="comment">// rbx</span></span><br><span class="line"></span><br><span class="line">    <span class="type">unsigned</span> <span class="type">int</span> v4;  <span class="comment">// ax</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v5;           <span class="comment">// edi</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> i;           <span class="comment">// rsi</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rand_value;   <span class="comment">// eax</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> cipher[<span class="number">7</span>];    <span class="comment">// [rsp+20h] [rbp-50h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> v10;         <span class="comment">// [rsp+3Ch] [rbp-34h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v11;          <span class="comment">// [rsp+3Dh] [rbp-33h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> *input;      <span class="comment">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> v13;         <span class="comment">// [rsp+50h] [rbp-20h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v14;          <span class="comment">// [rsp+58h] [rbp-18h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> v15;          <span class="comment">// [rsp+5Ch] [rbp-14h]</span></span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> v16;         <span class="comment">// [rsp+5Eh] [rbp-12h]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    v13 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    input = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v14 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v15 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v16 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">0</span>] = <span class="number">0xEA6C0C5D</span>;</span><br><span class="line"></span><br><span class="line">    v11 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">1</span>] = <span class="number">0x34FC1946</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">2</span>] = <span class="number">0x72362B2</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">3</span>] = <span class="number">0xFB6E2262</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">4</span>] = <span class="number">0xA9F2E8B4</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">5</span>] = <span class="number">0x86211291</span>;</span><br><span class="line"></span><br><span class="line">    cipher[<span class="number">6</span>] = <span class="number">0x43E98EDB</span>;</span><br><span class="line"></span><br><span class="line">    v10 = <span class="number">77</span>;</span><br><span class="line"></span><br><span class="line">    v4 = _time64(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    srand(v4);</span><br><span class="line"></span><br><span class="line">    v5 = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> rand_arr[<span class="number">29</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// for (i = 0; i &lt; 29; i++)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//     rand_arr[i] = rand();</span></span><br><span class="line"></span><br><span class="line">    v3 = <span class="number">29</span>;</span><br><span class="line"></span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> seed = <span class="number">0</span>; seed &lt; <span class="number">0xffff</span>; seed++)</span><br><span class="line"></span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">char</span> flag[<span class="number">30</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line">        srand(seed);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">29</span>; i++)</span><br><span class="line"></span><br><span class="line">        &#123;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> tmp = rand();</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> a = tmp &gt;&gt; <span class="number">32</span> &gt;&gt; <span class="number">7</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> b = a &gt;&gt; <span class="number">0x1f</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> c = a + b;</span><br><span class="line"></span><br><span class="line">            b = c * <span class="number">0xff</span>;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> d = tmp - b;</span><br><span class="line"></span><br><span class="line">            <span class="type">int</span> tmp2 = *((<span class="type">char</span> *)cipher + i) ^ d;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// tmp2 = d;</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp2 &gt; <span class="number">0x7e</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (tmp2 &lt; <span class="number">0x20</span>)</span><br><span class="line"></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">            flag[i] = tmp2; <span class="comment">// printf(&quot;%c&quot;, tmp2);</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">strlen</span>(flag) &gt; <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%s\n&quot;</span>, flag);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2><span id="ezunity">ezUnity</span></h2><p>此题略微难在 metadata 文件格式修复<br>可对比 babyUnity 或者其它 Unity 文件的 dll，修复后：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-28.png" alt="alt text"><br>剩下操作类似 babyUnity<br>能通过 findcrypt 或者分析发现是 aes</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cipher1 = <span class="string">&quot;pNufkEIU9dHjKXYXWiFyrthHYFEfqJAWcPM/t8/zX1w=&quot;</span></span><br><span class="line">key = <span class="string">&quot;a216d5d34c2723f5&quot;</span></span><br><span class="line">iv = <span class="string">&quot;9f68268f755b1363&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/2024/04/28/xyctf2023-re-writeup/image-29.png" alt="alt text"><br>XYCTF{IL2CPP_1s_intere5t1ng}</p><h2><span id="trustme">Trustme</span></h2><p>main 是一个没什么用的 rc4，并且和程序对不上。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-30.png" alt="alt text"><br>康康别的类<br><img src="/2024/04/28/xyctf2023-re-writeup/image-31.png" alt="alt text"><br>有一个对 dex 解密并输出什么的。这里静态解太麻烦了，动态找到安卓机的 data&#x2F;data 里对应的包，发现确实有东西<br>如：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-32.png" alt="alt text"><br>分析 dex 目录的 apk，发现其主要做了一个数据库查找操作。<br><img src="/2024/04/28/xyctf2023-re-writeup/image-33.png" alt="alt text"><br>找到数据库：<br><img src="/2024/04/28/xyctf2023-re-writeup/image-34.png" alt="alt text"><br>XYCTF{And0r1d_15_V3ryEasy}</p><h2><span id="thats-this">That’s this</span></h2><p>lua 字节码<br><img src="/2024/04/28/xyctf2023-re-writeup/image-35.png" alt="alt text"><br>在线反编译<br><a href="https://www.luatool.cn/index.php">https://www.luatool.cn/index.php</a></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">value = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="built_in">output</span> = <span class="string">&quot;&quot;</span></span><br><span class="line">i = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line">  <span class="keyword">local</span> temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(flag, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(Xor(temp, <span class="number">8</span>) % <span class="number">256</span>)</span><br><span class="line">  value = value .. temp</span><br><span class="line">  i = i + <span class="number">1</span></span><br><span class="line">  <span class="keyword">if</span> i &gt; <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">then</span></span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">1000</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(flag) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(value, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp + <span class="number">3</span>)</span><br><span class="line">  <span class="built_in">output</span> = <span class="built_in">output</span> .. temp</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">result = <span class="built_in">output</span>:<span class="built_in">rep</span>(<span class="number">10</span>)</span><br><span class="line">invalid_list = &#123;</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">20</span> <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="string">&quot;A&quot;</span></span><br><span class="line">  <span class="built_in">table</span>.<span class="built_in">insert</span>(invalid_list, <span class="number">4</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">string</span>.<span class="built_in">len</span>(<span class="built_in">output</span>) <span class="keyword">do</span></span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="built_in">output</span>, i)</span><br><span class="line">  temp = <span class="built_in">string</span>.<span class="built_in">char</span>(temp - <span class="number">1</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">30</span> <span class="keyword">do</span></span><br><span class="line">  result = result .. <span class="built_in">string</span>.<span class="built_in">lower</span>(<span class="built_in">output</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">950</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">3</span></span><br><span class="line">  y = x * <span class="number">3</span></span><br><span class="line">  z = y / <span class="number">4</span></span><br><span class="line">  w = z - <span class="number">5</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> _ = <span class="number">1</span>, <span class="number">50</span> <span class="keyword">do</span></span><br><span class="line">  x = <span class="number">-1</span></span><br><span class="line">  y = x * <span class="number">4</span></span><br><span class="line">  z = y / <span class="number">2</span></span><br><span class="line">  w = z - <span class="number">3</span></span><br><span class="line">  <span class="keyword">if</span> w == <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;This line will also never be executed&quot;</span>)</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;base64&quot;</span>)</span><br><span class="line">obfuscated_output = to_base64(<span class="built_in">output</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">reverse</span>(obfuscated_output)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;g&quot;</span>, <span class="string">&quot;3&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;H&quot;</span>, <span class="string">&quot;4&quot;</span>)</span><br><span class="line">obfuscated_output = <span class="built_in">string</span>.<span class="built_in">gsub</span>(obfuscated_output, <span class="string">&quot;W&quot;</span>, <span class="string">&quot;6&quot;</span>)</span><br><span class="line">invalid_variable = obfuscated_output:<span class="built_in">rep</span>(<span class="number">5</span>)</span><br><span class="line"><span class="keyword">if</span> obfuscated_output == <span class="string">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span> <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;You get the flag.&quot;</span>)</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;F**k!&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存在一些混淆代码，但从密文逆推可以很轻松地找到核心逻辑：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">list</span>(<span class="string">b&quot;==AeuFEcwxGPuJ0PBNzbC1WctFnPB5DPzI0bwxWbu9GQ2F1XOR1U&quot;</span>)</span><br><span class="line"></span><br><span class="line">a.reverse()</span><br><span class="line"></span><br><span class="line">b = <span class="built_in">list</span>(base64.b64decode(<span class="built_in">bytes</span>(a)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(a))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(<span class="built_in">bytes</span>(a)), <span class="built_in">len</span>(b))</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(b)):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> l <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0x20</span>, <span class="number">0x7f</span>):</span><br><span class="line"></span><br><span class="line">        t = (l ^ <span class="number">8</span>) + <span class="number">3</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> t == b[i]:</span><br><span class="line"></span><br><span class="line">            flag += <span class="built_in">chr</span>(l)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># b[i] += 1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># b[i] -= 3</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># # b[i] &amp;= 0xff</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># b[i] ^= 8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag, <span class="built_in">len</span>(flag))</span><br></pre></td></tr></table></figure><p>XYCTF{5dcbaed781363fbfb7d8647c1aee6c}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;感觉第一周最好玩，没了。&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;聪明的信使&quot;&gt;聪明的信使&lt;/span&gt;&lt;/h2&gt;&lt;p&gt;九位凯撒。&lt;br&gt;flag{Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!}&lt;/p&gt;
&lt;h2&gt;&lt;span id=&quot;给阿姨倒一杯卡布奇诺&quot;</summary>
      
    
    
    
    
    <category term="CTF" scheme="https://airrcat.github.io/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://airrcat.github.io/2024/04/26/hello-world/"/>
    <id>https://airrcat.github.io/2024/04/26/hello-world/</id>
    <published>2024-04-26T14:24:48.660Z</published>
    <updated>2024-04-26T14:24:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2><span id="quick-start">Quick Start</span></h2><h3><span id="create-a-new-post">Create a new post</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3><span id="run-server">Run server</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3><span id="generate-static-files">Generate static files</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3><span id="deploy-to-remote-sites">Deploy to remote sites</span></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    
  </entry>
  
</feed>
