{"title":"Short solution about unicorn error: Could not allocate dynamic translator buffer","date":"2024-06-18T07:40:23.000Z","source":"_posts/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer.md","raw":"---\ntitle: >-\n  Short solution about unicorn error: Could not allocate dynamic translator\n  buffer\ndate: 2024-06-18 15:40:23\ntags: unicorn\n---\n\nthis error occured when i try to emu 1000+ elf file and about 100 times.\nsample from [CFI-CTF 2018 Automated Reversing](https://buuoj.cn/challenges#[CFI-CTF%202018]Automated%20Reversing)\n\nexp:\n```python\n    uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)\n    ...\n    import  gc\n    del uc\n    gc.collect()\n```\nAfter read this [issue](https://github.com/unicorn-engine/unicorn/issues/508), I confirm that this error is about the bad resource release. So I try to call gc.collect() to solve it.\n\n\n[pe_loader](https://github.com/Airrcat/unicorn_loader)\ntotal code:\n```python\nfrom pe_loader.pe_loader import  *\nfrom unicorn import *\nimport capstone as cs\ncheck = 0\nboom = 0\ndef trace(mu: Uc, address, size, data):\n    global check\n    global boom\n    EIP = mu.reg_read(unicorn.x86_const.UC_X86_REG_EIP)\n    if EIP == 0x19:\n        mu.reg_write(unicorn.x86_const.UC_X86_REG_DL,boom)\n    if EIP == 0x1f:\n        if mu.reg_read(unicorn.x86_const.UC_X86_REG_FLAGS)&(2**6)==(2**6):\n                check = 1\n                mu.emu_stop()\n                return\n    if EIP > 0x30:\n        mu.emu_stop()\nanwsers = [0]*1010\ncount = 0\nfor suffix in range(0,1009):\n    path = \"attachment/binaries/\"\n    prefix = \"binary\"\n    if suffix == 993:\n        continue\n    loader = pe_loader(path + prefix+ str(suffix),UC_MODE_32)\n    vaddr = 0\n    vsize = 0xdf - 0xb0\n    raddr = 0xb0\n    rsize = 0xdf - 0xb0\n    content = loader.image[raddr:raddr + rsize]\n\n    CODE = content\n    BASE_ADDR = vaddr\n    CODE_LEN = vsize\n\n    uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)\n    # 整体内存空间的初始化\n    uc.mem_map(BASE_ADDR,32*1024)\n    uc.mem_write(BASE_ADDR,b'\\x00'*32*1024)\n    # 栈空间初始化，因为内存刚刚整体写了，这里其实可以不用。\n    STACK = b'\\x00' * 1024\n    STACK_POINT = 30 * 1024\n    # 栈初始化\n    uc.reg_write(unicorn.x86_const.UC_X86_REG_SP,STACK_POINT)\n    \n    uc.mem_write(BASE_ADDR,CODE)\n    uc.hook_add(UC_HOOK_CODE, trace)\n    for i in range(0,0xff):\n        if check == 1:\n            anwsers[count] = boom\n            count += 1\n            check = 0\n            break\n        try:\n            boom = i\n            uc.emu_start(BASE_ADDR, rsize)\n        except UcError as e:\n            print(\"ERROR \", e)\n    uc.mem_unmap(BASE_ADDR,32*1024)\n    import gc\n    del uc\n    gc.collect()\n\nwith open(\"attachment/binaries/anwser.txt\",\"wb\") as f:\n    f.write(bytes(anwsers))\n```","slug":"Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer","published":true,"updated":"2024-06-18T08:48:02.000Z","_id":"clxk5kad90000qww07mtf4ndc","comments":true,"layout":"post","photos":[],"html":"<p>this error occured when i try to emu 1000+ elf file and about 100 times.<br>sample from <a href=\"https://buuoj.cn/challenges#[CFI-CTF%202018]Automated%20Reversing\">CFI-CTF 2018 Automated Reversing</a></p>\n<p>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span>  gc</span><br><span class=\"line\"><span class=\"keyword\">del</span> uc</span><br><span class=\"line\">gc.collect()</span><br></pre></td></tr></table></figure>\n<p>After read this <a href=\"https://github.com/unicorn-engine/unicorn/issues/508\">issue</a>, I confirm that this error is about the bad resource release. So I try to call gc.collect() to solve it.</p>\n<p><a href=\"https://github.com/Airrcat/unicorn_loader\">pe_loader</a><br>total code:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pe_loader.pe_loader <span class=\"keyword\">import</span>  *</span><br><span class=\"line\"><span class=\"keyword\">from</span> unicorn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> capstone <span class=\"keyword\">as</span> cs</span><br><span class=\"line\">check = <span class=\"number\">0</span></span><br><span class=\"line\">boom = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trace</span>(<span class=\"params\">mu: Uc, address, size, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> check</span><br><span class=\"line\">    <span class=\"keyword\">global</span> boom</span><br><span class=\"line\">    EIP = mu.reg_read(unicorn.x86_const.UC_X86_REG_EIP)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> EIP == <span class=\"number\">0x19</span>:</span><br><span class=\"line\">        mu.reg_write(unicorn.x86_const.UC_X86_REG_DL,boom)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> EIP == <span class=\"number\">0x1f</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mu.reg_read(unicorn.x86_const.UC_X86_REG_FLAGS)&amp;(<span class=\"number\">2</span>**<span class=\"number\">6</span>)==(<span class=\"number\">2</span>**<span class=\"number\">6</span>):</span><br><span class=\"line\">                check = <span class=\"number\">1</span></span><br><span class=\"line\">                mu.emu_stop()</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> EIP &gt; <span class=\"number\">0x30</span>:</span><br><span class=\"line\">        mu.emu_stop()</span><br><span class=\"line\">anwsers = [<span class=\"number\">0</span>]*<span class=\"number\">1010</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> suffix <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1009</span>):</span><br><span class=\"line\">    path = <span class=\"string\">&quot;attachment/binaries/&quot;</span></span><br><span class=\"line\">    prefix = <span class=\"string\">&quot;binary&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> suffix == <span class=\"number\">993</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    loader = pe_loader(path + prefix+ <span class=\"built_in\">str</span>(suffix),UC_MODE_32)</span><br><span class=\"line\">    vaddr = <span class=\"number\">0</span></span><br><span class=\"line\">    vsize = <span class=\"number\">0xdf</span> - <span class=\"number\">0xb0</span></span><br><span class=\"line\">    raddr = <span class=\"number\">0xb0</span></span><br><span class=\"line\">    rsize = <span class=\"number\">0xdf</span> - <span class=\"number\">0xb0</span></span><br><span class=\"line\">    content = loader.image[raddr:raddr + rsize]</span><br><span class=\"line\"></span><br><span class=\"line\">    CODE = content</span><br><span class=\"line\">    BASE_ADDR = vaddr</span><br><span class=\"line\">    CODE_LEN = vsize</span><br><span class=\"line\"></span><br><span class=\"line\">    uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class=\"line\">    <span class=\"comment\"># 整体内存空间的初始化</span></span><br><span class=\"line\">    uc.mem_map(BASE_ADDR,<span class=\"number\">32</span>*<span class=\"number\">1024</span>)</span><br><span class=\"line\">    uc.mem_write(BASE_ADDR,<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">32</span>*<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 栈空间初始化，因为内存刚刚整体写了，这里其实可以不用。</span></span><br><span class=\"line\">    STACK = <span class=\"string\">b&#x27;\\x00&#x27;</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">    STACK_POINT = <span class=\"number\">30</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">    <span class=\"comment\"># 栈初始化</span></span><br><span class=\"line\">    uc.reg_write(unicorn.x86_const.UC_X86_REG_SP,STACK_POINT)</span><br><span class=\"line\">    </span><br><span class=\"line\">    uc.mem_write(BASE_ADDR,CODE)</span><br><span class=\"line\">    uc.hook_add(UC_HOOK_CODE, trace)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">0xff</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> check == <span class=\"number\">1</span>:</span><br><span class=\"line\">            anwsers[count] = boom</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            check = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            boom = i</span><br><span class=\"line\">            uc.emu_start(BASE_ADDR, rsize)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> UcError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ERROR &quot;</span>, e)</span><br><span class=\"line\">    uc.mem_unmap(BASE_ADDR,<span class=\"number\">32</span>*<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">import</span> gc</span><br><span class=\"line\">    <span class=\"keyword\">del</span> uc</span><br><span class=\"line\">    gc.collect()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;attachment/binaries/anwser.txt&quot;</span>,<span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"built_in\">bytes</span>(anwsers))</span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>this error occured when i try to emu 1000+ elf file and about 100 times.<br>sample from <a href=\"https://buuoj.cn/challenges#[CFI-CTF%202018]Automated%20Reversing\">CFI-CTF 2018 Automated Reversing</a></p>\n<p>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span>  gc</span><br><span class=\"line\"><span class=\"keyword\">del</span> uc</span><br><span class=\"line\">gc.collect()</span><br></pre></td></tr></table></figure>\n<p>After read this <a href=\"https://github.com/unicorn-engine/unicorn/issues/508\">issue</a>, I confirm that this error is about the bad resource release. So I try to call gc.collect() to solve it.</p>\n<p><a href=\"https://github.com/Airrcat/unicorn_loader\">pe_loader</a><br>total code:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> pe_loader.pe_loader <span class=\"keyword\">import</span>  *</span><br><span class=\"line\"><span class=\"keyword\">from</span> unicorn <span class=\"keyword\">import</span> *</span><br><span class=\"line\"><span class=\"keyword\">import</span> capstone <span class=\"keyword\">as</span> cs</span><br><span class=\"line\">check = <span class=\"number\">0</span></span><br><span class=\"line\">boom = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trace</span>(<span class=\"params\">mu: Uc, address, size, data</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> check</span><br><span class=\"line\">    <span class=\"keyword\">global</span> boom</span><br><span class=\"line\">    EIP = mu.reg_read(unicorn.x86_const.UC_X86_REG_EIP)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> EIP == <span class=\"number\">0x19</span>:</span><br><span class=\"line\">        mu.reg_write(unicorn.x86_const.UC_X86_REG_DL,boom)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> EIP == <span class=\"number\">0x1f</span>:</span><br><span class=\"line\">        <span class=\"keyword\">if</span> mu.reg_read(unicorn.x86_const.UC_X86_REG_FLAGS)&amp;(<span class=\"number\">2</span>**<span class=\"number\">6</span>)==(<span class=\"number\">2</span>**<span class=\"number\">6</span>):</span><br><span class=\"line\">                check = <span class=\"number\">1</span></span><br><span class=\"line\">                mu.emu_stop()</span><br><span class=\"line\">                <span class=\"keyword\">return</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> EIP &gt; <span class=\"number\">0x30</span>:</span><br><span class=\"line\">        mu.emu_stop()</span><br><span class=\"line\">anwsers = [<span class=\"number\">0</span>]*<span class=\"number\">1010</span></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> suffix <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">1009</span>):</span><br><span class=\"line\">    path = <span class=\"string\">&quot;attachment/binaries/&quot;</span></span><br><span class=\"line\">    prefix = <span class=\"string\">&quot;binary&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> suffix == <span class=\"number\">993</span>:</span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\">    loader = pe_loader(path + prefix+ <span class=\"built_in\">str</span>(suffix),UC_MODE_32)</span><br><span class=\"line\">    vaddr = <span class=\"number\">0</span></span><br><span class=\"line\">    vsize = <span class=\"number\">0xdf</span> - <span class=\"number\">0xb0</span></span><br><span class=\"line\">    raddr = <span class=\"number\">0xb0</span></span><br><span class=\"line\">    rsize = <span class=\"number\">0xdf</span> - <span class=\"number\">0xb0</span></span><br><span class=\"line\">    content = loader.image[raddr:raddr + rsize]</span><br><span class=\"line\"></span><br><span class=\"line\">    CODE = content</span><br><span class=\"line\">    BASE_ADDR = vaddr</span><br><span class=\"line\">    CODE_LEN = vsize</span><br><span class=\"line\"></span><br><span class=\"line\">    uc = unicorn.Uc(UC_ARCH_X86,UC_MODE_32)</span><br><span class=\"line\">    <span class=\"comment\"># 整体内存空间的初始化</span></span><br><span class=\"line\">    uc.mem_map(BASE_ADDR,<span class=\"number\">32</span>*<span class=\"number\">1024</span>)</span><br><span class=\"line\">    uc.mem_write(BASE_ADDR,<span class=\"string\">b&#x27;\\x00&#x27;</span>*<span class=\"number\">32</span>*<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"comment\"># 栈空间初始化，因为内存刚刚整体写了，这里其实可以不用。</span></span><br><span class=\"line\">    STACK = <span class=\"string\">b&#x27;\\x00&#x27;</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">    STACK_POINT = <span class=\"number\">30</span> * <span class=\"number\">1024</span></span><br><span class=\"line\">    <span class=\"comment\"># 栈初始化</span></span><br><span class=\"line\">    uc.reg_write(unicorn.x86_const.UC_X86_REG_SP,STACK_POINT)</span><br><span class=\"line\">    </span><br><span class=\"line\">    uc.mem_write(BASE_ADDR,CODE)</span><br><span class=\"line\">    uc.hook_add(UC_HOOK_CODE, trace)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">0xff</span>):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> check == <span class=\"number\">1</span>:</span><br><span class=\"line\">            anwsers[count] = boom</span><br><span class=\"line\">            count += <span class=\"number\">1</span></span><br><span class=\"line\">            check = <span class=\"number\">0</span></span><br><span class=\"line\">            <span class=\"keyword\">break</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>:</span><br><span class=\"line\">            boom = i</span><br><span class=\"line\">            uc.emu_start(BASE_ADDR, rsize)</span><br><span class=\"line\">        <span class=\"keyword\">except</span> UcError <span class=\"keyword\">as</span> e:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;ERROR &quot;</span>, e)</span><br><span class=\"line\">    uc.mem_unmap(BASE_ADDR,<span class=\"number\">32</span>*<span class=\"number\">1024</span>)</span><br><span class=\"line\">    <span class=\"keyword\">import</span> gc</span><br><span class=\"line\">    <span class=\"keyword\">del</span> uc</span><br><span class=\"line\">    gc.collect()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&quot;attachment/binaries/anwser.txt&quot;</span>,<span class=\"string\">&quot;wb&quot;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">    f.write(<span class=\"built_in\">bytes</span>(anwsers))</span><br></pre></td></tr></table></figure>","path":"2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/","permalink":"http://example.com/2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/","tags":[{"name":"unicorn","_id":"clxk5kadc0001qww01w820gr7","slug":"unicorn","path":"tags/unicorn/","permalink":"http://example.com/tags/unicorn/","length":1}],"categories":[],"prev":{"title":"blowfish例题 RCTF-DontEatMe","date":"2024-07-15T08:03:42.000Z","slug":"blowfish例题-RCTF-DontEatMe","published":true,"updated":"2024-07-15T10:27:44.000Z","_id":"clymue82w0000v8w03luy7eun","layout":"post","photos":[],"excerpt":"","path":"2024/07/15/blowfish例题-RCTF-DontEatMe/","permalink":"http://example.com/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/","__post":true},"next":{"title":"Adjustment about unresolved stack usage in binary ninja","date":"2024-06-17T02:03:34.000Z","slug":"Adjustment-about-unresolved-stack-usage-in-binary-ninja","published":true,"updated":"2024-06-17T02:50:56.000Z","_id":"clxidry3m0000ccw0h0sobegg","layout":"post","photos":[],"excerpt":"","path":"2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/","permalink":"http://example.com/2024/06/17/Adjustment-about-unresolved-stack-usage-in-binary-ninja/","__post":true},"__post":true}