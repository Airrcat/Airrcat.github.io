{"title":"blowfish例题 RCTF-DontEatMe","date":"2024-07-15T08:03:42.000Z","source":"_posts/blowfish例题-RCTF-DontEatMe.md","raw":"---\ntitle: blowfish例题 RCTF-DontEatMe\ndate: 2024-07-15 16:03:42\ntags: [CTF,Reverse,Blowfish,Maze]\n---\n本题的主要考点是Blowfish算法。附带反调试、迷宫\n![alt text](image-10.png)\n程序的开始阶段除了输入之外，还固定了一个随机数种子，并通过动态获取Ntdll地址的方式去调用ZwSetInformationThread来反调试。这里可以把该函数直接nop。而为了考虑栈平衡，需要计算有多少个push、call需要nop或者直接nop一片。\n我将Ntdll相关的几个函数全nop后汇编头尾如下：\n![alt text](image-11.png)\n![alt text](image-12.png)\n之后程序开始获取随机数：\n![alt text](image-13.png)\n需要注意的是：\n    ①我动调扒取rand()、解码后的数组时，这个序列的最后是0xcd，而靠这个序列我解不出来最后的答案，最后是调试到最后，回头看了下这个全局数组发现最后一位不是0xcd，是0x20，将改为0x20后成功解出。这里可能有我手法的问题。\n    ②原因未知，我使用ida 对上述的反调试nop后，在动调时被nop的代码还会出新的代码，此时可能需要重复patch。\n获取完随机数序列后，该序列还会做一个简单的decode from 'fishFISH'。之后进入sub_C41090函数,此为blowfish的box交换函数。\n算法的分析有两点，第一点是寻找box特征：\n![alt text](image-14.png)\n可在该函数开头看到：\n![alt text](image-15.png)\n第二点是分析算法特征，需要有算法实现源码。最直接的对比是算法参数：循环长度、循环步长。需要分析的是算法结构：指令流（循环第一个指令、第二个指令、第三个指令分别是什么，是否匹配）、每个指令的输入、输出。初次分析可判断到是什么算法即可，当解不出来时考虑是否魔改，进而进一步分析算法细节。\n①blowfish的pbox异或key，且异或长度为18，循环步长为+2\n![alt text](image-16.png)\n![alt text](image-17.png)\n同理对比\n![alt text](image-18.png)\n![alt text](image-19.png)\nBF_FN:\n![alt text](image-20.png)\n![alt text](image-21.png)\n因此，基本确认这里是blowfish的初始化函数，通过key生成新的box，和输入无关。\n接下来有几个重点：\n①输入从str被vsscanf转为了hex如：'12'->b'\\x12'\n②在blowfish算法后有一个迷宫操作，迷宫的地图是通过计算生成的。\n③一个小trick来了。\n正常来说，我们默认题里的算法是做加密操作后进行密文匹配，而本题，输入的字符串转hex后，经过blowfish计算的结果要作为迷宫的前进方向，计算的结果是在'wasd'之内。\n![alt text](image-22.png)\n初始\n![alt text](image-23.png)\n最终check\n![alt text](image-24.png)\n也就是说，本题是：输入一串hex，经过blowfish处理变成wasd明文。\n于是这里的blowfish处理就不能是加密的：明文-》hex密文，而得是解密的：hex密文-》明文。\n那么我们这里就清晰了：迷宫的路径是明文，同时是blowfish解密的结果，而要获得最初输入，动调获取blowfish 的key并将明文加密即可。\nexp:\n```python\n# -*- coding: utf-8 -*-\nimport codecs\nfrom Crypto.Cipher import Blowfish\n\n\ndef print_maze(maze: list, weight: int):\n    for i in range(len(maze)):\n        if i % weight == 0:\n            print()\n        print(maze[i], end=\"\")\n\n\n# 随机种子作key\na = b\"\\x90\\xbbK\\xee\\xde\\xfa\\xf2\\xcbh\\xf8\\x83\\xd3\\x96\\xf8z\\xc8\\xd8\\xfb\\xc3\\xd1V\\xc5\\xba\\x8fh\\xbc\\x8b\\x91\\x9e\\xba\\xb2\\x8b\\x00\"\na = list(a)\nkey = b\"DontEatM\"\nfor i in range(len(a)):\n    a[i] ^= key[i % len(key)]\n\nmaze = []\nfor i in range(len(a)):\n    ptr = 0xf\n    while ptr > -1:\n        tmp = (((1 << ptr) & a[i]) >> ptr)\n        ptr -= 1\n        maze.append(tmp)\nmaze = [0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001,\n        0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000000, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001, 0x00000001]\nmaze[0xa*0x10+5] = '#'\nmaze[0x4*0x10+9] = 'x'\nprint_maze(maze, 0x10)\n# ddddwwwaaawwwddd\nkey_array = list(b'fishFISH')\n\n# key_array[1] = 0xf\n# key_array[2] = (0x73 ^ key_array[1])\n# key_array[3] = (0x68 ^ key_array[1])\n# key_array[4] = key_array[2] ^ key_array[4]\nkey_array = [0x00, 0x0F, 0x1A, 0x01, 0x35, 0x3A, 0x3B, 0xCD]\n\n# -*- coding: utf-8 -*-\n\n\nclass blowfish():\n    def __init__(self):\n        pass\n\n    def Encrypt(self, code, key):\n        key = key\n        l = len(code)\n        if l % 8 != 0:\n            # Blowfish底层决定了字符串长度必须8的整数倍，所补位空格也可以根据自己需要补位其他字符\n            code = code + b' ' * (8 - (l % 8))\n        code = code\n        cl = Blowfish.new(key, Blowfish.MODE_ECB)\n        encode = cl.encrypt(code)\n        # hex_encode = codecs.encode(encode, 'hex_codec')  # 可以根据自己需要更改hex_codec\n        return encode\n\n    def Decrypt(self, string, key):\n        key = key\n        string = string\n        cl = Blowfish.new(key, Blowfish.MODE_ECB)\n        # codecs.decode(string, 'hex_codec')  # 可以根据自己需要更改hex_codec\n        ciphertext = string\n        code = cl.decrypt(ciphertext)\n        return \"%s\" % (code)\n\n\nif __name__ == '__main__':\n    # encode = b'8749C71106E48B51'\n    code = b'ddddwwwaaawwwddd'\n    key_array = [0x00, 0x0F, 0x1A, 0x01, 0x35, 0x3A, 0x3B, 0x20]\n    key = bytes(key_array)\n    gw = blowfish()\n    print(\"明文密码：%s，经过key：%s加密之后的加密密码是：%s\" % (code, key, gw.Encrypt(code, key)))\n    encode = gw.Encrypt(code, key)\n    print(encode.hex())\n    print(\"加密密码：%s，经过key：%s解密之后的明文密码是：%s\" %\n          (encode, key, gw.Decrypt(encode, key)))\n\n```","slug":"blowfish例题-RCTF-DontEatMe","published":true,"updated":"2024-07-15T10:27:44.000Z","_id":"clymue82w0000v8w03luy7eun","comments":true,"layout":"post","photos":[],"html":"<p>本题的主要考点是Blowfish算法。附带反调试、迷宫<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-10.png\" alt=\"alt text\"><br>程序的开始阶段除了输入之外，还固定了一个随机数种子，并通过动态获取Ntdll地址的方式去调用ZwSetInformationThread来反调试。这里可以把该函数直接nop。而为了考虑栈平衡，需要计算有多少个push、call需要nop或者直接nop一片。<br>我将Ntdll相关的几个函数全nop后汇编头尾如下：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-11.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-12.png\" alt=\"alt text\"><br>之后程序开始获取随机数：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-13.png\" alt=\"alt text\"><br>需要注意的是：<br>    ①我动调扒取rand()、解码后的数组时，这个序列的最后是0xcd，而靠这个序列我解不出来最后的答案，最后是调试到最后，回头看了下这个全局数组发现最后一位不是0xcd，是0x20，将改为0x20后成功解出。这里可能有我手法的问题。<br>    ②原因未知，我使用ida 对上述的反调试nop后，在动调时被nop的代码还会出新的代码，此时可能需要重复patch。<br>获取完随机数序列后，该序列还会做一个简单的decode from ‘fishFISH’。之后进入sub_C41090函数,此为blowfish的box交换函数。<br>算法的分析有两点，第一点是寻找box特征：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-14.png\" alt=\"alt text\"><br>可在该函数开头看到：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-15.png\" alt=\"alt text\"><br>第二点是分析算法特征，需要有算法实现源码。最直接的对比是算法参数：循环长度、循环步长。需要分析的是算法结构：指令流（循环第一个指令、第二个指令、第三个指令分别是什么，是否匹配）、每个指令的输入、输出。初次分析可判断到是什么算法即可，当解不出来时考虑是否魔改，进而进一步分析算法细节。<br>①blowfish的pbox异或key，且异或长度为18，循环步长为+2<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-16.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-17.png\" alt=\"alt text\"><br>同理对比<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-18.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-19.png\" alt=\"alt text\"><br>BF_FN:<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-20.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-21.png\" alt=\"alt text\"><br>因此，基本确认这里是blowfish的初始化函数，通过key生成新的box，和输入无关。<br>接下来有几个重点：<br>①输入从str被vsscanf转为了hex如：’12’-&gt;b’\\x12’<br>②在blowfish算法后有一个迷宫操作，迷宫的地图是通过计算生成的。<br>③一个小trick来了。<br>正常来说，我们默认题里的算法是做加密操作后进行密文匹配，而本题，输入的字符串转hex后，经过blowfish计算的结果要作为迷宫的前进方向，计算的结果是在’wasd’之内。<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-22.png\" alt=\"alt text\"><br>初始<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-23.png\" alt=\"alt text\"><br>最终check<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-24.png\" alt=\"alt text\"><br>也就是说，本题是：输入一串hex，经过blowfish处理变成wasd明文。<br>于是这里的blowfish处理就不能是加密的：明文-》hex密文，而得是解密的：hex密文-》明文。<br>那么我们这里就清晰了：迷宫的路径是明文，同时是blowfish解密的结果，而要获得最初输入，动调获取blowfish 的key并将明文加密即可。<br>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> Blowfish</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_maze</span>(<span class=\"params\">maze: <span class=\"built_in\">list</span>, weight: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(maze)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % weight == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(maze[i], end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机种子作key</span></span><br><span class=\"line\">a = <span class=\"string\">b&quot;\\x90\\xbbK\\xee\\xde\\xfa\\xf2\\xcbh\\xf8\\x83\\xd3\\x96\\xf8z\\xc8\\xd8\\xfb\\xc3\\xd1V\\xc5\\xba\\x8fh\\xbc\\x8b\\x91\\x9e\\xba\\xb2\\x8b\\x00&quot;</span></span><br><span class=\"line\">a = <span class=\"built_in\">list</span>(a)</span><br><span class=\"line\">key = <span class=\"string\">b&quot;DontEatM&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">    a[i] ^= key[i % <span class=\"built_in\">len</span>(key)]</span><br><span class=\"line\"></span><br><span class=\"line\">maze = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">    ptr = <span class=\"number\">0xf</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ptr &gt; -<span class=\"number\">1</span>:</span><br><span class=\"line\">        tmp = (((<span class=\"number\">1</span> &lt;&lt; ptr) &amp; a[i]) &gt;&gt; ptr)</span><br><span class=\"line\">        ptr -= <span class=\"number\">1</span></span><br><span class=\"line\">        maze.append(tmp)</span><br><span class=\"line\">maze = [<span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>,</span><br><span class=\"line\">        <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>]</span><br><span class=\"line\">maze[<span class=\"number\">0xa</span>*<span class=\"number\">0x10</span>+<span class=\"number\">5</span>] = <span class=\"string\">&#x27;#&#x27;</span></span><br><span class=\"line\">maze[<span class=\"number\">0x4</span>*<span class=\"number\">0x10</span>+<span class=\"number\">9</span>] = <span class=\"string\">&#x27;x&#x27;</span></span><br><span class=\"line\">print_maze(maze, <span class=\"number\">0x10</span>)</span><br><span class=\"line\"><span class=\"comment\"># ddddwwwaaawwwddd</span></span><br><span class=\"line\">key_array = <span class=\"built_in\">list</span>(<span class=\"string\">b&#x27;fishFISH&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># key_array[1] = 0xf</span></span><br><span class=\"line\"><span class=\"comment\"># key_array[2] = (0x73 ^ key_array[1])</span></span><br><span class=\"line\"><span class=\"comment\"># key_array[3] = (0x68 ^ key_array[1])</span></span><br><span class=\"line\"><span class=\"comment\"># key_array[4] = key_array[2] ^ key_array[4]</span></span><br><span class=\"line\">key_array = [<span class=\"number\">0x00</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0xCD</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">blowfish</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">Encrypt</span>(<span class=\"params\">self, code, key</span>):</span><br><span class=\"line\">        key = key</span><br><span class=\"line\">        l = <span class=\"built_in\">len</span>(code)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l % <span class=\"number\">8</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Blowfish底层决定了字符串长度必须8的整数倍，所补位空格也可以根据自己需要补位其他字符</span></span><br><span class=\"line\">            code = code + <span class=\"string\">b&#x27; &#x27;</span> * (<span class=\"number\">8</span> - (l % <span class=\"number\">8</span>))</span><br><span class=\"line\">        code = code</span><br><span class=\"line\">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class=\"line\">        encode = cl.encrypt(code)</span><br><span class=\"line\">        <span class=\"comment\"># hex_encode = codecs.encode(encode, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> encode</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">Decrypt</span>(<span class=\"params\">self, string, key</span>):</span><br><span class=\"line\">        key = key</span><br><span class=\"line\">        string = string</span><br><span class=\"line\">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class=\"line\">        <span class=\"comment\"># codecs.decode(string, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class=\"line\">        ciphertext = string</span><br><span class=\"line\">        code = cl.decrypt(ciphertext)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;%s&quot;</span> % (code)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># encode = b&#x27;8749C71106E48B51&#x27;</span></span><br><span class=\"line\">    code = <span class=\"string\">b&#x27;ddddwwwaaawwwddd&#x27;</span></span><br><span class=\"line\">    key_array = [<span class=\"number\">0x00</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x20</span>]</span><br><span class=\"line\">    key = <span class=\"built_in\">bytes</span>(key_array)</span><br><span class=\"line\">    gw = blowfish()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;明文密码：%s，经过key：%s加密之后的加密密码是：%s&quot;</span> % (code, key, gw.Encrypt(code, key)))</span><br><span class=\"line\">    encode = gw.Encrypt(code, key)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(encode.<span class=\"built_in\">hex</span>())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;加密密码：%s，经过key：%s解密之后的明文密码是：%s&quot;</span> %</span><br><span class=\"line\">          (encode, key, gw.Decrypt(encode, key)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<p>本题的主要考点是Blowfish算法。附带反调试、迷宫<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-10.png\" alt=\"alt text\"><br>程序的开始阶段除了输入之外，还固定了一个随机数种子，并通过动态获取Ntdll地址的方式去调用ZwSetInformationThread来反调试。这里可以把该函数直接nop。而为了考虑栈平衡，需要计算有多少个push、call需要nop或者直接nop一片。<br>我将Ntdll相关的几个函数全nop后汇编头尾如下：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-11.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-12.png\" alt=\"alt text\"><br>之后程序开始获取随机数：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-13.png\" alt=\"alt text\"><br>需要注意的是：<br>    ①我动调扒取rand()、解码后的数组时，这个序列的最后是0xcd，而靠这个序列我解不出来最后的答案，最后是调试到最后，回头看了下这个全局数组发现最后一位不是0xcd，是0x20，将改为0x20后成功解出。这里可能有我手法的问题。<br>    ②原因未知，我使用ida 对上述的反调试nop后，在动调时被nop的代码还会出新的代码，此时可能需要重复patch。<br>获取完随机数序列后，该序列还会做一个简单的decode from ‘fishFISH’。之后进入sub_C41090函数,此为blowfish的box交换函数。<br>算法的分析有两点，第一点是寻找box特征：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-14.png\" alt=\"alt text\"><br>可在该函数开头看到：<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-15.png\" alt=\"alt text\"><br>第二点是分析算法特征，需要有算法实现源码。最直接的对比是算法参数：循环长度、循环步长。需要分析的是算法结构：指令流（循环第一个指令、第二个指令、第三个指令分别是什么，是否匹配）、每个指令的输入、输出。初次分析可判断到是什么算法即可，当解不出来时考虑是否魔改，进而进一步分析算法细节。<br>①blowfish的pbox异或key，且异或长度为18，循环步长为+2<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-16.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-17.png\" alt=\"alt text\"><br>同理对比<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-18.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-19.png\" alt=\"alt text\"><br>BF_FN:<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-20.png\" alt=\"alt text\"><br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-21.png\" alt=\"alt text\"><br>因此，基本确认这里是blowfish的初始化函数，通过key生成新的box，和输入无关。<br>接下来有几个重点：<br>①输入从str被vsscanf转为了hex如：’12’-&gt;b’\\x12’<br>②在blowfish算法后有一个迷宫操作，迷宫的地图是通过计算生成的。<br>③一个小trick来了。<br>正常来说，我们默认题里的算法是做加密操作后进行密文匹配，而本题，输入的字符串转hex后，经过blowfish计算的结果要作为迷宫的前进方向，计算的结果是在’wasd’之内。<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-22.png\" alt=\"alt text\"><br>初始<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-23.png\" alt=\"alt text\"><br>最终check<br><img src=\"/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/image-24.png\" alt=\"alt text\"><br>也就是说，本题是：输入一串hex，经过blowfish处理变成wasd明文。<br>于是这里的blowfish处理就不能是加密的：明文-》hex密文，而得是解密的：hex密文-》明文。<br>那么我们这里就清晰了：迷宫的路径是明文，同时是blowfish解密的结果，而要获得最初输入，动调获取blowfish 的key并将明文加密即可。<br>exp:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> codecs</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> Blowfish</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">print_maze</span>(<span class=\"params\">maze: <span class=\"built_in\">list</span>, weight: <span class=\"built_in\">int</span></span>):</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(maze)):</span><br><span class=\"line\">        <span class=\"keyword\">if</span> i % weight == <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"built_in\">print</span>()</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(maze[i], end=<span class=\"string\">&quot;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 随机种子作key</span></span><br><span class=\"line\">a = <span class=\"string\">b&quot;\\x90\\xbbK\\xee\\xde\\xfa\\xf2\\xcbh\\xf8\\x83\\xd3\\x96\\xf8z\\xc8\\xd8\\xfb\\xc3\\xd1V\\xc5\\xba\\x8fh\\xbc\\x8b\\x91\\x9e\\xba\\xb2\\x8b\\x00&quot;</span></span><br><span class=\"line\">a = <span class=\"built_in\">list</span>(a)</span><br><span class=\"line\">key = <span class=\"string\">b&quot;DontEatM&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">    a[i] ^= key[i % <span class=\"built_in\">len</span>(key)]</span><br><span class=\"line\"></span><br><span class=\"line\">maze = []</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(a)):</span><br><span class=\"line\">    ptr = <span class=\"number\">0xf</span></span><br><span class=\"line\">    <span class=\"keyword\">while</span> ptr &gt; -<span class=\"number\">1</span>:</span><br><span class=\"line\">        tmp = (((<span class=\"number\">1</span> &lt;&lt; ptr) &amp; a[i]) &gt;&gt; ptr)</span><br><span class=\"line\">        ptr -= <span class=\"number\">1</span></span><br><span class=\"line\">        maze.append(tmp)</span><br><span class=\"line\">maze = [<span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>,</span><br><span class=\"line\">        <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000001</span>]</span><br><span class=\"line\">maze[<span class=\"number\">0xa</span>*<span class=\"number\">0x10</span>+<span class=\"number\">5</span>] = <span class=\"string\">&#x27;#&#x27;</span></span><br><span class=\"line\">maze[<span class=\"number\">0x4</span>*<span class=\"number\">0x10</span>+<span class=\"number\">9</span>] = <span class=\"string\">&#x27;x&#x27;</span></span><br><span class=\"line\">print_maze(maze, <span class=\"number\">0x10</span>)</span><br><span class=\"line\"><span class=\"comment\"># ddddwwwaaawwwddd</span></span><br><span class=\"line\">key_array = <span class=\"built_in\">list</span>(<span class=\"string\">b&#x27;fishFISH&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># key_array[1] = 0xf</span></span><br><span class=\"line\"><span class=\"comment\"># key_array[2] = (0x73 ^ key_array[1])</span></span><br><span class=\"line\"><span class=\"comment\"># key_array[3] = (0x68 ^ key_array[1])</span></span><br><span class=\"line\"><span class=\"comment\"># key_array[4] = key_array[2] ^ key_array[4]</span></span><br><span class=\"line\">key_array = [<span class=\"number\">0x00</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0xCD</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">class</span> <span class=\"title class_\">blowfish</span>():</span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">__init__</span>(<span class=\"params\">self</span>):</span><br><span class=\"line\">        <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">Encrypt</span>(<span class=\"params\">self, code, key</span>):</span><br><span class=\"line\">        key = key</span><br><span class=\"line\">        l = <span class=\"built_in\">len</span>(code)</span><br><span class=\"line\">        <span class=\"keyword\">if</span> l % <span class=\"number\">8</span> != <span class=\"number\">0</span>:</span><br><span class=\"line\">            <span class=\"comment\"># Blowfish底层决定了字符串长度必须8的整数倍，所补位空格也可以根据自己需要补位其他字符</span></span><br><span class=\"line\">            code = code + <span class=\"string\">b&#x27; &#x27;</span> * (<span class=\"number\">8</span> - (l % <span class=\"number\">8</span>))</span><br><span class=\"line\">        code = code</span><br><span class=\"line\">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class=\"line\">        encode = cl.encrypt(code)</span><br><span class=\"line\">        <span class=\"comment\"># hex_encode = codecs.encode(encode, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> encode</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">def</span> <span class=\"title function_\">Decrypt</span>(<span class=\"params\">self, string, key</span>):</span><br><span class=\"line\">        key = key</span><br><span class=\"line\">        string = string</span><br><span class=\"line\">        cl = Blowfish.new(key, Blowfish.MODE_ECB)</span><br><span class=\"line\">        <span class=\"comment\"># codecs.decode(string, &#x27;hex_codec&#x27;)  # 可以根据自己需要更改hex_codec</span></span><br><span class=\"line\">        ciphertext = string</span><br><span class=\"line\">        code = cl.decrypt(ciphertext)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;%s&quot;</span> % (code)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># encode = b&#x27;8749C71106E48B51&#x27;</span></span><br><span class=\"line\">    code = <span class=\"string\">b&#x27;ddddwwwaaawwwddd&#x27;</span></span><br><span class=\"line\">    key_array = [<span class=\"number\">0x00</span>, <span class=\"number\">0x0F</span>, <span class=\"number\">0x1A</span>, <span class=\"number\">0x01</span>, <span class=\"number\">0x35</span>, <span class=\"number\">0x3A</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x20</span>]</span><br><span class=\"line\">    key = <span class=\"built_in\">bytes</span>(key_array)</span><br><span class=\"line\">    gw = blowfish()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;明文密码：%s，经过key：%s加密之后的加密密码是：%s&quot;</span> % (code, key, gw.Encrypt(code, key)))</span><br><span class=\"line\">    encode = gw.Encrypt(code, key)</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(encode.<span class=\"built_in\">hex</span>())</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;加密密码：%s，经过key：%s解密之后的明文密码是：%s&quot;</span> %</span><br><span class=\"line\">          (encode, key, gw.Decrypt(encode, key)))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>","path":"2024/07/15/blowfish例题-RCTF-DontEatMe/","permalink":"https://airrcat.github.io/2024/07/15/blowfish%E4%BE%8B%E9%A2%98-RCTF-DontEatMe/","tags":[{"name":"CTF","_id":"clxidry3z000bccw01dimat95","slug":"CTF","path":"tags/CTF/","permalink":"https://airrcat.github.io/tags/CTF/","length":4},{"name":"Reverse","_id":"clymue8320001v8w00yfidr7z","slug":"Reverse","path":"tags/Reverse/","permalink":"https://airrcat.github.io/tags/Reverse/","length":2},{"name":"Blowfish","_id":"clymue8340002v8w02xl568gn","slug":"Blowfish","path":"tags/Blowfish/","permalink":"https://airrcat.github.io/tags/Blowfish/","length":1},{"name":"Maze","_id":"clymue8350003v8w0526s1dfj","slug":"Maze","path":"tags/Maze/","permalink":"https://airrcat.github.io/tags/Maze/","length":1}],"categories":[],"prev":null,"next":{"title":"Short solution about unicorn error: Could not allocate dynamic translator buffer","date":"2024-06-18T07:40:23.000Z","slug":"Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer","published":true,"updated":"2024-06-18T08:48:02.000Z","_id":"clxk5kad90000qww07mtf4ndc","layout":"post","photos":[],"excerpt":"","path":"2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/","permalink":"https://airrcat.github.io/2024/06/18/Short-solution-about-unicorn-error-Could-not-allocate-dynamic-translator-buffer/","__post":true},"__post":true}