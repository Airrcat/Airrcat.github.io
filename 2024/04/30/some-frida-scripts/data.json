{"title":"some frida scripts","date":"2024-04-30T02:44:22.000Z","source":"_posts/some-frida-scripts.md","raw":"---\ntitle: some frida scripts\ndate: 2024-04-30 10:44:22\ntags: [Android, Frida]\n---\n\n| frida script           | status |\n| ---------------------- | ------ |\n| hook java Android Api  | √      |\n| hook new StringBuilder | √      |\n| modify func retVal     | √      |\n| traceback              | √      |\n| hook native func       | √      |\n| hook win dll           | √      |\n\n<!-- toc -->\n\n## hook java android api\n\n```js\n// frida -U -f com.example.frida_java_anti_frida -l .\\hook_java_android_api.js\nif (Java.available) {\n\tJava.perform(function () {\n\t\tvar AppCompatActivity = Java.use(\n\t\t\t\"androidx.appcompat.app.AppCompatActivity\"\n\t\t);\n\t\tvar setSupportActionBar = AppCompatActivity.setSupportActionBar;\n\t\tsetSupportActionBar.implementation = function (arg) {\n\t\t\tvar retVal = this.setSupportActionBar(arg);\n\t\t\tconsole.log(\"hook!\");\n\t\t\treturn retVal;\n\t\t};\n\t});\n} else console.log(\"Java not available\");\n```\n\n## hook new SrtingBuilder\n\n```js\n// 检查java runtime可用性\nif (Java.available) {\n\tconsole.log(\"Java available\");\n\n\tJava.perform(function () {\n\t\tconsole.log(\"boot java perform function\");\n\t\tvar MainActivity = Java.use(\n\t\t\t\"com.example.frida_java_test_3.MainActivity\"\n\t\t);\n\t\tconsole.log(\"load class\");\n\n\t\tJava.use(\"java.lang.StringBuilder\").$init.overload(\n\t\t\t\"java.lang.String\"\n\t\t).implementation = function (args) {\n\t\t\t// init？new?\n\t\t\tconst StringBuilder = Java.use(\"java.lang.StringBuilder\");\n\t\t\tvar arg = args;\n\t\t\tvar result = this.$new(args);\n\t\t\tconsole.log(\"the StringBuilder arg :\", arg);\n\t\t\tif (arg == \"hack me\") {\n\t\t\t\tconsole.log(\"check magic str!\");\n\t\t\t\tconsole.log(\"hack it!\");\n\t\t\t\tresult = this.$new(\"hacked!\");\n\t\t\t\targs = result;\n\t\t\t}\n\t\t\tconsole.log(\"ret:\", result);\n\t\t\tresult = this.$init(args);\n\t\t\treturn;\n\t\t\t// var a\n\t\t\t//return a\n\t\t};\n\n\t\tMainActivity.getOne.implementation = function () {\n\t\t\tvar retVal = this.getOne();\n\t\t\tconsole.log(retVal);\n\t\t\treturn retVal.toString();\n\t\t};\n\t});\n} else console.log(\"Java not available\");\n```\n\n## modify func retVal\n\n```js\n// 检查java runtime可用性\nif (Java.available) {\n\tconsole.log(\"Java available\");\n\t// **app's class loader？\n\t// **Ensures that the current thread is attached to the VM and calls fn. (This isn't necessary in callbacks from Java.)？\n\t// 如果无需等待class loader的初始化，则调用performNow\n\tJava.perform(function () {\n\t\tconsole.log(\"boot java perform function\");\n\t\t// 获取MainActivity类\n\t\t// 可以获取其它类的实例\n\t\t// Uses the app's class loader, but you may access classes on other loaders by calling Java.ClassFactory.get()\n\t\tvar MainActivity = Java.use(\n\t\t\t\"com.example.frida_java_test_1.MainActivity\"\n\t\t);\n\t\t// 获取MainActivity的getOne实例（实际上是一个函数）\n\t\tvar getOne = MainActivity.getOne;\n\t\t// 重写实现\n\n\t\tgetOne.implementation = function () {\n\t\t\t// 先正常地走原函数的逻辑并获取返回值.\n\t\t\tvar result = this.getOne();\n\t\t\t// 打印返回值并篡改。\n\t\t\tconsole.log(\"Get return value\", \",value =>\", result);\n\t\t\tresult = \"Hacked!\";\n\t\t\tconsole.log(\"It will be hooked to \", result);\n\t\t\t// 返回我们所篡改的返回值\n\t\t\treturn result;\n\t\t};\n\t});\n} else console.log(\"Java not available\");\n```\n\n## traceback\n\n```js\n// 打印onCreate时的调用堆栈\nif (Java.available) {\n\tJava.perform(function () {\n\t\tvar classname = \"com.example.\" + \"antifrida\" + \".MainActivity\";\n\t\tvar onCreate = Java.use(classname).onCreate;\n\t\tonCreate.overload(\"android.os.Bundle\").implementation = function (\n\t\t\targs\n\t\t) {\n\t\t\tconsole.log(\n\t\t\t\tJava.use(\"android.util.Log\").getStackTraceString(\n\t\t\t\t\tJava.use(\"java.lang.Throwable\").$new()\n\t\t\t\t)\n\t\t\t);\n\t\t\tthis.onCreate(args);\n\t\t};\n\t});\n}\n```\n\n## hook native func\n\n```js\nif (Java.available) {\n\t// Interceptor.attach第一参为hook的函数地址，第二参为导出函数\n\t// Module.findExportByName通过函数导出的名字获得该函数地址，常与Interceptor打配合\n\tInterceptor.attach(\n\t\tModule.findExportByName(\n\t\t\t\"libanti_frida.so\",\n\t\t\t\"Java_com_example_antifrida_MainActivity_HelloWorld\"\n\t\t),\n\t\t{\n\t\t\t// Interceptor.attach的callback应该是只走onEnter和onLeave这两个函数，且入参固定为\n\t\t\t// 其参数分别为入参和返回值\n\t\t\tonEnter: function (args) {\n\t\t\t\tconsole.log(\"Enter native HelloWorld ——\");\n\t\t\t},\n\t\t\tonLeave: function (retVal) {\n\t\t\t\tconsole.log(\"Leave native HelloWorld ——\");\n\t\t\t\tconsole.log(\"retVal : \", retVal);\n\t\t\t\tconsole.log(\"try to modify it to : \", \"hacked!\");\n\t\t\t\t// 制作jni规范的string串，mark\n\t\t\t\tvar env = Java.vm.getEnv(); //获取env对象，即第一个参数\n\t\t\t\tvar jstrings = env.newStringUtf(\"hacked!\"); //返回的是字符串指针，构造一个newStringUtf对象用来代替这个指针\n\t\t\t\tretVal.replace(jstrings); //替换返回值\n\t\t\t},\n\t\t}\n\t);\n\t// hook其它导出函数，可隐去。\n\tvar addr = Module.findExportByName(\"libanti_frida.so\", \"hello_world\");\n\tconsole.log(\"hello_world addr : \", addr);\n\tInterceptor.attach(addr, {\n\t\tonEnter: function (args) {\n\t\t\tconsole.log(\"Enter native hello_world ——\");\n\t\t},\n\t\tonLeave: function (retVal) {\n\t\t\tconsole.log(\"Leave native hello_world ——\");\n\t\t\t// 返回的是字符串地址，用readUtf8String解释地址\n\t\t\tconsole.log(\"retVal : \", retVal.readUtf8String());\n\t\t},\n\t});\n\t// // 通过地址直接计算并hook\n\tvar str_name_so = \"libanti_frida.so\"; //需要hook的so名\n\tvar n_addr_func_offset = 0x00001970; //需要hook的函数的偏移\n\tvar n_addr_so = Module.findBaseAddress(str_name_so); //加载到内存后 函数地址 = so地址 + 函数偏移\n\tvar n_addr_func = parseInt(n_addr_so, 16) + n_addr_func_offset;\n\t// 应该是使用规范\n\tvar ptr_func = new NativePointer(n_addr_func);\n\tconsole.log(\"hello_world addr : \", ptr_func);\n\tInterceptor.attach(ptr_func, {\n\t\t//onEnter: 进入该函数前要执行的代码，其中args是传入的参数，一般so层函数第一个参数都是JniEnv，第二个参数是jclass，从第三个参数开始是我们java层传入的参数\n\t\tonEnter: function (args) {\n\t\t\tconsole.log(\"address hook start\");\n\t\t},\n\t\tonLeave: function (retval) {\n\t\t\t//onLeave: 该函数执行结束要执行的代码，其中retval参数即是返回值\n\t\t\tconsole.log(\"return\"); //返回值\n\t\t},\n\t});\n} else {\n\tconsole.log(\"boot err\");\n}\n```\n\n## hook win dll\n\n```js\n//find dll address\nconst baseAddr = Module.findBaseAddress(\"mydll.dll\");\nconsole.log(\"[+] mydll.dll baseAddr:\" + baseAddr);\n\nconst encode = resolveAddress(\"0x180011082\");\nconsole.log(\n\t\"[+] Module found encode addr: \" +\n\t\tModule.findExportByName(\"mydll.dll\", \"encode\")\n);\nInterceptor.attach(encode, {\n\tonEnter: function (args) {\n\t\tconsole.log(\"\");\n\t\tconsole.log(\"[+] Called encode: \" + this.context.rip);\n\t\tconsole.log(\"[+] a: \" + args[0].readAnsiString(4));\n\t\tconsole.log(\"[+] key: \" + args[1]); // Plaintext// Length of data to en/decrypt\n\t\t//dumpAddr(\"Input\", args[0], args[1].toInt32());\n\t\t//this.outptr = args[2]; // Store arg2 and arg3 in order to see when we leave the function\n\t\t//this.outsize = args[3].toInt32();\n\t},\n\tonLeave: function (retVal) {\n\t\tconsole.log(\"[+] Returned from func encode: \" + this.context.rip);\n\t},\n});\n\nfunction resolveAddress(addr) {\n\tconst base = ptr(\"0x180000000\"); //ter the base address of jvm.dll as seen in your favorite disassembler\n\tconst offset = ptr(addr).sub(base); //Calculate offset in memory from base address in disassembler database\n\tconst result = baseAddr.add(offset); //Add current memory base address to offset of function to monitor\n\tconsole.log(\"[+] New addr=\" + result); // Write location of function in memory to console\n\treturn result;\n}\nfunction dumpAddr(info, addr, size) {\n\tif (addr.isNull()) return;\n\n\tconsole.log(\"Data dump \" + info + \" :\");\n\tconst buf = addr.readByteArray(size);\n\n\tconsole.log(\n\t\thexdump(buf, { offset: 0, length: size, header: true, ansi: true })\n\t);\n}\n```\n\n","slug":"some-frida-scripts","published":true,"updated":"2024-04-30T03:43:12.000Z","_id":"clw8xuz03000578w0dht70yl2","comments":true,"layout":"post","photos":[],"html":"<table>\n<thead>\n<tr>\n<th>frida script</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hook java Android Api</td>\n<td>√</td>\n</tr>\n<tr>\n<td>hook new StringBuilder</td>\n<td>√</td>\n</tr>\n<tr>\n<td>modify func retVal</td>\n<td>√</td>\n</tr>\n<tr>\n<td>traceback</td>\n<td>√</td>\n</tr>\n<tr>\n<td>hook native func</td>\n<td>√</td>\n</tr>\n<tr>\n<td>hook win dll</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<!-- toc -->\n\n<ul>\n<li><a href=\"#hook-java-android-api\">hook java android api</a></li>\n<li><a href=\"#hook-new-srtingbuilder\">hook new SrtingBuilder</a></li>\n<li><a href=\"#modify-func-retval\">modify func retVal</a></li>\n<li><a href=\"#traceback\">traceback</a></li>\n<li><a href=\"#hook-native-func\">hook native func</a></li>\n<li><a href=\"#hook-win-dll\">hook win dll</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2><span id=\"hook-java-android-api\">hook java android api</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// frida -U -f com.example.frida_java_anti_frida -l .\\hook_java_android_api.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"title class_\">AppCompatActivity</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;androidx.appcompat.app.AppCompatActivity&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> setSupportActionBar = <span class=\"title class_\">AppCompatActivity</span>.<span class=\"property\">setSupportActionBar</span>;</span><br><span class=\"line\">\t\tsetSupportActionBar.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> retVal = <span class=\"variable language_\">this</span>.<span class=\"title function_\">setSupportActionBar</span>(arg);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hook!&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"hook-new-srtingbuilder\">hook new SrtingBuilder</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查java runtime可用性</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java available&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;boot java perform function&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"title class_\">MainActivity</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;com.example.frida_java_test_3.MainActivity&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;load class&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;java.lang.StringBuilder&quot;</span>).<span class=\"property\">$init</span>.<span class=\"title function_\">overload</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;java.lang.String&quot;</span></span><br><span class=\"line\">\t\t).<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// init？new?</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> <span class=\"title class_\">StringBuilder</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;java.lang.StringBuilder&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> arg = args;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> result = <span class=\"variable language_\">this</span>.$new(args);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the StringBuilder arg :&quot;</span>, arg);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arg == <span class=\"string\">&quot;hack me&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;check magic str!&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hack it!&quot;</span>);</span><br><span class=\"line\">\t\t\t\tresult = <span class=\"variable language_\">this</span>.$new(<span class=\"string\">&quot;hacked!&quot;</span>);</span><br><span class=\"line\">\t\t\t\targs = result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ret:&quot;</span>, result);</span><br><span class=\"line\">\t\t\tresult = <span class=\"variable language_\">this</span>.$init(args);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// var a</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//return a</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title class_\">MainActivity</span>.<span class=\"property\">getOne</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> retVal = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOne</span>();</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(retVal);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> retVal.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"modify-func-retval\">modify func retVal</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查java runtime可用性</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java available&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// **app&#x27;s class loader？</span></span><br><span class=\"line\">\t<span class=\"comment\">// **Ensures that the current thread is attached to the VM and calls fn. (This isn&#x27;t necessary in callbacks from Java.)？</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果无需等待class loader的初始化，则调用performNow</span></span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;boot java perform function&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取MainActivity类</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 可以获取其它类的实例</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Uses the app&#x27;s class loader, but you may access classes on other loaders by calling Java.ClassFactory.get()</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"title class_\">MainActivity</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;com.example.frida_java_test_1.MainActivity&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取MainActivity的getOne实例（实际上是一个函数）</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> getOne = <span class=\"title class_\">MainActivity</span>.<span class=\"property\">getOne</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 重写实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tgetOne.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 先正常地走原函数的逻辑并获取返回值.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> result = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOne</span>();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 打印返回值并篡改。</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Get return value&quot;</span>, <span class=\"string\">&quot;,value =&gt;&quot;</span>, result);</span><br><span class=\"line\">\t\t\tresult = <span class=\"string\">&quot;Hacked!&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;It will be hooked to &quot;</span>, result);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回我们所篡改的返回值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"traceback\">traceback</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印onCreate时的调用堆栈</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> classname = <span class=\"string\">&quot;com.example.&quot;</span> + <span class=\"string\">&quot;antifrida&quot;</span> + <span class=\"string\">&quot;.MainActivity&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> onCreate = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(classname).<span class=\"property\">onCreate</span>;</span><br><span class=\"line\">\t\tonCreate.<span class=\"title function_\">overload</span>(<span class=\"string\">&quot;android.os.Bundle&quot;</span>).<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t\targs</span></span><br><span class=\"line\"><span class=\"params\">\t\t</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;android.util.Log&quot;</span>).<span class=\"title function_\">getStackTraceString</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class=\"line\">\t\t\t\t)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">onCreate</span>(args);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"hook-native-func\">hook native func</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Interceptor.attach第一参为hook的函数地址，第二参为导出函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// Module.findExportByName通过函数导出的名字获得该函数地址，常与Interceptor打配合</span></span><br><span class=\"line\">\t<span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(</span><br><span class=\"line\">\t\t<span class=\"title class_\">Module</span>.<span class=\"title function_\">findExportByName</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;libanti_frida.so&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Java_com_example_antifrida_MainActivity_HelloWorld&quot;</span></span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Interceptor.attach的callback应该是只走onEnter和onLeave这两个函数，且入参固定为</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 其参数分别为入参和返回值</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Enter native HelloWorld ——&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retVal</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Leave native HelloWorld ——&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;retVal : &quot;</span>, retVal);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;try to modify it to : &quot;</span>, <span class=\"string\">&quot;hacked!&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 制作jni规范的string串，mark</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> env = <span class=\"title class_\">Java</span>.<span class=\"property\">vm</span>.<span class=\"title function_\">getEnv</span>(); <span class=\"comment\">//获取env对象，即第一个参数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> jstrings = env.<span class=\"title function_\">newStringUtf</span>(<span class=\"string\">&quot;hacked!&quot;</span>); <span class=\"comment\">//返回的是字符串指针，构造一个newStringUtf对象用来代替这个指针</span></span><br><span class=\"line\">\t\t\t\tretVal.<span class=\"title function_\">replace</span>(jstrings); <span class=\"comment\">//替换返回值</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"comment\">// hook其它导出函数，可隐去。</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> addr = <span class=\"title class_\">Module</span>.<span class=\"title function_\">findExportByName</span>(<span class=\"string\">&quot;libanti_frida.so&quot;</span>, <span class=\"string\">&quot;hello_world&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello_world addr : &quot;</span>, addr);</span><br><span class=\"line\">\t<span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(addr, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Enter native hello_world ——&quot;</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retVal</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Leave native hello_world ——&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回的是字符串地址，用readUtf8String解释地址</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;retVal : &quot;</span>, retVal.<span class=\"title function_\">readUtf8String</span>());</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// // 通过地址直接计算并hook</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str_name_so = <span class=\"string\">&quot;libanti_frida.so&quot;</span>; <span class=\"comment\">//需要hook的so名</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n_addr_func_offset = <span class=\"number\">0x00001970</span>; <span class=\"comment\">//需要hook的函数的偏移</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n_addr_so = <span class=\"title class_\">Module</span>.<span class=\"title function_\">findBaseAddress</span>(str_name_so); <span class=\"comment\">//加载到内存后 函数地址 = so地址 + 函数偏移</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n_addr_func = <span class=\"built_in\">parseInt</span>(n_addr_so, <span class=\"number\">16</span>) + n_addr_func_offset;</span><br><span class=\"line\">\t<span class=\"comment\">// 应该是使用规范</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ptr_func = <span class=\"keyword\">new</span> <span class=\"title class_\">NativePointer</span>(n_addr_func);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello_world addr : &quot;</span>, ptr_func);</span><br><span class=\"line\">\t<span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(ptr_func, &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//onEnter: 进入该函数前要执行的代码，其中args是传入的参数，一般so层函数第一个参数都是JniEnv，第二个参数是jclass，从第三个参数开始是我们java层传入的参数</span></span><br><span class=\"line\">\t\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;address hook start&quot;</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retval</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//onLeave: 该函数执行结束要执行的代码，其中retval参数即是返回值</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;return&quot;</span>); <span class=\"comment\">//返回值</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;boot err&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2><span id=\"hook-win-dll\">hook win dll</span></h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//find dll address</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseAddr = <span class=\"title class_\">Module</span>.<span class=\"title function_\">findBaseAddress</span>(<span class=\"string\">&quot;mydll.dll&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] mydll.dll baseAddr:&quot;</span> + baseAddr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> encode = <span class=\"title function_\">resolveAddress</span>(<span class=\"string\">&quot;0x180011082&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t<span class=\"string\">&quot;[+] Module found encode addr: &quot;</span> +</span><br><span class=\"line\">\t\t<span class=\"title class_\">Module</span>.<span class=\"title function_\">findExportByName</span>(<span class=\"string\">&quot;mydll.dll&quot;</span>, <span class=\"string\">&quot;encode&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(encode, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] Called encode: &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"property\">rip</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] a: &quot;</span> + args[<span class=\"number\">0</span>].<span class=\"title function_\">readAnsiString</span>(<span class=\"number\">4</span>));</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] key: &quot;</span> + args[<span class=\"number\">1</span>]); <span class=\"comment\">// Plaintext// Length of data to en/decrypt</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//dumpAddr(&quot;Input&quot;, args[0], args[1].toInt32());</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this.outptr = args[2]; // Store arg2 and arg3 in order to see when we leave the function</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this.outsize = args[3].toInt32();</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retVal</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] Returned from func encode: &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"property\">rip</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveAddress</span>(<span class=\"params\">addr</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> base = <span class=\"title function_\">ptr</span>(<span class=\"string\">&quot;0x180000000&quot;</span>); <span class=\"comment\">//ter the base address of jvm.dll as seen in your favorite disassembler</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> offset = <span class=\"title function_\">ptr</span>(addr).<span class=\"title function_\">sub</span>(base); <span class=\"comment\">//Calculate offset in memory from base address in disassembler database</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> result = baseAddr.<span class=\"title function_\">add</span>(offset); <span class=\"comment\">//Add current memory base address to offset of function to monitor</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] New addr=&quot;</span> + result); <span class=\"comment\">// Write location of function in memory to console</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dumpAddr</span>(<span class=\"params\">info, addr, size</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (addr.<span class=\"title function_\">isNull</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Data dump &quot;</span> + info + <span class=\"string\">&quot; :&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buf = addr.<span class=\"title function_\">readByteArray</span>(size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t\t<span class=\"title function_\">hexdump</span>(buf, &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0</span>, <span class=\"attr\">length</span>: size, <span class=\"attr\">header</span>: <span class=\"literal\">true</span>, <span class=\"attr\">ansi</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>frida script</th>\n<th>status</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>hook java Android Api</td>\n<td>√</td>\n</tr>\n<tr>\n<td>hook new StringBuilder</td>\n<td>√</td>\n</tr>\n<tr>\n<td>modify func retVal</td>\n<td>√</td>\n</tr>\n<tr>\n<td>traceback</td>\n<td>√</td>\n</tr>\n<tr>\n<td>hook native func</td>\n<td>√</td>\n</tr>\n<tr>\n<td>hook win dll</td>\n<td>√</td>\n</tr>\n</tbody></table>\n<!-- toc -->\n\n<ul>\n<li><a href=\"#hook-java-android-api\">hook java android api</a></li>\n<li><a href=\"#hook-new-srtingbuilder\">hook new SrtingBuilder</a></li>\n<li><a href=\"#modify-func-retval\">modify func retVal</a></li>\n<li><a href=\"#traceback\">traceback</a></li>\n<li><a href=\"#hook-native-func\">hook native func</a></li>\n<li><a href=\"#hook-win-dll\">hook win dll</a></li>\n</ul>\n<!-- tocstop -->\n\n<h2 id=\"hook-java-android-api\"><a href=\"#hook-java-android-api\" class=\"headerlink\" title=\"hook java android api\"></a>hook java android api</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// frida -U -f com.example.frida_java_anti_frida -l .\\hook_java_android_api.js</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"title class_\">AppCompatActivity</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;androidx.appcompat.app.AppCompatActivity&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> setSupportActionBar = <span class=\"title class_\">AppCompatActivity</span>.<span class=\"property\">setSupportActionBar</span>;</span><br><span class=\"line\">\t\tsetSupportActionBar.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> retVal = <span class=\"variable language_\">this</span>.<span class=\"title function_\">setSupportActionBar</span>(arg);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hook!&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hook-new-SrtingBuilder\"><a href=\"#hook-new-SrtingBuilder\" class=\"headerlink\" title=\"hook new SrtingBuilder\"></a>hook new SrtingBuilder</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查java runtime可用性</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java available&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;boot java perform function&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"title class_\">MainActivity</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;com.example.frida_java_test_3.MainActivity&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;load class&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;java.lang.StringBuilder&quot;</span>).<span class=\"property\">$init</span>.<span class=\"title function_\">overload</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;java.lang.String&quot;</span></span><br><span class=\"line\">\t\t).<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// init？new?</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">const</span> <span class=\"title class_\">StringBuilder</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;java.lang.StringBuilder&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> arg = args;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> result = <span class=\"variable language_\">this</span>.$new(args);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;the StringBuilder arg :&quot;</span>, arg);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (arg == <span class=\"string\">&quot;hack me&quot;</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;check magic str!&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hack it!&quot;</span>);</span><br><span class=\"line\">\t\t\t\tresult = <span class=\"variable language_\">this</span>.$new(<span class=\"string\">&quot;hacked!&quot;</span>);</span><br><span class=\"line\">\t\t\t\targs = result;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;ret:&quot;</span>, result);</span><br><span class=\"line\">\t\t\tresult = <span class=\"variable language_\">this</span>.$init(args);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// var a</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">//return a</span></span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"title class_\">MainActivity</span>.<span class=\"property\">getOne</span>.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> retVal = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOne</span>();</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(retVal);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> retVal.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"modify-func-retVal\"><a href=\"#modify-func-retVal\" class=\"headerlink\" title=\"modify func retVal\"></a>modify func retVal</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检查java runtime可用性</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java available&quot;</span>);</span><br><span class=\"line\">\t<span class=\"comment\">// **app&#x27;s class loader？</span></span><br><span class=\"line\">\t<span class=\"comment\">// **Ensures that the current thread is attached to the VM and calls fn. (This isn&#x27;t necessary in callbacks from Java.)？</span></span><br><span class=\"line\">\t<span class=\"comment\">// 如果无需等待class loader的初始化，则调用performNow</span></span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;boot java perform function&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取MainActivity类</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// 可以获取其它类的实例</span></span><br><span class=\"line\">\t\t<span class=\"comment\">// Uses the app&#x27;s class loader, but you may access classes on other loaders by calling Java.ClassFactory.get()</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> <span class=\"title class_\">MainActivity</span> = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;com.example.frida_java_test_1.MainActivity&quot;</span></span><br><span class=\"line\">\t\t);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取MainActivity的getOne实例（实际上是一个函数）</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> getOne = <span class=\"title class_\">MainActivity</span>.<span class=\"property\">getOne</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 重写实现</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\tgetOne.<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 先正常地走原函数的逻辑并获取返回值.</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">var</span> result = <span class=\"variable language_\">this</span>.<span class=\"title function_\">getOne</span>();</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 打印返回值并篡改。</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Get return value&quot;</span>, <span class=\"string\">&quot;,value =&gt;&quot;</span>, result);</span><br><span class=\"line\">\t\t\tresult = <span class=\"string\">&quot;Hacked!&quot;</span>;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;It will be hooked to &quot;</span>, result);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回我们所篡改的返回值</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"traceback\"><a href=\"#traceback\" class=\"headerlink\" title=\"traceback\"></a>traceback</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 打印onCreate时的调用堆栈</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">perform</span>(<span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> classname = <span class=\"string\">&quot;com.example.&quot;</span> + <span class=\"string\">&quot;antifrida&quot;</span> + <span class=\"string\">&quot;.MainActivity&quot;</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> onCreate = <span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(classname).<span class=\"property\">onCreate</span>;</span><br><span class=\"line\">\t\tonCreate.<span class=\"title function_\">overload</span>(<span class=\"string\">&quot;android.os.Bundle&quot;</span>).<span class=\"property\">implementation</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span></span><br><span class=\"line\"><span class=\"params\">\t\t\targs</span></span><br><span class=\"line\"><span class=\"params\">\t\t</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t\t\t\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;android.util.Log&quot;</span>).<span class=\"title function_\">getStackTraceString</span>(</span><br><span class=\"line\">\t\t\t\t\t<span class=\"title class_\">Java</span>.<span class=\"title function_\">use</span>(<span class=\"string\">&quot;java.lang.Throwable&quot;</span>).$new()</span><br><span class=\"line\">\t\t\t\t)</span><br><span class=\"line\">\t\t\t);</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">this</span>.<span class=\"title function_\">onCreate</span>(args);</span><br><span class=\"line\">\t\t&#125;;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hook-native-func\"><a href=\"#hook-native-func\" class=\"headerlink\" title=\"hook native func\"></a>hook native func</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"title class_\">Java</span>.<span class=\"property\">available</span>) &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// Interceptor.attach第一参为hook的函数地址，第二参为导出函数</span></span><br><span class=\"line\">\t<span class=\"comment\">// Module.findExportByName通过函数导出的名字获得该函数地址，常与Interceptor打配合</span></span><br><span class=\"line\">\t<span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(</span><br><span class=\"line\">\t\t<span class=\"title class_\">Module</span>.<span class=\"title function_\">findExportByName</span>(</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;libanti_frida.so&quot;</span>,</span><br><span class=\"line\">\t\t\t<span class=\"string\">&quot;Java_com_example_antifrida_MainActivity_HelloWorld&quot;</span></span><br><span class=\"line\">\t\t),</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// Interceptor.attach的callback应该是只走onEnter和onLeave这两个函数，且入参固定为</span></span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 其参数分别为入参和返回值</span></span><br><span class=\"line\">\t\t\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Enter native HelloWorld ——&quot;</span>);</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retVal</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Leave native HelloWorld ——&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;retVal : &quot;</span>, retVal);</span><br><span class=\"line\">\t\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;try to modify it to : &quot;</span>, <span class=\"string\">&quot;hacked!&quot;</span>);</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">// 制作jni规范的string串，mark</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> env = <span class=\"title class_\">Java</span>.<span class=\"property\">vm</span>.<span class=\"title function_\">getEnv</span>(); <span class=\"comment\">//获取env对象，即第一个参数</span></span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> jstrings = env.<span class=\"title function_\">newStringUtf</span>(<span class=\"string\">&quot;hacked!&quot;</span>); <span class=\"comment\">//返回的是字符串指针，构造一个newStringUtf对象用来代替这个指针</span></span><br><span class=\"line\">\t\t\t\tretVal.<span class=\"title function_\">replace</span>(jstrings); <span class=\"comment\">//替换返回值</span></span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t);</span><br><span class=\"line\">\t<span class=\"comment\">// hook其它导出函数，可隐去。</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> addr = <span class=\"title class_\">Module</span>.<span class=\"title function_\">findExportByName</span>(<span class=\"string\">&quot;libanti_frida.so&quot;</span>, <span class=\"string\">&quot;hello_world&quot;</span>);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello_world addr : &quot;</span>, addr);</span><br><span class=\"line\">\t<span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(addr, &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Enter native hello_world ——&quot;</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retVal</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Leave native hello_world ——&quot;</span>);</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 返回的是字符串地址，用readUtf8String解释地址</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;retVal : &quot;</span>, retVal.<span class=\"title function_\">readUtf8String</span>());</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t<span class=\"comment\">// // 通过地址直接计算并hook</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> str_name_so = <span class=\"string\">&quot;libanti_frida.so&quot;</span>; <span class=\"comment\">//需要hook的so名</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n_addr_func_offset = <span class=\"number\">0x00001970</span>; <span class=\"comment\">//需要hook的函数的偏移</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n_addr_so = <span class=\"title class_\">Module</span>.<span class=\"title function_\">findBaseAddress</span>(str_name_so); <span class=\"comment\">//加载到内存后 函数地址 = so地址 + 函数偏移</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> n_addr_func = <span class=\"built_in\">parseInt</span>(n_addr_so, <span class=\"number\">16</span>) + n_addr_func_offset;</span><br><span class=\"line\">\t<span class=\"comment\">// 应该是使用规范</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> ptr_func = <span class=\"keyword\">new</span> <span class=\"title class_\">NativePointer</span>(n_addr_func);</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;hello_world addr : &quot;</span>, ptr_func);</span><br><span class=\"line\">\t<span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(ptr_func, &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//onEnter: 进入该函数前要执行的代码，其中args是传入的参数，一般so层函数第一个参数都是JniEnv，第二个参数是jclass，从第三个参数开始是我们java层传入的参数</span></span><br><span class=\"line\">\t\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;address hook start&quot;</span>);</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retval</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//onLeave: 该函数执行结束要执行的代码，其中retval参数即是返回值</span></span><br><span class=\"line\">\t\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;return&quot;</span>); <span class=\"comment\">//返回值</span></span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;boot err&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hook-win-dll\"><a href=\"#hook-win-dll\" class=\"headerlink\" title=\"hook win dll\"></a>hook win dll</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//find dll address</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> baseAddr = <span class=\"title class_\">Module</span>.<span class=\"title function_\">findBaseAddress</span>(<span class=\"string\">&quot;mydll.dll&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] mydll.dll baseAddr:&quot;</span> + baseAddr);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> encode = <span class=\"title function_\">resolveAddress</span>(<span class=\"string\">&quot;0x180011082&quot;</span>);</span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t<span class=\"string\">&quot;[+] Module found encode addr: &quot;</span> +</span><br><span class=\"line\">\t\t<span class=\"title class_\">Module</span>.<span class=\"title function_\">findExportByName</span>(<span class=\"string\">&quot;mydll.dll&quot;</span>, <span class=\"string\">&quot;encode&quot;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"title class_\">Interceptor</span>.<span class=\"title function_\">attach</span>(encode, &#123;</span><br><span class=\"line\">\t<span class=\"attr\">onEnter</span>: <span class=\"keyword\">function</span> (<span class=\"params\">args</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;&quot;</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] Called encode: &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"property\">rip</span>);</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] a: &quot;</span> + args[<span class=\"number\">0</span>].<span class=\"title function_\">readAnsiString</span>(<span class=\"number\">4</span>));</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] key: &quot;</span> + args[<span class=\"number\">1</span>]); <span class=\"comment\">// Plaintext// Length of data to en/decrypt</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//dumpAddr(&quot;Input&quot;, args[0], args[1].toInt32());</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this.outptr = args[2]; // Store arg2 and arg3 in order to see when we leave the function</span></span><br><span class=\"line\">\t\t<span class=\"comment\">//this.outsize = args[3].toInt32();</span></span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t<span class=\"attr\">onLeave</span>: <span class=\"keyword\">function</span> (<span class=\"params\">retVal</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] Returned from func encode: &quot;</span> + <span class=\"variable language_\">this</span>.<span class=\"property\">context</span>.<span class=\"property\">rip</span>);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">resolveAddress</span>(<span class=\"params\">addr</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> base = <span class=\"title function_\">ptr</span>(<span class=\"string\">&quot;0x180000000&quot;</span>); <span class=\"comment\">//ter the base address of jvm.dll as seen in your favorite disassembler</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> offset = <span class=\"title function_\">ptr</span>(addr).<span class=\"title function_\">sub</span>(base); <span class=\"comment\">//Calculate offset in memory from base address in disassembler database</span></span><br><span class=\"line\">\t<span class=\"keyword\">const</span> result = baseAddr.<span class=\"title function_\">add</span>(offset); <span class=\"comment\">//Add current memory base address to offset of function to monitor</span></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;[+] New addr=&quot;</span> + result); <span class=\"comment\">// Write location of function in memory to console</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">dumpAddr</span>(<span class=\"params\">info, addr, size</span>) &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (addr.<span class=\"title function_\">isNull</span>()) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&quot;Data dump &quot;</span> + info + <span class=\"string\">&quot; :&quot;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> buf = addr.<span class=\"title function_\">readByteArray</span>(size);</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(</span><br><span class=\"line\">\t\t<span class=\"title function_\">hexdump</span>(buf, &#123; <span class=\"attr\">offset</span>: <span class=\"number\">0</span>, <span class=\"attr\">length</span>: size, <span class=\"attr\">header</span>: <span class=\"literal\">true</span>, <span class=\"attr\">ansi</span>: <span class=\"literal\">true</span> &#125;)</span><br><span class=\"line\">\t);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","path":"2024/04/30/some-frida-scripts/","permalink":"http://example.com/2024/04/30/some-frida-scripts/","tags":[{"name":"Android","_id":"clw8xuz07000a78w0g87ncwju","slug":"Android","path":"tags/Android/","permalink":"http://example.com/tags/Android/","length":1},{"name":"Frida","_id":"clw8xuz07000d78w0en7u712o","slug":"Frida","path":"tags/Frida/","permalink":"http://example.com/tags/Frida/","length":1}],"categories":[],"prev":{"title":"ctf做题记录-svm","date":"2024-04-30T07:38:52.000Z","slug":"ctf做题记录-svm","published":true,"updated":"2024-05-21T00:54:10.000Z","_id":"clw8xuyzs000078w04zxofv0s","layout":"post","photos":[],"excerpt":"","path":"2024/04/30/ctf做题记录-svm/","permalink":"http://example.com/2024/04/30/ctf%E5%81%9A%E9%A2%98%E8%AE%B0%E5%BD%95-svm/","__post":true},"next":{"title":"hash拓展攻击与例题hash_append","date":"2024-04-29T08:28:58.000Z","slug":"hash拓展攻击与例题hash-append","published":true,"updated":"2024-04-30T01:30:22.000Z","_id":"clw8xuz02000478w0ea5ggsxw","layout":"post","photos":[],"excerpt":"","path":"2024/04/29/hash拓展攻击与例题hash-append/","permalink":"http://example.com/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/","__post":true},"__post":true}