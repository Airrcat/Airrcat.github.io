{"title":"xyctf2023-re-writeup","date":"2024-04-28T14:33:07.000Z","source":"_posts/xyctf2023-re-writeup.md","raw":"---\ntitle: xyctf2023-re-writeup\ndate: 2024-04-28 22:33:07\ntags: CTF\n---\n\n感觉第一周最好玩，没了。\n\n## 聪明的信使\n\n九位凯撒。\nflag{Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!}\n\n## 给阿姨倒一杯卡布奇诺\n\n代码没去符号，一切都很明显，不多赘述\n![alt text](image.png)\n加密是魔改 xxtea。魔改了三处，其中还涉及一个全局变量\n![alt text](image-1.png)\n\n```python\nfrom ctypes import *\n\ndef encrypt(v, k):\n    v0, v1 = c_uint32(v[0]), c_uint32(v[1])\n    v0.value ^= 0x5F797274\n    v1.value ^= 0x64726168\n    delta = 0x6E75316C\n    k0, k1, k2, k3 = k[0], k[1], k[2], k[3]\n    total = c_uint32(0)\n    for i in range(32):\n        total.value += delta\n        v0.value += ((v1.value << 4) + k0) ^ (v1.value +                                          total.value) ^ ((v1.value >> 5) + k1) ^ (total.value + i)\n        v1.value += ((v0.value << 4) + k2) ^ (v0.value +                                        total.value) ^ ((v0.value >> 5) + k3) ^ (total.value + i)\n        print(hex(v0.value), hex(v1.value))\n    return v0.value, v1.value\n\ndata1 = 0x5F797274\ndata2 = 0x64726168\ndef decrypt(v, k):\n    global data1\n    global data2\n    v0, v1 = c_uint32(v[0]), c_uint32(v[1])\n    t_1 = v[0]\n    t_2 = v[1]\n    delta = 0x6E75316C\n    k0, k1, k2, k3 = k[0], k[1], k[2], k[3]\n\n    total = c_uint32(delta * 32)\n    for i in range(31, -1, -1):\n        v1.value -= ((v0.value << 4) + k2) ^ (v0.value +                                      total.value) ^ ((v0.value >> 5) + k3) ^ (total.value + i)\n        v0.value -= ((v1.value << 4) + k0) ^ (v1.value +                                     total.value) ^ ((v1.value >> 5) + k1) ^ (total.value + i)\n        total.value -= delta\n        # print(hex(v0.value), hex(v1.value))\n    v0.value ^= data1\n    v1.value ^= data2\n    data1 = t_1\n    data2 = t_2\n    return v0.value, v1.value\n\n# test\nif __name__ == \"__main__\":\n    # value = [0x880012C7, 0x58EE54]\n    value = [0x9B28ED45, 0x145EC6E9, 0x5B27A6C3, 0xE59E75D5,\n             0xE82C2500, 0xA4211D92, 0xCD8A4B62, 0xA668F440]\n    key = [0x65766967, 0x756F795F, 0x7075635F, 0x6165745F]\n\n    # 解密\n    flag2 = b\"\"\n    for i in range(0, len(value), 2):\n        res = decrypt(value[i:i+2], key)\n        flag2 += res[0].to_bytes(4, 'little') + res[1].to_bytes(4, 'little')\n        print(hex(res[1]))\n    print(flag2)\n```\n\n## 何须相思煮余年\n\n数据开头是 0x55，结尾是 0xc3，可认为是汇编机器码\n![alt text](image-2.png)\n转化为 hex 数据后 ida 查看（注意这里如果复制到 010editor 后使用 paste from hex text 会吞一些数据。）\n![alt text](image-3.png)\n直接解即可。\n![alt text](image-4.png)\nb'XYCTF{5b3e07567a9034d06851475481507a75}'\n\n## 今夕是何年\n\nida 和 die 都认为是未知架构。搜索架构码 or 搜索 cpu 特征可知可能是龙芯架构。\n配置 qemu 环境模拟执行\n![alt text](image-5.png)\n\n## 馒头\n\n![alt text](image-6.png)\n\n```python\ntree = [0x8DE, 0x395, 0x1BE, 0x0D9, 0x06A, 0x033, 0x014, 0x00F, 0x011,\n\n        0x0E5, 0x072, 0x010, 0x00B,\n\n        0x1D7, 0x0E9, 0x074, 0x00E, 0x00D,\n\n        0x0EE, 0x076, 0x00C, 0x007,\n\n        0x549, 0x22D, 0x0F8, 0x07B, 0x006, 0x018,\n\n        0x135, 0x089, 0x043, 0x003, 0x005,\n\n        0x0AC, 0x054, 0x004, 0x001,\n\n        0x31C, 0x17F, 0x0BA, 0x059, 0x002, 0x008,\n\n        0x0C5, 0x061, 0x030, 0x017, 0x00A, 0x015,\n\n        0x19D, 0x0CB, 0x065, 0x016, 0x009,\n\n        0x0D2, 0x068, 0x013, 0x012]\n\nfake_flag = \"1\"*24\n\nprint(fake_flag)\n\nlen_tree = len(tree)\n\nprint(len_tree)\n\nflag = [0] * 25\n\ndata = 0\n\ncount = 0\n\ndcount = 0\n\nprint(chr(0x65))\n\nfor i in range(len_tree-1, -1, -1):\n\n    if tree[i] < 25:\n\n        data = 0\n\n        dcount = 1\n\n        count += 1\n\n        continue\n\n    elif tree[i] < 0x7f:\n\n        flag[tree[i+dcount]] = tree[i]\n\n        data = tree[i]\n\n\n\n        dcount += 2\n\n        count -= 1\n\n\n\n    elif count > 0:\n\n        flag[tree[i+dcount]] = tree[i] - data\n\n        # flag.append(tree[i] - data)\n\n        data += tree[i]\n\n        count -= 1\n\n        dcount += 2\n\nprint(flag)\n\n# print(bytes(flag), len(flag))\n\nprint(hex(sum(flag)))\n\nflag = [0xac - 0x54, 0x59, 0x43, 0x54, 0x89-0x43, 0x7b, 0xee-0x76, 0xba-0x59, 0xcb-0x65, 0x61-0x30, 0xe5-0x72, 0x76, 0xe9-0x74,\n\n        0x74, 0x6a-0x33, 0x72, 0xd9-0x6a, 0xd2-0x68, 0x68, 0x33, 0xc5-0x61, 0x65, 0x30, 0xf8-0x7b]\n\nprint(bytes(flag))\n\n```\n\n## 喵喵喵的 flag 碎了一地\n\n推理游戏\n![alt text](image-7.png)\n![alt text](image-8.png)\n同个函数有不被解析的部分\n![alt text](image-9.png)\n\n## 你是真的大学生吗？\n\n汇编阅读。\n相邻两位依次异或\n![alt text](image-10.png)\n\n```python\ncipher = [0x76, 0x0E, 0x77, 0x14, 0x60, 0x06, 0x7D, 0x04, 0x6B, 0x1E,\n\n          0x41, 0x2A, 0x44, 0x2B, 0x5C, 0x03, 0x3B, 0x0B, 0x33, 0x05]\n\nfor i in range(len(cipher)-1, -1, -1):\n\n    cipher[i] = (cipher[i] ^ cipher[i-1])\n\nprint(bytes(cipher))\n```\n\n输出会有一位偏移，修复一下即可。\n![alt text](image-11.png)\nxyctf{you_know_8086}\n\n## 砸核桃\n\nNsPack，esp 定律或者附加下断点脱壳\n![alt text](image-12.png)\nesp：\npushad 后对 esp 的地址下硬件访问断点，待到 popad 或代码到 0x401000+后使用 dump 插件 dump 并调整\n![alt text](image-13.png)\n最后发现是一个异或\n\n```python\nkey = b\"this_is_not_flag\"\n\ncipher = [0x00000012, 0x00000004, 0x00000008, 0x00000014, 0x00000024, 0x0000005C, 0x0000004A, 0x0000003D, 0x00000056, 0x0000000A, 0x00000010, 0x00000067, 0x00000000, 0x00000041, 0x00000000, 0x00000001, 0x00000046, 0x0000005A, 0x00000044, 0x00000042, 0x0000006E, 0x0000000C,\n\n          0x00000044, 0x00000072, 0x0000000C, 0x0000000D, 0x00000040, 0x0000003E, 0x0000004B, 0x0000005F, 0x00000002, 0x00000001, 0x0000004C, 0x0000005E, 0x0000005B, 0x00000017, 0x0000006E, 0x0000000C, 0x00000016, 0x00000068, 0x0000005B, 0x00000012, 0x00000000, 0x00000000]\n\nfor i in range(42):\n\n    cipher[i] ^= key[i % len(key)]\n\nprint(bytes(cipher))\n```\n\n## babyUnity\n\n**该题可直接用 il2cppdumper 脱**\n脱完后建议直接用 dnspy 分析 assembly，可看见几个函数的偏移\n![alt text](image-14.png)\n在 ida 里直接 ctrl+g 飞过去，可看得函数逻辑（有些是空函数，空就别管）\n\n```python\nimport base64\n\n\ncipher = b\"\\x58\\x49\\x63\\x4B\\x59\\x4A\\x55\\x38\\x42\\x75\\x68\\x3A\\x55\\x65\\x56\\x3A\\x42\\x4B\\x4E\\x7B\\x55\\x5B\\x4A\\x76\\x55\\x4C\\x3F\\x3F\\x56\\x75\\x5A\\x3F\\x43\\x58\\x4A\\x3B\\x41\\x58\\x5E\\x7B\\x41\\x65\\x5D\\x67\\x41\\x5B\\x5D\\x67\\x55\\x65\\x63\\x62\\x40\\x4B\\x5D\\x65\\x69\\x5E\\x32\\x32\"\ncipher = list(cipher)\nfor i in range(len(cipher)):\n    cipher[i] ^= 0xf\ncipher = base64.b64decode(bytes(cipher))\nprint(cipher)\n```\n\nXYCTF{389f6900-e12d-4c54-a85d-64a54af9f84c}\n\n## DebugMe\n\n![alt text](image-15.png)\nJEB 打开，程序被 vm 混淆\nMainActivity 里有暴露 cipher 数组，程序无输入，点击按键后默认只弹出无用信息，同时相邻部分的另一个 Toast 弹出有和 cipher 有关的参数。可推测需通过调试篡改到弹出 flag 的逻辑。\n![alt text](image-16.png)\n追踪调用：\n![alt text](image-17.png)\n分析 What 类或 x 的交叉引用树，可知该类是做了 tea 加解密类。x 调用了解密算法\nkey 的初始化：\n![alt text](image-18.png)\ntea 算法特征：\n![alt text](image-19.png)\n除此之外还进行了 base64 和稍微的变形,並修复了 cipher 的 base64 格式（有一个 url 格式的%2b 需替换为+）\n![alt text](image-20.png)\n这里我静态不知为何解不出，那么尝试用 frida 动态解。\nfrida 脚本思路是：hook 一个被执行的函数，篡改为 What.x 解密函数并使用修复后的密文作为参数。最终选择 hook 了 Debug 的 check 函数\n\n```python\n// 检查java runtime可用性\n\n// frida -U -f com.xyctf.ezapk -l .\\hook_1.js\n\nif (Java.available) {\n\n    Java.perform(function () {\n\n        var What = Java.use(\"com.xyctf.ezapk.What\");\n\n        var x = What.x;\n\n        x.implementation = function (arg) {\n\n            console.log(\"hook in\");\n\n            var retVal = this.x(arg);\n\n            console.log(retVal);\n\n            return retVal;\n\n        };\n\n\n\n        var Debug = Java.use(\"android.os.Debug\");\n\n        var isDebuggerConnected = Debug.isDebuggerConnected;\n\n        isDebuggerConnected.implementation = function () {\n\n            console.log(\"in debug check\");\n\n            var a = What.x(\n\n                \"WikFhRxyYjoSJ8mMbM3fRwty/74bc7Ip7ojqenHaSqc9wDv3JDG9XfV6xEiC7Eg1RWTUa4LaM+D0W+PKanSA5w==\"\n\n            );\n\n            console.log(\"a\");\n\n            return false;\n\n        };\n\n    });\n\n} else console.log(\"Java not available\");\n```\n\n## easy language\n\n搜字符串容易判断是 aes ecb 加密，但 key 很难找，且没有 aes 常量暴露\n![alt text](image-21.png)\n但是，又发现有 CryptoAPI 的字样\n![alt text](image-22.png)\n猜测是动态注册调用，尝试 hook\n![alt text](image-23.png)\n确实使用了，但是 key 试了 RUUU 和 KSSM 都不对\n但是又看到底下的 xyctf 和 abctf，长度刚好 16 位，满足 aeskey 的要求\n尝试：\n\n```python\nfrom Crypto.Cipher import AES\n\nimport base64\n\ncipher1 = \"adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=\"\n\ncipher2 = \"qBr4adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=\"\n\ncipher3 = \"RZy/zVEWMFxaCbzChAg8x26XZYr51rNVnM+zBoBp3gya93L9QQXpFRin1JE33vyx\"\n\ntmp = \"oVFXvP32lAb6S1bs5xj2mg==\"\n\nkey = b\"welcometoxyctf!!\"\n\na = base64.b64decode(cipher3)\n\nb = AES.new(key, AES.MODE_ECB)\n\nprint(b.decrypt(a)\n```\n\nXYCTF{y0u\\_@r3_v3ry_g00d_a7_E_l@ngu@ge}\n\n## ez_enc\n\n本题的其它计算都不算重要，重要的是 mod 20.\n加密带有 mod 20，会丢失信息，因此不能单纯逆推。\n而事实上，mod 20 不仅是一个解题限制，更是解题线索.一个可见字符的大小范围是 0x20-0x7e。而当中 mod 20，同一个数字约有 5-6 种的可能。\n同时加密算法中，flag[i]同时受 flag[i]自己和 flag[i+1]影响，也就是受前一位解密的影响。\n也就是说我们从最后一位往前推，每一位都有约 5 种可能，而每一位都是上一位推理的继续。那么事实上，这个就是以 flag 最后一位为根节点，以 mod 20 为运算推理出的一个树，某一条能走到树最后一层的路径就是最终的 flag。\n那么解题的关键找到了。剩下的就是让解题变为可行，这里分析题目有几个约束可用：\n①flag[i]和 flag[i+1]强相关，如何 flag[i+1]，也就是上一位的值不对，那 flag[i]大概率也不对\n②flag[i]正确的情况为：flag[i]在推理时小于 20（这里的 flag[i]是由 flag[i+1]推出的 flag[i]%20）且 flag[i]推理完毕后>=0x20,<=0x7e\n那么写一个递归算法实现这个思路：\n\n```python\ncipher = bytes.fromhex(\n\n    \"2724170b5003c80c1f173655cb2de9320e1126020c07fc273d2ded3559eb3c3ee47d\")\n\n#lag{!_r3ea11y_w4nt_@_cu7e_s1$ter}\n\ncipher = list(cipher)\n\nkey = b\"IMouto\"\n\nflag = []\n\nflag.append(cipher[-1])\n\ndef trace_back(flag:list,p:int):\n\n    # 逆推求解cipher[p]的值\n\n    #print(bytes(flag),p)\n\n    if p == -1:\n\n        flag.reverse()\n\n        print(bytes(flag))\n\n        flag.reverse()\n\n        flag.pop()\n\n        return\n\n    a = cipher[p]\n\n    a ^= key[p%6]\n\n    a -= flag[-1] # 减去上一个推得的值，也就是减去cipher[p+1].此时的值是cipher[p]_原初%20\n\n    if a >= 20 or a < 0: # 上一个值不合适，pop\n\n        flag.pop()\n\n        return\n\n    else:\n\n        for i in range(0,7):\n\n            b = a + i * 20\n\n            if b >= 0x20 and b <= 0x7f:\n\n                #print(p,b)\n\n                flag.append(b)\n\n                trace_back(flag,p-1)\n\n    # 当进行到最后的时候pop出来\n\n    flag.pop()\n\ntrace_back(flag,len(cipher)-2)\n```\n\n![alt text](image-24.png)\n\n## ezcube\n\n魔方，约束右手公式和 12 步\n在网上搜到了同款初始情况：\n![alt text](image-25.png)\n[魔方入门解法第 7 步：调整顶层棱块位置 - 爱魔方 (i-mofang.com)](http://i-mofang.com/ba_07.shtml)\n\n## ezmath\n\n我认为出得很差的一个题。\npython 3.8 打包为 exe，使用 python3.8 环境下的 pyinstxtractor.py 解包，使用 uncompyle6 反编译。\n\n```python\nflag = [ord(i) for i in input('flag:')]\nif len(flag) == 32:\n    if sum([flag[23] for _ in range(flag[23])]) + sum([flag[12] for _ in range(flag[12])]) + sum([flag[1] for _ in range(flag[1])]) - sum([flag[24] for _ in range(222)]) + sum([flag[22] for _ in range(flag[22])]) + sum([flag[31] for _ in range(flag[31])]) + sum([flag[26] for _ in range(flag[26])]) - sum([flag[9] for _ in range(178)]) - sum([flag[29] for _ in range(232)]) + sum([flag[17] for _ in range(flag[17])]) - sum([flag[23] for _ in range(150)]) - sum([flag[6] for _ in range(226)]) - sum([flag[7] for _ in range(110)]) + sum([flag[19] for _ in range(flag[19])]) + sum([flag[2] for _ in range(flag[2])]) - sum([flag[0] for _ in range(176)]) + sum([flag[10] for _ in range(flag[10])]) - sum([flag[12] for _ in range(198)]) + sum([flag[24] for _ in range(flag[24])]) + sum([flag[9] for _ in range(flag[9])]) - sum([flag[3] for _ in range(168)]) + sum([flag[8] for _ in range(flag[8])]) - sum([flag[2] for _ in range(134)]) + sum([flag[14] for _ in range(flag[14])]) - sum([flag[13] for _ in range(170)]) + sum([flag[4] for _ in range(flag[4])]) - sum([flag[10] for _ in range(142)]) + sum([flag[27] for _ in range(flag[27])]) + sum([flag[15] for _ in range(flag[15])]) - sum([flag[15] for _ in range(224)]) + sum([flag[16] for _ in range(flag[16])]) - sum([flag[11] for _ in range(230)]) - sum([flag[1] for _ in range(178)]) + sum([flag[28] for _ in range(flag[28])]) - sum([flag[5] for _ in range(246)]) - sum([flag[17] for _ in range(168)]) + sum([flag[30] for _ in range(flag[30])]) - sum([flag[21] for _ in range(220)]) - sum([flag[22] for _ in range(212)]) - sum([flag[16] for _ in range(232)]) + sum([flag[25] for _ in range(flag[25])]) - sum([flag[4] for _ in range(140)]) - sum([flag[31] for _ in range(250)]) - sum([flag[28] for _ in range(150)]) + sum([flag[11] for _ in range(flag[11])]) + sum([flag[13] for _ in range(flag[13])]) - sum([flag[14] for _ in range(234)]) + sum([flag[7] for _ in range(flag[7])]) - sum([flag[8] for _ in range(174)]) + sum([flag[3] for _ in range(flag[3])]) - sum([flag[25] for _ in range(242)]) + sum([flag[29] for _ in range(flag[29])]) + sum([flag[5] for _ in range(flag[5])]) - sum([flag[30] for _ in range(142)]) - sum([flag[26] for _ in range(170)]) - sum([flag[19] for _ in range(176)]) + sum([flag[0] for _ in range(flag[0])]) - sum([flag[27] for _ in range(168)]) + sum([flag[20] for _ in range(flag[20])]) - sum([flag[20] for _ in range(212)]) + sum([flag[21] for _ in range(flag[21])]) + sum([flag[6] for _ in range(flag[6])]) + sum([flag[18] for _ in range(flag[18])]) - sum([flag[18] for _ in range(178)]) + 297412 == 0:\n        print('yes')\n```\n\n简单格式处理后如下：\n![alt text](image-26.png)\nflag 长 32 位，\nsum = 0\nfor i in range(32):\nsum += flag[i]_ flag[i]\nsum += flag[i]_ （100-300 的一个偶数）\nsum = -297412\n可能按照出题人的想法，这题的解法是依据题目简介的提示：初中数学，配平。\nA^2 + 2AB +B^2 = X。这题每一位 flag 都有平方，也都有乘以一个偶数，那假设每位 flag 是 A，A 乘的那个偶数就是另外的 2B，由此可以推出 flag\n![alt text](image-27.png)\n那这不是很扯吗，题目的解是基于一个很低级的假设。大伙是来做逆向的，不是脑洞数学。\n\n## ezrand\n\n随机种子随机数算法，因为随机种子根据 time64 得到，而 time64 返回值落在 0xffff 内，所以可爆。\n中间随机数相关的复杂算法 ida 可能还原不正确，需要按汇编理解。本质上是 rand()%0xff\n\n```c\n#include <stdio.h>\n\n#include <stdlib.h>\n\n#include <string.h>\n\nint __cdecl main(int argc, const char **argv, const char **envp)\n\n{\n\n    unsigned long v3; // rbx\n\n    unsigned int v4;  // ax\n\n    int v5;           // edi\n\n    long i;           // rsi\n\n    int rand_value;   // eax\n\n    int cipher[7];    // [rsp+20h] [rbp-50h]\n\n    char v10;         // [rsp+3Ch] [rbp-34h]\n\n    int v11;          // [rsp+3Dh] [rbp-33h]\n\n    char *input;      // [rsp+40h] [rbp-30h] BYREF\n\n    long v13;         // [rsp+50h] [rbp-20h]\n\n    int v14;          // [rsp+58h] [rbp-18h]\n\n    int v15;          // [rsp+5Ch] [rbp-14h]\n\n    char v16;         // [rsp+5Eh] [rbp-12h]\n\n\n\n    v13 = 0;\n\n    input = 0;\n\n    v14 = 0;\n\n    v15 = 0;\n\n    v16 = 0;\n\n    cipher[0] = 0xEA6C0C5D;\n\n    v11 = 0;\n\n    v3 = -1;\n\n    cipher[1] = 0x34FC1946;\n\n    cipher[2] = 0x72362B2;\n\n    cipher[3] = 0xFB6E2262;\n\n    cipher[4] = 0xA9F2E8B4;\n\n    cipher[5] = 0x86211291;\n\n    cipher[6] = 0x43E98EDB;\n\n    v10 = 77;\n\n    v4 = _time64(0);\n\n    srand(v4);\n\n    v5 = 0;\n\n    int rand_arr[29];\n\n    // for (i = 0; i < 29; i++)\n\n    //     rand_arr[i] = rand();\n\n    v3 = 29;\n\n    i = 0;\n\n\n\n    for (int seed = 0; seed < 0xffff; seed++)\n\n    {\n\n        char flag[30] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\n\n        srand(seed);\n\n        for (i = 0; i < 29; i++)\n\n        {\n\n            int tmp = rand();\n\n            int a = tmp >> 32 >> 7;\n\n            int b = a >> 0x1f;\n\n            int c = a + b;\n\n            b = c * 0xff;\n\n            int d = tmp - b;\n\n            int tmp2 = *((char *)cipher + i) ^ d;\n\n            // tmp2 = d;\n\n            if (tmp2 > 0x7e)\n\n                break;\n\n            if (tmp2 < 0x20)\n\n                break;\n\n            flag[i] = tmp2; // printf(\"%c\", tmp2);\n\n        }\n\n        if (strlen(flag) > 1)\n\n            printf(\"%s\\n\", flag);\n\n    }\n\n\n\n    return 0;\n\n}\n```\n\n## ezUnity\n\n此题略微难在 metadata 文件格式修复\n可对比 babyUnity 或者其它 Unity 文件的 dll，修复后：\n![alt text](image-28.png)\n剩下操作类似 babyUnity\n能通过 findcrypt 或者分析发现是 aes\n\n```python\ncipher1 = \"pNufkEIU9dHjKXYXWiFyrthHYFEfqJAWcPM/t8/zX1w=\"\nkey = \"a216d5d34c2723f5\"\niv = \"9f68268f755b1363\"\n```\n\n![alt text](image-29.png)\nXYCTF{IL2CPP_1s_intere5t1ng}\n\n## Trustme\n\nmain 是一个没什么用的 rc4，并且和程序对不上。\n![alt text](image-30.png)\n康康别的类\n![alt text](image-31.png)\n有一个对 dex 解密并输出什么的。这里静态解太麻烦了，动态找到安卓机的 data/data 里对应的包，发现确实有东西\n如：\n![alt text](image-32.png)\n分析 dex 目录的 apk，发现其主要做了一个数据库查找操作。\n![alt text](image-33.png)\n找到数据库：\n![alt text](image-34.png)\nXYCTF{And0r1d_15_V3ryEasy}\n\n## That's this\n\nlua 字节码\n![alt text](image-35.png)\n在线反编译\nhttps://www.luatool.cn/index.php\n\n```lua\n\nvalue = \"\"\noutput = \"\"\ni = 1\nwhile true do\n  local temp = string.byte(flag, i)\n  temp = string.char(Xor(temp, 8) % 256)\n  value = value .. temp\n  i = i + 1\n  if i > string.len(flag) then\n    break\n  end\nend\nfor _ = 1, 1000 do\n  x = 3\n  y = x * 3\n  z = y / 4\n  w = z - 5\n  if w == 0 then\n    print(\"This line will never be executed\")\n  end\nend\nfor i = 1, string.len(flag) do\n  temp = string.byte(value, i)\n  temp = string.char(temp + 3)\n  output = output .. temp\nend\nresult = output:rep(10)\ninvalid_list = {\n  1,\n  2,\n  3\n}\nfor _ = 1, 20 do\n  table.insert(invalid_list, 4)\nend\nfor _ = 1, 50 do\n  result = result .. \"A\"\n  table.insert(invalid_list, 4)\nend\nfor i = 1, string.len(output) do\n  temp = string.byte(output, i)\n  temp = string.char(temp - 1)\nend\nfor _ = 1, 30 do\n  result = result .. string.lower(output)\nend\nfor _ = 1, 950 do\n  x = 3\n  y = x * 3\n  z = y / 4\n  w = z - 5\n  if w == 0 then\n    print(\"This line will never be executed\")\n  end\nend\nfor _ = 1, 50 do\n  x = -1\n  y = x * 4\n  z = y / 2\n  w = z - 3\n  if w == 0 then\n    print(\"This line will also never be executed\")\n  end\nend\nrequire(\"base64\")\nobfuscated_output = to_base64(output)\nobfuscated_output = string.reverse(obfuscated_output)\nobfuscated_output = string.gsub(obfuscated_output, \"g\", \"3\")\nobfuscated_output = string.gsub(obfuscated_output, \"H\", \"4\")\nobfuscated_output = string.gsub(obfuscated_output, \"W\", \"6\")\ninvalid_variable = obfuscated_output:rep(5)\nif obfuscated_output == \"==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U\" then\n  print(\"You get the flag.\")\nelse\n  print(\"F**k!\")\nend\n\n```\n\n存在一些混淆代码，但从密文逆推可以很轻松地找到核心逻辑：\n\n```python\nimport base64\n\na = list(b\"==AeuFEcwxGPuJ0PBNzbC1WctFnPB5DPzI0bwxWbu9GQ2F1XOR1U\")\n\na.reverse()\n\nb = list(base64.b64decode(bytes(a)))\n\nprint(bytes(a))\n\nprint(base64.b64decode(bytes(a)), len(b))\n\nflag = \"\"\n\nfor i in range(len(b)):\n\n    for l in range(0x20, 0x7f):\n\n        t = (l ^ 8) + 3\n\n        if t == b[i]:\n\n            flag += chr(l)\n\n    # b[i] += 1\n\n    # b[i] -= 3\n\n    # # b[i] &= 0xff\n\n    # b[i] ^= 8\n\nprint(flag, len(flag))\n```\n\nXYCTF{5dcbaed781363fbfb7d8647c1aee6c}\n\n","slug":"xyctf2023-re-writeup","published":true,"updated":"2024-04-28T15:17:05.913Z","_id":"clvkah59q000164w0efvyh61j","comments":true,"layout":"post","photos":[],"html":"<p>感觉第一周最好玩，没了。</p>\n<h2 id=\"聪明的信使\"><a href=\"#聪明的信使\" class=\"headerlink\" title=\"聪明的信使\"></a>聪明的信使</h2><p>九位凯撒。<br>flag{Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!}</p>\n<h2 id=\"给阿姨倒一杯卡布奇诺\"><a href=\"#给阿姨倒一杯卡布奇诺\" class=\"headerlink\" title=\"给阿姨倒一杯卡布奇诺\"></a>给阿姨倒一杯卡布奇诺</h2><p>代码没去符号，一切都很明显，不多赘述<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image.png\" alt=\"alt text\"><br>加密是魔改 xxtea。魔改了三处，其中还涉及一个全局变量<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-1.png\" alt=\"alt text\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">v, k</span>):</span><br><span class=\"line\">    v0, v1 = c_uint32(v[<span class=\"number\">0</span>]), c_uint32(v[<span class=\"number\">1</span>])</span><br><span class=\"line\">    v0.value ^= <span class=\"number\">0x5F797274</span></span><br><span class=\"line\">    v1.value ^= <span class=\"number\">0x64726168</span></span><br><span class=\"line\">    delta = <span class=\"number\">0x6E75316C</span></span><br><span class=\"line\">    k0, k1, k2, k3 = k[<span class=\"number\">0</span>], k[<span class=\"number\">1</span>], k[<span class=\"number\">2</span>], k[<span class=\"number\">3</span>]</span><br><span class=\"line\">    total = c_uint32(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">32</span>):</span><br><span class=\"line\">        total.value += delta</span><br><span class=\"line\">        v0.value += ((v1.value &lt;&lt; <span class=\"number\">4</span>) + k0) ^ (v1.value +                                          total.value) ^ ((v1.value &gt;&gt; <span class=\"number\">5</span>) + k1) ^ (total.value + i)</span><br><span class=\"line\">        v1.value += ((v0.value &lt;&lt; <span class=\"number\">4</span>) + k2) ^ (v0.value +                                        total.value) ^ ((v0.value &gt;&gt; <span class=\"number\">5</span>) + k3) ^ (total.value + i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(v0.value), <span class=\"built_in\">hex</span>(v1.value))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v0.value, v1.value</span><br><span class=\"line\"></span><br><span class=\"line\">data1 = <span class=\"number\">0x5F797274</span></span><br><span class=\"line\">data2 = <span class=\"number\">0x64726168</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">v, k</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> data1</span><br><span class=\"line\">    <span class=\"keyword\">global</span> data2</span><br><span class=\"line\">    v0, v1 = c_uint32(v[<span class=\"number\">0</span>]), c_uint32(v[<span class=\"number\">1</span>])</span><br><span class=\"line\">    t_1 = v[<span class=\"number\">0</span>]</span><br><span class=\"line\">    t_2 = v[<span class=\"number\">1</span>]</span><br><span class=\"line\">    delta = <span class=\"number\">0x6E75316C</span></span><br><span class=\"line\">    k0, k1, k2, k3 = k[<span class=\"number\">0</span>], k[<span class=\"number\">1</span>], k[<span class=\"number\">2</span>], k[<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    total = c_uint32(delta * <span class=\"number\">32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">31</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        v1.value -= ((v0.value &lt;&lt; <span class=\"number\">4</span>) + k2) ^ (v0.value +                                      total.value) ^ ((v0.value &gt;&gt; <span class=\"number\">5</span>) + k3) ^ (total.value + i)</span><br><span class=\"line\">        v0.value -= ((v1.value &lt;&lt; <span class=\"number\">4</span>) + k0) ^ (v1.value +                                     total.value) ^ ((v1.value &gt;&gt; <span class=\"number\">5</span>) + k1) ^ (total.value + i)</span><br><span class=\"line\">        total.value -= delta</span><br><span class=\"line\">        <span class=\"comment\"># print(hex(v0.value), hex(v1.value))</span></span><br><span class=\"line\">    v0.value ^= data1</span><br><span class=\"line\">    v1.value ^= data2</span><br><span class=\"line\">    data1 = t_1</span><br><span class=\"line\">    data2 = t_2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v0.value, v1.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># value = [0x880012C7, 0x58EE54]</span></span><br><span class=\"line\">    value = [<span class=\"number\">0x9B28ED45</span>, <span class=\"number\">0x145EC6E9</span>, <span class=\"number\">0x5B27A6C3</span>, <span class=\"number\">0xE59E75D5</span>,</span><br><span class=\"line\">             <span class=\"number\">0xE82C2500</span>, <span class=\"number\">0xA4211D92</span>, <span class=\"number\">0xCD8A4B62</span>, <span class=\"number\">0xA668F440</span>]</span><br><span class=\"line\">    key = [<span class=\"number\">0x65766967</span>, <span class=\"number\">0x756F795F</span>, <span class=\"number\">0x7075635F</span>, <span class=\"number\">0x6165745F</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 解密</span></span><br><span class=\"line\">    flag2 = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(value), <span class=\"number\">2</span>):</span><br><span class=\"line\">        res = decrypt(value[i:i+<span class=\"number\">2</span>], key)</span><br><span class=\"line\">        flag2 += res[<span class=\"number\">0</span>].to_bytes(<span class=\"number\">4</span>, <span class=\"string\">&#x27;little&#x27;</span>) + res[<span class=\"number\">1</span>].to_bytes(<span class=\"number\">4</span>, <span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(res[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag2)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"何须相思煮余年\"><a href=\"#何须相思煮余年\" class=\"headerlink\" title=\"何须相思煮余年\"></a>何须相思煮余年</h2><p>数据开头是 0x55，结尾是 0xc3，可认为是汇编机器码<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-2.png\" alt=\"alt text\"><br>转化为 hex 数据后 ida 查看（注意这里如果复制到 010editor 后使用 paste from hex text 会吞一些数据。）<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-3.png\" alt=\"alt text\"><br>直接解即可。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-4.png\" alt=\"alt text\"><br>b’XYCTF{5b3e07567a9034d06851475481507a75}’</p>\n<h2 id=\"今夕是何年\"><a href=\"#今夕是何年\" class=\"headerlink\" title=\"今夕是何年\"></a>今夕是何年</h2><p>ida 和 die 都认为是未知架构。搜索架构码 or 搜索 cpu 特征可知可能是龙芯架构。<br>配置 qemu 环境模拟执行<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-5.png\" alt=\"alt text\"></p>\n<h2 id=\"馒头\"><a href=\"#馒头\" class=\"headerlink\" title=\"馒头\"></a>馒头</h2><p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-6.png\" alt=\"alt text\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree = [<span class=\"number\">0x8DE</span>, <span class=\"number\">0x395</span>, <span class=\"number\">0x1BE</span>, <span class=\"number\">0x0D9</span>, <span class=\"number\">0x06A</span>, <span class=\"number\">0x033</span>, <span class=\"number\">0x014</span>, <span class=\"number\">0x00F</span>, <span class=\"number\">0x011</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0E5</span>, <span class=\"number\">0x072</span>, <span class=\"number\">0x010</span>, <span class=\"number\">0x00B</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x1D7</span>, <span class=\"number\">0x0E9</span>, <span class=\"number\">0x074</span>, <span class=\"number\">0x00E</span>, <span class=\"number\">0x00D</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0EE</span>, <span class=\"number\">0x076</span>, <span class=\"number\">0x00C</span>, <span class=\"number\">0x007</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x549</span>, <span class=\"number\">0x22D</span>, <span class=\"number\">0x0F8</span>, <span class=\"number\">0x07B</span>, <span class=\"number\">0x006</span>, <span class=\"number\">0x018</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x135</span>, <span class=\"number\">0x089</span>, <span class=\"number\">0x043</span>, <span class=\"number\">0x003</span>, <span class=\"number\">0x005</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0AC</span>, <span class=\"number\">0x054</span>, <span class=\"number\">0x004</span>, <span class=\"number\">0x001</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x31C</span>, <span class=\"number\">0x17F</span>, <span class=\"number\">0x0BA</span>, <span class=\"number\">0x059</span>, <span class=\"number\">0x002</span>, <span class=\"number\">0x008</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0C5</span>, <span class=\"number\">0x061</span>, <span class=\"number\">0x030</span>, <span class=\"number\">0x017</span>, <span class=\"number\">0x00A</span>, <span class=\"number\">0x015</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x19D</span>, <span class=\"number\">0x0CB</span>, <span class=\"number\">0x065</span>, <span class=\"number\">0x016</span>, <span class=\"number\">0x009</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0D2</span>, <span class=\"number\">0x068</span>, <span class=\"number\">0x013</span>, <span class=\"number\">0x012</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fake_flag = <span class=\"string\">&quot;1&quot;</span>*<span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fake_flag)</span><br><span class=\"line\"></span><br><span class=\"line\">len_tree = <span class=\"built_in\">len</span>(tree)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(len_tree)</span><br><span class=\"line\"></span><br><span class=\"line\">flag = [<span class=\"number\">0</span>] * <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\">data = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">dcount = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(<span class=\"number\">0x65</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(len_tree-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> tree[i] &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        data = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dcount = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tree[i] &lt; <span class=\"number\">0x7f</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        flag[tree[i+dcount]] = tree[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        data = tree[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        dcount += <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        flag[tree[i+dcount]] = tree[i] - data</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># flag.append(tree[i] - data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        data += tree[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        count -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dcount += <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(bytes(flag), len(flag))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">sum</span>(flag)))</span><br><span class=\"line\"></span><br><span class=\"line\">flag = [<span class=\"number\">0xac</span> - <span class=\"number\">0x54</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0x89</span>-<span class=\"number\">0x43</span>, <span class=\"number\">0x7b</span>, <span class=\"number\">0xee</span>-<span class=\"number\">0x76</span>, <span class=\"number\">0xba</span>-<span class=\"number\">0x59</span>, <span class=\"number\">0xcb</span>-<span class=\"number\">0x65</span>, <span class=\"number\">0x61</span>-<span class=\"number\">0x30</span>, <span class=\"number\">0xe5</span>-<span class=\"number\">0x72</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0xe9</span>-<span class=\"number\">0x74</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x74</span>, <span class=\"number\">0x6a</span>-<span class=\"number\">0x33</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xd9</span>-<span class=\"number\">0x6a</span>, <span class=\"number\">0xd2</span>-<span class=\"number\">0x68</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xc5</span>-<span class=\"number\">0x61</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0xf8</span>-<span class=\"number\">0x7b</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(flag))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"喵喵喵的-flag-碎了一地\"><a href=\"#喵喵喵的-flag-碎了一地\" class=\"headerlink\" title=\"喵喵喵的 flag 碎了一地\"></a>喵喵喵的 flag 碎了一地</h2><p>推理游戏<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-7.png\" alt=\"alt text\"><br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-8.png\" alt=\"alt text\"><br>同个函数有不被解析的部分<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-9.png\" alt=\"alt text\"></p>\n<h2 id=\"你是真的大学生吗？\"><a href=\"#你是真的大学生吗？\" class=\"headerlink\" title=\"你是真的大学生吗？\"></a>你是真的大学生吗？</h2><p>汇编阅读。<br>相邻两位依次异或<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-10.png\" alt=\"alt text\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cipher = [<span class=\"number\">0x76</span>, <span class=\"number\">0x0E</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x6B</span>, <span class=\"number\">0x1E</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">0x41</span>, <span class=\"number\">0x2A</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x2B</span>, <span class=\"number\">0x5C</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x0B</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x05</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(cipher)-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[i] = (cipher[i] ^ cipher[i-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(cipher))</span><br></pre></td></tr></table></figure>\n\n<p>输出会有一位偏移，修复一下即可。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-11.png\" alt=\"alt text\"><br>xyctf{you_know_8086}</p>\n<h2 id=\"砸核桃\"><a href=\"#砸核桃\" class=\"headerlink\" title=\"砸核桃\"></a>砸核桃</h2><p>NsPack，esp 定律或者附加下断点脱壳<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-12.png\" alt=\"alt text\"><br>esp：<br>pushad 后对 esp 的地址下硬件访问断点，待到 popad 或代码到 0x401000+后使用 dump 插件 dump 并调整<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-13.png\" alt=\"alt text\"><br>最后发现是一个异或</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = <span class=\"string\">b&quot;this_is_not_flag&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher = [<span class=\"number\">0x00000012</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000014</span>, <span class=\"number\">0x00000024</span>, <span class=\"number\">0x0000005C</span>, <span class=\"number\">0x0000004A</span>, <span class=\"number\">0x0000003D</span>, <span class=\"number\">0x00000056</span>, <span class=\"number\">0x0000000A</span>, <span class=\"number\">0x00000010</span>, <span class=\"number\">0x00000067</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000041</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000046</span>, <span class=\"number\">0x0000005A</span>, <span class=\"number\">0x00000044</span>, <span class=\"number\">0x00000042</span>, <span class=\"number\">0x0000006E</span>, <span class=\"number\">0x0000000C</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">0x00000044</span>, <span class=\"number\">0x00000072</span>, <span class=\"number\">0x0000000C</span>, <span class=\"number\">0x0000000D</span>, <span class=\"number\">0x00000040</span>, <span class=\"number\">0x0000003E</span>, <span class=\"number\">0x0000004B</span>, <span class=\"number\">0x0000005F</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x0000004C</span>, <span class=\"number\">0x0000005E</span>, <span class=\"number\">0x0000005B</span>, <span class=\"number\">0x00000017</span>, <span class=\"number\">0x0000006E</span>, <span class=\"number\">0x0000000C</span>, <span class=\"number\">0x00000016</span>, <span class=\"number\">0x00000068</span>, <span class=\"number\">0x0000005B</span>, <span class=\"number\">0x00000012</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">42</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[i] ^= key[i % <span class=\"built_in\">len</span>(key)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(cipher))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"babyUnity\"><a href=\"#babyUnity\" class=\"headerlink\" title=\"babyUnity\"></a>babyUnity</h2><p><strong>该题可直接用 il2cppdumper 脱</strong><br>脱完后建议直接用 dnspy 分析 assembly，可看见几个函数的偏移<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-14.png\" alt=\"alt text\"><br>在 ida 里直接 ctrl+g 飞过去，可看得函数逻辑（有些是空函数，空就别管）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cipher = <span class=\"string\">b&quot;\\x58\\x49\\x63\\x4B\\x59\\x4A\\x55\\x38\\x42\\x75\\x68\\x3A\\x55\\x65\\x56\\x3A\\x42\\x4B\\x4E\\x7B\\x55\\x5B\\x4A\\x76\\x55\\x4C\\x3F\\x3F\\x56\\x75\\x5A\\x3F\\x43\\x58\\x4A\\x3B\\x41\\x58\\x5E\\x7B\\x41\\x65\\x5D\\x67\\x41\\x5B\\x5D\\x67\\x55\\x65\\x63\\x62\\x40\\x4B\\x5D\\x65\\x69\\x5E\\x32\\x32&quot;</span></span><br><span class=\"line\">cipher = <span class=\"built_in\">list</span>(cipher)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(cipher)):</span><br><span class=\"line\">    cipher[i] ^= <span class=\"number\">0xf</span></span><br><span class=\"line\">cipher = base64.b64decode(<span class=\"built_in\">bytes</span>(cipher))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cipher)</span><br></pre></td></tr></table></figure>\n\n<p>XYCTF{389f6900-e12d-4c54-a85d-64a54af9f84c}</p>\n<h2 id=\"DebugMe\"><a href=\"#DebugMe\" class=\"headerlink\" title=\"DebugMe\"></a>DebugMe</h2><p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-15.png\" alt=\"alt text\"><br>JEB 打开，程序被 vm 混淆<br>MainActivity 里有暴露 cipher 数组，程序无输入，点击按键后默认只弹出无用信息，同时相邻部分的另一个 Toast 弹出有和 cipher 有关的参数。可推测需通过调试篡改到弹出 flag 的逻辑。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-16.png\" alt=\"alt text\"><br>追踪调用：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-17.png\" alt=\"alt text\"><br>分析 What 类或 x 的交叉引用树，可知该类是做了 tea 加解密类。x 调用了解密算法<br>key 的初始化：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-18.png\" alt=\"alt text\"><br>tea 算法特征：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-19.png\" alt=\"alt text\"><br>除此之外还进行了 base64 和稍微的变形,並修复了 cipher 的 base64 格式（有一个 url 格式的%2b 需替换为+）<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-20.png\" alt=\"alt text\"><br>这里我静态不知为何解不出，那么尝试用 frida 动态解。<br>frida 脚本思路是：hook 一个被执行的函数，篡改为 What.x 解密函数并使用修复后的密文作为参数。最终选择 hook 了 Debug 的 check 函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查java runtime可用性</span><br><span class=\"line\"></span><br><span class=\"line\">// frida -U -f com.xyctf.ezapk -l .\\hook_1.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Java.available) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Java.perform(function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var What = Java.use(<span class=\"string\">&quot;com.xyctf.ezapk.What&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        var x = What.x;</span><br><span class=\"line\"></span><br><span class=\"line\">        x.implementation = function (arg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;hook in&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            var retVal = this.x(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(retVal);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        var Debug = Java.use(<span class=\"string\">&quot;android.os.Debug&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        var isDebuggerConnected = Debug.isDebuggerConnected;</span><br><span class=\"line\"></span><br><span class=\"line\">        isDebuggerConnected.implementation = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;in debug check&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            var a = What.x(</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">&quot;WikFhRxyYjoSJ8mMbM3fRwty/74bc7Ip7ojqenHaSqc9wDv3JDG9XfV6xEiC7Eg1RWTUa4LaM+D0W+PKanSA5w==&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> false;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> console.log(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"easy-language\"><a href=\"#easy-language\" class=\"headerlink\" title=\"easy language\"></a>easy language</h2><p>搜字符串容易判断是 aes ecb 加密，但 key 很难找，且没有 aes 常量暴露<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-21.png\" alt=\"alt text\"><br>但是，又发现有 CryptoAPI 的字样<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-22.png\" alt=\"alt text\"><br>猜测是动态注册调用，尝试 hook<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-23.png\" alt=\"alt text\"><br>确实使用了，但是 key 试了 RUUU 和 KSSM 都不对<br>但是又看到底下的 xyctf 和 abctf，长度刚好 16 位，满足 aeskey 的要求<br>尝试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">cipher1 = <span class=\"string\">&quot;adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher2 = <span class=\"string\">&quot;qBr4adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher3 = <span class=\"string\">&quot;RZy/zVEWMFxaCbzChAg8x26XZYr51rNVnM+zBoBp3gya93L9QQXpFRin1JE33vyx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">tmp = <span class=\"string\">&quot;oVFXvP32lAb6S1bs5xj2mg==&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">b&quot;welcometoxyctf!!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = base64.b64decode(cipher3)</span><br><span class=\"line\"></span><br><span class=\"line\">b = AES.new(key, AES.MODE_ECB)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b.decrypt(a)</span><br></pre></td></tr></table></figure>\n\n<p>XYCTF{y0u_@r3_v3ry_g00d_a7_E_l@ngu@ge}</p>\n<h2 id=\"ez-enc\"><a href=\"#ez-enc\" class=\"headerlink\" title=\"ez_enc\"></a>ez_enc</h2><p>本题的其它计算都不算重要，重要的是 mod 20.<br>加密带有 mod 20，会丢失信息，因此不能单纯逆推。<br>而事实上，mod 20 不仅是一个解题限制，更是解题线索.一个可见字符的大小范围是 0x20-0x7e。而当中 mod 20，同一个数字约有 5-6 种的可能。<br>同时加密算法中，flag[i]同时受 flag[i]自己和 flag[i+1]影响，也就是受前一位解密的影响。<br>也就是说我们从最后一位往前推，每一位都有约 5 种可能，而每一位都是上一位推理的继续。那么事实上，这个就是以 flag 最后一位为根节点，以 mod 20 为运算推理出的一个树，某一条能走到树最后一层的路径就是最终的 flag。<br>那么解题的关键找到了。剩下的就是让解题变为可行，这里分析题目有几个约束可用：<br>①flag[i]和 flag[i+1]强相关，如何 flag[i+1]，也就是上一位的值不对，那 flag[i]大概率也不对<br>②flag[i]正确的情况为：flag[i]在推理时小于 20（这里的 flag[i]是由 flag[i+1]推出的 flag[i]%20）且 flag[i]推理完毕后&gt;&#x3D;0x20,&lt;&#x3D;0x7e<br>那么写一个递归算法实现这个思路：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cipher = <span class=\"built_in\">bytes</span>.fromhex(</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;2724170b5003c80c1f173655cb2de9320e1126020c07fc273d2ded3559eb3c3ee47d&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#lag&#123;!_r3ea11y_w4nt_@_cu7e_s1$ter&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher = <span class=\"built_in\">list</span>(cipher)</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">b&quot;IMouto&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = []</span><br><span class=\"line\"></span><br><span class=\"line\">flag.append(cipher[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trace_back</span>(<span class=\"params\">flag:<span class=\"built_in\">list</span>,p:<span class=\"built_in\">int</span></span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 逆推求解cipher[p]的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#print(bytes(flag),p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> p == -<span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        flag.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(flag))</span><br><span class=\"line\"></span><br><span class=\"line\">        flag.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">        flag.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = cipher[p]</span><br><span class=\"line\"></span><br><span class=\"line\">    a ^= key[p%<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    a -= flag[-<span class=\"number\">1</span>] <span class=\"comment\"># 减去上一个推得的值，也就是减去cipher[p+1].此时的值是cipher[p]_原初%20</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt;= <span class=\"number\">20</span> <span class=\"keyword\">or</span> a &lt; <span class=\"number\">0</span>: <span class=\"comment\"># 上一个值不合适，pop</span></span><br><span class=\"line\"></span><br><span class=\"line\">        flag.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">7</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">            b = a + i * <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> b &gt;= <span class=\"number\">0x20</span> <span class=\"keyword\">and</span> b &lt;= <span class=\"number\">0x7f</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">#print(p,b)</span></span><br><span class=\"line\"></span><br><span class=\"line\">                flag.append(b)</span><br><span class=\"line\"></span><br><span class=\"line\">                trace_back(flag,p-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 当进行到最后的时候pop出来</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">trace_back(flag,<span class=\"built_in\">len</span>(cipher)-<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-24.png\" alt=\"alt text\"></p>\n<h2 id=\"ezcube\"><a href=\"#ezcube\" class=\"headerlink\" title=\"ezcube\"></a>ezcube</h2><p>魔方，约束右手公式和 12 步<br>在网上搜到了同款初始情况：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-25.png\" alt=\"alt text\"><br><a href=\"http://i-mofang.com/ba_07.shtml\">魔方入门解法第 7 步：调整顶层棱块位置 - 爱魔方 (i-mofang.com)</a></p>\n<h2 id=\"ezmath\"><a href=\"#ezmath\" class=\"headerlink\" title=\"ezmath\"></a>ezmath</h2><p>我认为出得很差的一个题。<br>python 3.8 打包为 exe，使用 python3.8 环境下的 pyinstxtractor.py 解包，使用 uncompyle6 反编译。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag = [<span class=\"built_in\">ord</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;flag:&#x27;</span>)]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(flag) == <span class=\"number\">32</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">sum</span>([flag[<span class=\"number\">23</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">23</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">12</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">12</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">1</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">24</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">222</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">22</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">22</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">31</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">31</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">26</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">26</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">9</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">178</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">29</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">232</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">17</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">17</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">23</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">150</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">6</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">226</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">7</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">110</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">19</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">19</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">2</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">2</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">176</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">10</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">10</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">12</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">198</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">24</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">24</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">9</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">9</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">3</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">168</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">8</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">8</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">2</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">134</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">14</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">14</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">13</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">170</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">4</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">4</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">10</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">142</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">27</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">27</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">15</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">15</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">15</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">224</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">16</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">16</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">11</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">230</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">178</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">28</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">28</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">5</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">246</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">17</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">168</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">30</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">30</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">21</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">220</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">22</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">212</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">16</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">232</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">25</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">25</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">4</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">140</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">31</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">250</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">28</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">150</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">11</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">11</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">13</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">13</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">14</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">234</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">7</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">7</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">8</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">174</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">3</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">3</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">25</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">242</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">29</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">29</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">5</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">5</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">30</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">142</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">26</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">170</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">19</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">176</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">0</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">27</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">168</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">20</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">20</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">20</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">212</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">21</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">21</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">6</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">6</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">18</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">18</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">18</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">178</span>)]) + <span class=\"number\">297412</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;yes&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>简单格式处理后如下：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-26.png\" alt=\"alt text\"><br>flag 长 32 位，<br>sum &#x3D; 0<br>for i in range(32):<br>sum +&#x3D; flag[i]_ flag[i]<br>sum +&#x3D; flag[i]_ （100-300 的一个偶数）<br>sum &#x3D; -297412<br>可能按照出题人的想法，这题的解法是依据题目简介的提示：初中数学，配平。<br>A^2 + 2AB +B^2 &#x3D; X。这题每一位 flag 都有平方，也都有乘以一个偶数，那假设每位 flag 是 A，A 乘的那个偶数就是另外的 2B，由此可以推出 flag<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-27.png\" alt=\"alt text\"><br>那这不是很扯吗，题目的解是基于一个很低级的假设。大伙是来做逆向的，不是脑洞数学。</p>\n<h2 id=\"ezrand\"><a href=\"#ezrand\" class=\"headerlink\" title=\"ezrand\"></a>ezrand</h2><p>随机种子随机数算法，因为随机种子根据 time64 得到，而 time64 返回值落在 0xffff 内，所以可爆。<br>中间随机数相关的复杂算法 ida 可能还原不正确，需要按汇编理解。本质上是 rand()%0xff</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> v3; <span class=\"comment\">// rbx</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v4;  <span class=\"comment\">// ax</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v5;           <span class=\"comment\">// edi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> i;           <span class=\"comment\">// rsi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> rand_value;   <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> cipher[<span class=\"number\">7</span>];    <span class=\"comment\">// [rsp+20h] [rbp-50h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> v10;         <span class=\"comment\">// [rsp+3Ch] [rbp-34h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v11;          <span class=\"comment\">// [rsp+3Dh] [rbp-33h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *input;      <span class=\"comment\">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> v13;         <span class=\"comment\">// [rsp+50h] [rbp-20h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v14;          <span class=\"comment\">// [rsp+58h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v15;          <span class=\"comment\">// [rsp+5Ch] [rbp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> v16;         <span class=\"comment\">// [rsp+5Eh] [rbp-12h]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    v13 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    input = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v14 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v15 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v16 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">0</span>] = <span class=\"number\">0xEA6C0C5D</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v11 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v3 = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">1</span>] = <span class=\"number\">0x34FC1946</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">2</span>] = <span class=\"number\">0x72362B2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">3</span>] = <span class=\"number\">0xFB6E2262</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">4</span>] = <span class=\"number\">0xA9F2E8B4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">5</span>] = <span class=\"number\">0x86211291</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">6</span>] = <span class=\"number\">0x43E98EDB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v10 = <span class=\"number\">77</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v4 = _time64(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    srand(v4);</span><br><span class=\"line\"></span><br><span class=\"line\">    v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> rand_arr[<span class=\"number\">29</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for (i = 0; i &lt; 29; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//     rand_arr[i] = rand();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    v3 = <span class=\"number\">29</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> seed = <span class=\"number\">0</span>; seed &lt; <span class=\"number\">0xffff</span>; seed++)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> flag[<span class=\"number\">30</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        srand(seed);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">29</span>; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> tmp = rand();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> a = tmp &gt;&gt; <span class=\"number\">32</span> &gt;&gt; <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> b = a &gt;&gt; <span class=\"number\">0x1f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">            b = c * <span class=\"number\">0xff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> d = tmp - b;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> tmp2 = *((<span class=\"type\">char</span> *)cipher + i) ^ d;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// tmp2 = d;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp2 &gt; <span class=\"number\">0x7e</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp2 &lt; <span class=\"number\">0x20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            flag[i] = tmp2; <span class=\"comment\">// printf(&quot;%c&quot;, tmp2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(flag) &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, flag);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ezUnity\"><a href=\"#ezUnity\" class=\"headerlink\" title=\"ezUnity\"></a>ezUnity</h2><p>此题略微难在 metadata 文件格式修复<br>可对比 babyUnity 或者其它 Unity 文件的 dll，修复后：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-28.png\" alt=\"alt text\"><br>剩下操作类似 babyUnity<br>能通过 findcrypt 或者分析发现是 aes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cipher1 = <span class=\"string\">&quot;pNufkEIU9dHjKXYXWiFyrthHYFEfqJAWcPM/t8/zX1w=&quot;</span></span><br><span class=\"line\">key = <span class=\"string\">&quot;a216d5d34c2723f5&quot;</span></span><br><span class=\"line\">iv = <span class=\"string\">&quot;9f68268f755b1363&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-29.png\" alt=\"alt text\"><br>XYCTF{IL2CPP_1s_intere5t1ng}</p>\n<h2 id=\"Trustme\"><a href=\"#Trustme\" class=\"headerlink\" title=\"Trustme\"></a>Trustme</h2><p>main 是一个没什么用的 rc4，并且和程序对不上。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-30.png\" alt=\"alt text\"><br>康康别的类<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-31.png\" alt=\"alt text\"><br>有一个对 dex 解密并输出什么的。这里静态解太麻烦了，动态找到安卓机的 data&#x2F;data 里对应的包，发现确实有东西<br>如：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-32.png\" alt=\"alt text\"><br>分析 dex 目录的 apk，发现其主要做了一个数据库查找操作。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-33.png\" alt=\"alt text\"><br>找到数据库：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-34.png\" alt=\"alt text\"><br>XYCTF{And0r1d_15_V3ryEasy}</p>\n<h2 id=\"That’s-this\"><a href=\"#That’s-this\" class=\"headerlink\" title=\"That’s this\"></a>That’s this</h2><p>lua 字节码<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-35.png\" alt=\"alt text\"><br>在线反编译<br><a href=\"https://www.luatool.cn/index.php\">https://www.luatool.cn/index.php</a></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">output</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(flag, i)</span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(Xor(temp, <span class=\"number\">8</span>) % <span class=\"number\">256</span>)</span><br><span class=\"line\">  value = value .. temp</span><br><span class=\"line\">  i = i + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> i &gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(flag) <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">1000</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  x = <span class=\"number\">3</span></span><br><span class=\"line\">  y = x * <span class=\"number\">3</span></span><br><span class=\"line\">  z = y / <span class=\"number\">4</span></span><br><span class=\"line\">  w = z - <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> w == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This line will never be executed&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(flag) <span class=\"keyword\">do</span></span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(value, i)</span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(temp + <span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"built_in\">output</span> = <span class=\"built_in\">output</span> .. temp</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">result = <span class=\"built_in\">output</span>:<span class=\"built_in\">rep</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">invalid_list = &#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">20</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(invalid_list, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  result = result .. <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(invalid_list, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(<span class=\"built_in\">output</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(<span class=\"built_in\">output</span>, i)</span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(temp - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">30</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  result = result .. <span class=\"built_in\">string</span>.<span class=\"built_in\">lower</span>(<span class=\"built_in\">output</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">950</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  x = <span class=\"number\">3</span></span><br><span class=\"line\">  y = x * <span class=\"number\">3</span></span><br><span class=\"line\">  z = y / <span class=\"number\">4</span></span><br><span class=\"line\">  w = z - <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> w == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This line will never be executed&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  x = <span class=\"number\">-1</span></span><br><span class=\"line\">  y = x * <span class=\"number\">4</span></span><br><span class=\"line\">  z = y / <span class=\"number\">2</span></span><br><span class=\"line\">  w = z - <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> w == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This line will also never be executed&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;base64&quot;</span>)</span><br><span class=\"line\">obfuscated_output = to_base64(<span class=\"built_in\">output</span>)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">reverse</span>(obfuscated_output)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(obfuscated_output, <span class=\"string\">&quot;g&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(obfuscated_output, <span class=\"string\">&quot;H&quot;</span>, <span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(obfuscated_output, <span class=\"string\">&quot;W&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">invalid_variable = obfuscated_output:<span class=\"built_in\">rep</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> obfuscated_output == <span class=\"string\">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;You get the flag.&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;F**k!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>存在一些混淆代码，但从密文逆推可以很轻松地找到核心逻辑：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"built_in\">list</span>(<span class=\"string\">b&quot;==AeuFEcwxGPuJ0PBNzbC1WctFnPB5DPzI0bwxWbu9GQ2F1XOR1U&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"built_in\">list</span>(base64.b64decode(<span class=\"built_in\">bytes</span>(a)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64decode(<span class=\"built_in\">bytes</span>(a)), <span class=\"built_in\">len</span>(b))</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(b)):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0x20</span>, <span class=\"number\">0x7f</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        t = (l ^ <span class=\"number\">8</span>) + <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> t == b[i]:</span><br><span class=\"line\"></span><br><span class=\"line\">            flag += <span class=\"built_in\">chr</span>(l)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># b[i] += 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># b[i] -= 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># # b[i] &amp;= 0xff</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># b[i] ^= 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag, <span class=\"built_in\">len</span>(flag))</span><br></pre></td></tr></table></figure>\n\n<p>XYCTF{5dcbaed781363fbfb7d8647c1aee6c}</p>\n","excerpt":"","more":"<p>感觉第一周最好玩，没了。</p>\n<h2 id=\"聪明的信使\"><a href=\"#聪明的信使\" class=\"headerlink\" title=\"聪明的信使\"></a>聪明的信使</h2><p>九位凯撒。<br>flag{Y0u_KnOw_Crypt0_14_v3ry_Imp0rt@nt!}</p>\n<h2 id=\"给阿姨倒一杯卡布奇诺\"><a href=\"#给阿姨倒一杯卡布奇诺\" class=\"headerlink\" title=\"给阿姨倒一杯卡布奇诺\"></a>给阿姨倒一杯卡布奇诺</h2><p>代码没去符号，一切都很明显，不多赘述<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image.png\" alt=\"alt text\"><br>加密是魔改 xxtea。魔改了三处，其中还涉及一个全局变量<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-1.png\" alt=\"alt text\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> ctypes <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">encrypt</span>(<span class=\"params\">v, k</span>):</span><br><span class=\"line\">    v0, v1 = c_uint32(v[<span class=\"number\">0</span>]), c_uint32(v[<span class=\"number\">1</span>])</span><br><span class=\"line\">    v0.value ^= <span class=\"number\">0x5F797274</span></span><br><span class=\"line\">    v1.value ^= <span class=\"number\">0x64726168</span></span><br><span class=\"line\">    delta = <span class=\"number\">0x6E75316C</span></span><br><span class=\"line\">    k0, k1, k2, k3 = k[<span class=\"number\">0</span>], k[<span class=\"number\">1</span>], k[<span class=\"number\">2</span>], k[<span class=\"number\">3</span>]</span><br><span class=\"line\">    total = c_uint32(<span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">32</span>):</span><br><span class=\"line\">        total.value += delta</span><br><span class=\"line\">        v0.value += ((v1.value &lt;&lt; <span class=\"number\">4</span>) + k0) ^ (v1.value +                                          total.value) ^ ((v1.value &gt;&gt; <span class=\"number\">5</span>) + k1) ^ (total.value + i)</span><br><span class=\"line\">        v1.value += ((v0.value &lt;&lt; <span class=\"number\">4</span>) + k2) ^ (v0.value +                                        total.value) ^ ((v0.value &gt;&gt; <span class=\"number\">5</span>) + k3) ^ (total.value + i)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(v0.value), <span class=\"built_in\">hex</span>(v1.value))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v0.value, v1.value</span><br><span class=\"line\"></span><br><span class=\"line\">data1 = <span class=\"number\">0x5F797274</span></span><br><span class=\"line\">data2 = <span class=\"number\">0x64726168</span></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">decrypt</span>(<span class=\"params\">v, k</span>):</span><br><span class=\"line\">    <span class=\"keyword\">global</span> data1</span><br><span class=\"line\">    <span class=\"keyword\">global</span> data2</span><br><span class=\"line\">    v0, v1 = c_uint32(v[<span class=\"number\">0</span>]), c_uint32(v[<span class=\"number\">1</span>])</span><br><span class=\"line\">    t_1 = v[<span class=\"number\">0</span>]</span><br><span class=\"line\">    t_2 = v[<span class=\"number\">1</span>]</span><br><span class=\"line\">    delta = <span class=\"number\">0x6E75316C</span></span><br><span class=\"line\">    k0, k1, k2, k3 = k[<span class=\"number\">0</span>], k[<span class=\"number\">1</span>], k[<span class=\"number\">2</span>], k[<span class=\"number\">3</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    total = c_uint32(delta * <span class=\"number\">32</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">31</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\">        v1.value -= ((v0.value &lt;&lt; <span class=\"number\">4</span>) + k2) ^ (v0.value +                                      total.value) ^ ((v0.value &gt;&gt; <span class=\"number\">5</span>) + k3) ^ (total.value + i)</span><br><span class=\"line\">        v0.value -= ((v1.value &lt;&lt; <span class=\"number\">4</span>) + k0) ^ (v1.value +                                     total.value) ^ ((v1.value &gt;&gt; <span class=\"number\">5</span>) + k1) ^ (total.value + i)</span><br><span class=\"line\">        total.value -= delta</span><br><span class=\"line\">        <span class=\"comment\"># print(hex(v0.value), hex(v1.value))</span></span><br><span class=\"line\">    v0.value ^= data1</span><br><span class=\"line\">    v1.value ^= data2</span><br><span class=\"line\">    data1 = t_1</span><br><span class=\"line\">    data2 = t_2</span><br><span class=\"line\">    <span class=\"keyword\">return</span> v0.value, v1.value</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># test</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&quot;__main__&quot;</span>:</span><br><span class=\"line\">    <span class=\"comment\"># value = [0x880012C7, 0x58EE54]</span></span><br><span class=\"line\">    value = [<span class=\"number\">0x9B28ED45</span>, <span class=\"number\">0x145EC6E9</span>, <span class=\"number\">0x5B27A6C3</span>, <span class=\"number\">0xE59E75D5</span>,</span><br><span class=\"line\">             <span class=\"number\">0xE82C2500</span>, <span class=\"number\">0xA4211D92</span>, <span class=\"number\">0xCD8A4B62</span>, <span class=\"number\">0xA668F440</span>]</span><br><span class=\"line\">    key = [<span class=\"number\">0x65766967</span>, <span class=\"number\">0x756F795F</span>, <span class=\"number\">0x7075635F</span>, <span class=\"number\">0x6165745F</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 解密</span></span><br><span class=\"line\">    flag2 = <span class=\"string\">b&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(value), <span class=\"number\">2</span>):</span><br><span class=\"line\">        res = decrypt(value[i:i+<span class=\"number\">2</span>], key)</span><br><span class=\"line\">        flag2 += res[<span class=\"number\">0</span>].to_bytes(<span class=\"number\">4</span>, <span class=\"string\">&#x27;little&#x27;</span>) + res[<span class=\"number\">1</span>].to_bytes(<span class=\"number\">4</span>, <span class=\"string\">&#x27;little&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(res[<span class=\"number\">1</span>]))</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag2)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"何须相思煮余年\"><a href=\"#何须相思煮余年\" class=\"headerlink\" title=\"何须相思煮余年\"></a>何须相思煮余年</h2><p>数据开头是 0x55，结尾是 0xc3，可认为是汇编机器码<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-2.png\" alt=\"alt text\"><br>转化为 hex 数据后 ida 查看（注意这里如果复制到 010editor 后使用 paste from hex text 会吞一些数据。）<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-3.png\" alt=\"alt text\"><br>直接解即可。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-4.png\" alt=\"alt text\"><br>b’XYCTF{5b3e07567a9034d06851475481507a75}’</p>\n<h2 id=\"今夕是何年\"><a href=\"#今夕是何年\" class=\"headerlink\" title=\"今夕是何年\"></a>今夕是何年</h2><p>ida 和 die 都认为是未知架构。搜索架构码 or 搜索 cpu 特征可知可能是龙芯架构。<br>配置 qemu 环境模拟执行<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-5.png\" alt=\"alt text\"></p>\n<h2 id=\"馒头\"><a href=\"#馒头\" class=\"headerlink\" title=\"馒头\"></a>馒头</h2><p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-6.png\" alt=\"alt text\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tree = [<span class=\"number\">0x8DE</span>, <span class=\"number\">0x395</span>, <span class=\"number\">0x1BE</span>, <span class=\"number\">0x0D9</span>, <span class=\"number\">0x06A</span>, <span class=\"number\">0x033</span>, <span class=\"number\">0x014</span>, <span class=\"number\">0x00F</span>, <span class=\"number\">0x011</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0E5</span>, <span class=\"number\">0x072</span>, <span class=\"number\">0x010</span>, <span class=\"number\">0x00B</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x1D7</span>, <span class=\"number\">0x0E9</span>, <span class=\"number\">0x074</span>, <span class=\"number\">0x00E</span>, <span class=\"number\">0x00D</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0EE</span>, <span class=\"number\">0x076</span>, <span class=\"number\">0x00C</span>, <span class=\"number\">0x007</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x549</span>, <span class=\"number\">0x22D</span>, <span class=\"number\">0x0F8</span>, <span class=\"number\">0x07B</span>, <span class=\"number\">0x006</span>, <span class=\"number\">0x018</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x135</span>, <span class=\"number\">0x089</span>, <span class=\"number\">0x043</span>, <span class=\"number\">0x003</span>, <span class=\"number\">0x005</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0AC</span>, <span class=\"number\">0x054</span>, <span class=\"number\">0x004</span>, <span class=\"number\">0x001</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x31C</span>, <span class=\"number\">0x17F</span>, <span class=\"number\">0x0BA</span>, <span class=\"number\">0x059</span>, <span class=\"number\">0x002</span>, <span class=\"number\">0x008</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0C5</span>, <span class=\"number\">0x061</span>, <span class=\"number\">0x030</span>, <span class=\"number\">0x017</span>, <span class=\"number\">0x00A</span>, <span class=\"number\">0x015</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x19D</span>, <span class=\"number\">0x0CB</span>, <span class=\"number\">0x065</span>, <span class=\"number\">0x016</span>, <span class=\"number\">0x009</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x0D2</span>, <span class=\"number\">0x068</span>, <span class=\"number\">0x013</span>, <span class=\"number\">0x012</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">fake_flag = <span class=\"string\">&quot;1&quot;</span>*<span class=\"number\">24</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(fake_flag)</span><br><span class=\"line\"></span><br><span class=\"line\">len_tree = <span class=\"built_in\">len</span>(tree)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(len_tree)</span><br><span class=\"line\"></span><br><span class=\"line\">flag = [<span class=\"number\">0</span>] * <span class=\"number\">25</span></span><br><span class=\"line\"></span><br><span class=\"line\">data = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">count = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">dcount = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">chr</span>(<span class=\"number\">0x65</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(len_tree-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> tree[i] &lt; <span class=\"number\">25</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        data = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dcount = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">continue</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> tree[i] &lt; <span class=\"number\">0x7f</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        flag[tree[i+dcount]] = tree[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        data = tree[i]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        dcount += <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">        count -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">elif</span> count &gt; <span class=\"number\">0</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        flag[tree[i+dcount]] = tree[i] - data</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\"># flag.append(tree[i] - data)</span></span><br><span class=\"line\"></span><br><span class=\"line\">        data += tree[i]</span><br><span class=\"line\"></span><br><span class=\"line\">        count -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">        dcount += <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># print(bytes(flag), len(flag))</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">hex</span>(<span class=\"built_in\">sum</span>(flag)))</span><br><span class=\"line\"></span><br><span class=\"line\">flag = [<span class=\"number\">0xac</span> - <span class=\"number\">0x54</span>, <span class=\"number\">0x59</span>, <span class=\"number\">0x43</span>, <span class=\"number\">0x54</span>, <span class=\"number\">0x89</span>-<span class=\"number\">0x43</span>, <span class=\"number\">0x7b</span>, <span class=\"number\">0xee</span>-<span class=\"number\">0x76</span>, <span class=\"number\">0xba</span>-<span class=\"number\">0x59</span>, <span class=\"number\">0xcb</span>-<span class=\"number\">0x65</span>, <span class=\"number\">0x61</span>-<span class=\"number\">0x30</span>, <span class=\"number\">0xe5</span>-<span class=\"number\">0x72</span>, <span class=\"number\">0x76</span>, <span class=\"number\">0xe9</span>-<span class=\"number\">0x74</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"number\">0x74</span>, <span class=\"number\">0x6a</span>-<span class=\"number\">0x33</span>, <span class=\"number\">0x72</span>, <span class=\"number\">0xd9</span>-<span class=\"number\">0x6a</span>, <span class=\"number\">0xd2</span>-<span class=\"number\">0x68</span>, <span class=\"number\">0x68</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0xc5</span>-<span class=\"number\">0x61</span>, <span class=\"number\">0x65</span>, <span class=\"number\">0x30</span>, <span class=\"number\">0xf8</span>-<span class=\"number\">0x7b</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(flag))</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"喵喵喵的-flag-碎了一地\"><a href=\"#喵喵喵的-flag-碎了一地\" class=\"headerlink\" title=\"喵喵喵的 flag 碎了一地\"></a>喵喵喵的 flag 碎了一地</h2><p>推理游戏<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-7.png\" alt=\"alt text\"><br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-8.png\" alt=\"alt text\"><br>同个函数有不被解析的部分<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-9.png\" alt=\"alt text\"></p>\n<h2 id=\"你是真的大学生吗？\"><a href=\"#你是真的大学生吗？\" class=\"headerlink\" title=\"你是真的大学生吗？\"></a>你是真的大学生吗？</h2><p>汇编阅读。<br>相邻两位依次异或<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-10.png\" alt=\"alt text\"></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cipher = [<span class=\"number\">0x76</span>, <span class=\"number\">0x0E</span>, <span class=\"number\">0x77</span>, <span class=\"number\">0x14</span>, <span class=\"number\">0x60</span>, <span class=\"number\">0x06</span>, <span class=\"number\">0x7D</span>, <span class=\"number\">0x04</span>, <span class=\"number\">0x6B</span>, <span class=\"number\">0x1E</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">0x41</span>, <span class=\"number\">0x2A</span>, <span class=\"number\">0x44</span>, <span class=\"number\">0x2B</span>, <span class=\"number\">0x5C</span>, <span class=\"number\">0x03</span>, <span class=\"number\">0x3B</span>, <span class=\"number\">0x0B</span>, <span class=\"number\">0x33</span>, <span class=\"number\">0x05</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(cipher)-<span class=\"number\">1</span>, -<span class=\"number\">1</span>, -<span class=\"number\">1</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[i] = (cipher[i] ^ cipher[i-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(cipher))</span><br></pre></td></tr></table></figure>\n\n<p>输出会有一位偏移，修复一下即可。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-11.png\" alt=\"alt text\"><br>xyctf{you_know_8086}</p>\n<h2 id=\"砸核桃\"><a href=\"#砸核桃\" class=\"headerlink\" title=\"砸核桃\"></a>砸核桃</h2><p>NsPack，esp 定律或者附加下断点脱壳<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-12.png\" alt=\"alt text\"><br>esp：<br>pushad 后对 esp 的地址下硬件访问断点，待到 popad 或代码到 0x401000+后使用 dump 插件 dump 并调整<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-13.png\" alt=\"alt text\"><br>最后发现是一个异或</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">key = <span class=\"string\">b&quot;this_is_not_flag&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher = [<span class=\"number\">0x00000012</span>, <span class=\"number\">0x00000004</span>, <span class=\"number\">0x00000008</span>, <span class=\"number\">0x00000014</span>, <span class=\"number\">0x00000024</span>, <span class=\"number\">0x0000005C</span>, <span class=\"number\">0x0000004A</span>, <span class=\"number\">0x0000003D</span>, <span class=\"number\">0x00000056</span>, <span class=\"number\">0x0000000A</span>, <span class=\"number\">0x00000010</span>, <span class=\"number\">0x00000067</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000041</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x00000046</span>, <span class=\"number\">0x0000005A</span>, <span class=\"number\">0x00000044</span>, <span class=\"number\">0x00000042</span>, <span class=\"number\">0x0000006E</span>, <span class=\"number\">0x0000000C</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">          <span class=\"number\">0x00000044</span>, <span class=\"number\">0x00000072</span>, <span class=\"number\">0x0000000C</span>, <span class=\"number\">0x0000000D</span>, <span class=\"number\">0x00000040</span>, <span class=\"number\">0x0000003E</span>, <span class=\"number\">0x0000004B</span>, <span class=\"number\">0x0000005F</span>, <span class=\"number\">0x00000002</span>, <span class=\"number\">0x00000001</span>, <span class=\"number\">0x0000004C</span>, <span class=\"number\">0x0000005E</span>, <span class=\"number\">0x0000005B</span>, <span class=\"number\">0x00000017</span>, <span class=\"number\">0x0000006E</span>, <span class=\"number\">0x0000000C</span>, <span class=\"number\">0x00000016</span>, <span class=\"number\">0x00000068</span>, <span class=\"number\">0x0000005B</span>, <span class=\"number\">0x00000012</span>, <span class=\"number\">0x00000000</span>, <span class=\"number\">0x00000000</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">42</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[i] ^= key[i % <span class=\"built_in\">len</span>(key)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(cipher))</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"babyUnity\"><a href=\"#babyUnity\" class=\"headerlink\" title=\"babyUnity\"></a>babyUnity</h2><p><strong>该题可直接用 il2cppdumper 脱</strong><br>脱完后建议直接用 dnspy 分析 assembly，可看见几个函数的偏移<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-14.png\" alt=\"alt text\"><br>在 ida 里直接 ctrl+g 飞过去，可看得函数逻辑（有些是空函数，空就别管）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">cipher = <span class=\"string\">b&quot;\\x58\\x49\\x63\\x4B\\x59\\x4A\\x55\\x38\\x42\\x75\\x68\\x3A\\x55\\x65\\x56\\x3A\\x42\\x4B\\x4E\\x7B\\x55\\x5B\\x4A\\x76\\x55\\x4C\\x3F\\x3F\\x56\\x75\\x5A\\x3F\\x43\\x58\\x4A\\x3B\\x41\\x58\\x5E\\x7B\\x41\\x65\\x5D\\x67\\x41\\x5B\\x5D\\x67\\x55\\x65\\x63\\x62\\x40\\x4B\\x5D\\x65\\x69\\x5E\\x32\\x32&quot;</span></span><br><span class=\"line\">cipher = <span class=\"built_in\">list</span>(cipher)</span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(cipher)):</span><br><span class=\"line\">    cipher[i] ^= <span class=\"number\">0xf</span></span><br><span class=\"line\">cipher = base64.b64decode(<span class=\"built_in\">bytes</span>(cipher))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(cipher)</span><br></pre></td></tr></table></figure>\n\n<p>XYCTF{389f6900-e12d-4c54-a85d-64a54af9f84c}</p>\n<h2 id=\"DebugMe\"><a href=\"#DebugMe\" class=\"headerlink\" title=\"DebugMe\"></a>DebugMe</h2><p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-15.png\" alt=\"alt text\"><br>JEB 打开，程序被 vm 混淆<br>MainActivity 里有暴露 cipher 数组，程序无输入，点击按键后默认只弹出无用信息，同时相邻部分的另一个 Toast 弹出有和 cipher 有关的参数。可推测需通过调试篡改到弹出 flag 的逻辑。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-16.png\" alt=\"alt text\"><br>追踪调用：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-17.png\" alt=\"alt text\"><br>分析 What 类或 x 的交叉引用树，可知该类是做了 tea 加解密类。x 调用了解密算法<br>key 的初始化：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-18.png\" alt=\"alt text\"><br>tea 算法特征：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-19.png\" alt=\"alt text\"><br>除此之外还进行了 base64 和稍微的变形,並修复了 cipher 的 base64 格式（有一个 url 格式的%2b 需替换为+）<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-20.png\" alt=\"alt text\"><br>这里我静态不知为何解不出，那么尝试用 frida 动态解。<br>frida 脚本思路是：hook 一个被执行的函数，篡改为 What.x 解密函数并使用修复后的密文作为参数。最终选择 hook 了 Debug 的 check 函数</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 检查java runtime可用性</span><br><span class=\"line\"></span><br><span class=\"line\">// frida -U -f com.xyctf.ezapk -l .\\hook_1.js</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> (Java.available) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    Java.perform(function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        var What = Java.use(<span class=\"string\">&quot;com.xyctf.ezapk.What&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        var x = What.x;</span><br><span class=\"line\"></span><br><span class=\"line\">        x.implementation = function (arg) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;hook in&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            var retVal = this.x(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(retVal);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> retVal;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        var Debug = Java.use(<span class=\"string\">&quot;android.os.Debug&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        var isDebuggerConnected = Debug.isDebuggerConnected;</span><br><span class=\"line\"></span><br><span class=\"line\">        isDebuggerConnected.implementation = function () &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;in debug check&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            var a = What.x(</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"string\">&quot;WikFhRxyYjoSJ8mMbM3fRwty/74bc7Ip7ojqenHaSqc9wDv3JDG9XfV6xEiC7Eg1RWTUa4LaM+D0W+PKanSA5w==&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            );</span><br><span class=\"line\"></span><br><span class=\"line\">            console.log(<span class=\"string\">&quot;a&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">return</span> false;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> console.log(<span class=\"string\">&quot;Java not available&quot;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"easy-language\"><a href=\"#easy-language\" class=\"headerlink\" title=\"easy language\"></a>easy language</h2><p>搜字符串容易判断是 aes ecb 加密，但 key 很难找，且没有 aes 常量暴露<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-21.png\" alt=\"alt text\"><br>但是，又发现有 CryptoAPI 的字样<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-22.png\" alt=\"alt text\"><br>猜测是动态注册调用，尝试 hook<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-23.png\" alt=\"alt text\"><br>确实使用了，但是 key 试了 RUUU 和 KSSM 都不对<br>但是又看到底下的 xyctf 和 abctf，长度刚好 16 位，满足 aeskey 的要求<br>尝试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">cipher1 = <span class=\"string\">&quot;adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher2 = <span class=\"string\">&quot;qBr4adaGb8kVFQpPVFMcwWQRybbInjf4Q9Iu+f6k9Nw=&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher3 = <span class=\"string\">&quot;RZy/zVEWMFxaCbzChAg8x26XZYr51rNVnM+zBoBp3gya93L9QQXpFRin1JE33vyx&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">tmp = <span class=\"string\">&quot;oVFXvP32lAb6S1bs5xj2mg==&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">b&quot;welcometoxyctf!!&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = base64.b64decode(cipher3)</span><br><span class=\"line\"></span><br><span class=\"line\">b = AES.new(key, AES.MODE_ECB)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(b.decrypt(a)</span><br></pre></td></tr></table></figure>\n\n<p>XYCTF{y0u_@r3_v3ry_g00d_a7_E_l@ngu@ge}</p>\n<h2 id=\"ez-enc\"><a href=\"#ez-enc\" class=\"headerlink\" title=\"ez_enc\"></a>ez_enc</h2><p>本题的其它计算都不算重要，重要的是 mod 20.<br>加密带有 mod 20，会丢失信息，因此不能单纯逆推。<br>而事实上，mod 20 不仅是一个解题限制，更是解题线索.一个可见字符的大小范围是 0x20-0x7e。而当中 mod 20，同一个数字约有 5-6 种的可能。<br>同时加密算法中，flag[i]同时受 flag[i]自己和 flag[i+1]影响，也就是受前一位解密的影响。<br>也就是说我们从最后一位往前推，每一位都有约 5 种可能，而每一位都是上一位推理的继续。那么事实上，这个就是以 flag 最后一位为根节点，以 mod 20 为运算推理出的一个树，某一条能走到树最后一层的路径就是最终的 flag。<br>那么解题的关键找到了。剩下的就是让解题变为可行，这里分析题目有几个约束可用：<br>①flag[i]和 flag[i+1]强相关，如何 flag[i+1]，也就是上一位的值不对，那 flag[i]大概率也不对<br>②flag[i]正确的情况为：flag[i]在推理时小于 20（这里的 flag[i]是由 flag[i+1]推出的 flag[i]%20）且 flag[i]推理完毕后&gt;&#x3D;0x20,&lt;&#x3D;0x7e<br>那么写一个递归算法实现这个思路：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cipher = <span class=\"built_in\">bytes</span>.fromhex(</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;2724170b5003c80c1f173655cb2de9320e1126020c07fc273d2ded3559eb3c3ee47d&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#lag&#123;!_r3ea11y_w4nt_@_cu7e_s1$ter&#125;</span></span><br><span class=\"line\"></span><br><span class=\"line\">cipher = <span class=\"built_in\">list</span>(cipher)</span><br><span class=\"line\"></span><br><span class=\"line\">key = <span class=\"string\">b&quot;IMouto&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">flag = []</span><br><span class=\"line\"></span><br><span class=\"line\">flag.append(cipher[-<span class=\"number\">1</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">trace_back</span>(<span class=\"params\">flag:<span class=\"built_in\">list</span>,p:<span class=\"built_in\">int</span></span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 逆推求解cipher[p]的值</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">#print(bytes(flag),p)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> p == -<span class=\"number\">1</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        flag.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(flag))</span><br><span class=\"line\"></span><br><span class=\"line\">        flag.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">        flag.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    a = cipher[p]</span><br><span class=\"line\"></span><br><span class=\"line\">    a ^= key[p%<span class=\"number\">6</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">    a -= flag[-<span class=\"number\">1</span>] <span class=\"comment\"># 减去上一个推得的值，也就是减去cipher[p+1].此时的值是cipher[p]_原初%20</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt;= <span class=\"number\">20</span> <span class=\"keyword\">or</span> a &lt; <span class=\"number\">0</span>: <span class=\"comment\"># 上一个值不合适，pop</span></span><br><span class=\"line\"></span><br><span class=\"line\">        flag.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>,<span class=\"number\">7</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">            b = a + i * <span class=\"number\">20</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> b &gt;= <span class=\"number\">0x20</span> <span class=\"keyword\">and</span> b &lt;= <span class=\"number\">0x7f</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"comment\">#print(p,b)</span></span><br><span class=\"line\"></span><br><span class=\"line\">                flag.append(b)</span><br><span class=\"line\"></span><br><span class=\"line\">                trace_back(flag,p-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 当进行到最后的时候pop出来</span></span><br><span class=\"line\"></span><br><span class=\"line\">    flag.pop()</span><br><span class=\"line\"></span><br><span class=\"line\">trace_back(flag,<span class=\"built_in\">len</span>(cipher)-<span class=\"number\">2</span>)</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-24.png\" alt=\"alt text\"></p>\n<h2 id=\"ezcube\"><a href=\"#ezcube\" class=\"headerlink\" title=\"ezcube\"></a>ezcube</h2><p>魔方，约束右手公式和 12 步<br>在网上搜到了同款初始情况：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-25.png\" alt=\"alt text\"><br><a href=\"http://i-mofang.com/ba_07.shtml\">魔方入门解法第 7 步：调整顶层棱块位置 - 爱魔方 (i-mofang.com)</a></p>\n<h2 id=\"ezmath\"><a href=\"#ezmath\" class=\"headerlink\" title=\"ezmath\"></a>ezmath</h2><p>我认为出得很差的一个题。<br>python 3.8 打包为 exe，使用 python3.8 环境下的 pyinstxtractor.py 解包，使用 uncompyle6 反编译。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flag = [<span class=\"built_in\">ord</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;flag:&#x27;</span>)]</span><br><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(flag) == <span class=\"number\">32</span>:</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">sum</span>([flag[<span class=\"number\">23</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">23</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">12</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">12</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">1</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">24</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">222</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">22</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">22</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">31</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">31</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">26</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">26</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">9</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">178</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">29</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">232</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">17</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">17</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">23</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">150</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">6</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">226</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">7</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">110</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">19</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">19</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">2</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">2</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">176</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">10</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">10</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">12</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">198</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">24</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">24</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">9</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">9</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">3</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">168</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">8</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">8</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">2</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">134</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">14</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">14</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">13</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">170</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">4</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">4</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">10</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">142</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">27</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">27</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">15</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">15</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">15</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">224</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">16</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">16</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">11</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">230</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">1</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">178</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">28</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">28</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">5</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">246</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">17</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">168</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">30</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">30</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">21</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">220</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">22</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">212</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">16</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">232</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">25</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">25</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">4</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">140</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">31</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">250</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">28</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">150</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">11</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">11</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">13</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">13</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">14</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">234</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">7</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">7</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">8</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">174</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">3</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">3</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">25</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">242</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">29</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">29</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">5</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">5</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">30</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">142</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">26</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">170</span>)]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">19</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">176</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">0</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">0</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">27</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">168</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">20</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">20</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">20</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">212</span>)]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">21</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">21</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">6</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">6</span>])]) + <span class=\"built_in\">sum</span>([flag[<span class=\"number\">18</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(flag[<span class=\"number\">18</span>])]) - <span class=\"built_in\">sum</span>([flag[<span class=\"number\">18</span>] <span class=\"keyword\">for</span> _ <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">178</span>)]) + <span class=\"number\">297412</span> == <span class=\"number\">0</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;yes&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>简单格式处理后如下：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-26.png\" alt=\"alt text\"><br>flag 长 32 位，<br>sum &#x3D; 0<br>for i in range(32):<br>sum +&#x3D; flag[i]_ flag[i]<br>sum +&#x3D; flag[i]_ （100-300 的一个偶数）<br>sum &#x3D; -297412<br>可能按照出题人的想法，这题的解法是依据题目简介的提示：初中数学，配平。<br>A^2 + 2AB +B^2 &#x3D; X。这题每一位 flag 都有平方，也都有乘以一个偶数，那假设每位 flag 是 A，A 乘的那个偶数就是另外的 2B，由此可以推出 flag<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-27.png\" alt=\"alt text\"><br>那这不是很扯吗，题目的解是基于一个很低级的假设。大伙是来做逆向的，不是脑洞数学。</p>\n<h2 id=\"ezrand\"><a href=\"#ezrand\" class=\"headerlink\" title=\"ezrand\"></a>ezrand</h2><p>随机种子随机数算法，因为随机种子根据 time64 得到，而 time64 返回值落在 0xffff 内，所以可爆。<br>中间随机数相关的复杂算法 ida 可能还原不正确，需要按汇编理解。本质上是 rand()%0xff</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdio.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;stdlib.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"keyword\">include</span> <span class=\"string\">&lt;string.h&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"type\">int</span> __cdecl <span class=\"title function_\">main</span><span class=\"params\">(<span class=\"type\">int</span> argc, <span class=\"type\">const</span> <span class=\"type\">char</span> **argv, <span class=\"type\">const</span> <span class=\"type\">char</span> **envp)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">long</span> v3; <span class=\"comment\">// rbx</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">unsigned</span> <span class=\"type\">int</span> v4;  <span class=\"comment\">// ax</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v5;           <span class=\"comment\">// edi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> i;           <span class=\"comment\">// rsi</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> rand_value;   <span class=\"comment\">// eax</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> cipher[<span class=\"number\">7</span>];    <span class=\"comment\">// [rsp+20h] [rbp-50h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> v10;         <span class=\"comment\">// [rsp+3Ch] [rbp-34h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v11;          <span class=\"comment\">// [rsp+3Dh] [rbp-33h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> *input;      <span class=\"comment\">// [rsp+40h] [rbp-30h] BYREF</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">long</span> v13;         <span class=\"comment\">// [rsp+50h] [rbp-20h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v14;          <span class=\"comment\">// [rsp+58h] [rbp-18h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> v15;          <span class=\"comment\">// [rsp+5Ch] [rbp-14h]</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">char</span> v16;         <span class=\"comment\">// [rsp+5Eh] [rbp-12h]</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    v13 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    input = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v14 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v15 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v16 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">0</span>] = <span class=\"number\">0xEA6C0C5D</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v11 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v3 = <span class=\"number\">-1</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">1</span>] = <span class=\"number\">0x34FC1946</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">2</span>] = <span class=\"number\">0x72362B2</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">3</span>] = <span class=\"number\">0xFB6E2262</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">4</span>] = <span class=\"number\">0xA9F2E8B4</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">5</span>] = <span class=\"number\">0x86211291</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    cipher[<span class=\"number\">6</span>] = <span class=\"number\">0x43E98EDB</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v10 = <span class=\"number\">77</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    v4 = _time64(<span class=\"number\">0</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    srand(v4);</span><br><span class=\"line\"></span><br><span class=\"line\">    v5 = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"type\">int</span> rand_arr[<span class=\"number\">29</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// for (i = 0; i &lt; 29; i++)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//     rand_arr[i] = rand();</span></span><br><span class=\"line\"></span><br><span class=\"line\">    v3 = <span class=\"number\">29</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    i = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"type\">int</span> seed = <span class=\"number\">0</span>; seed &lt; <span class=\"number\">0xffff</span>; seed++)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"type\">char</span> flag[<span class=\"number\">30</span>] = &#123;<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        srand(seed);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">29</span>; i++)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> tmp = rand();</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> a = tmp &gt;&gt; <span class=\"number\">32</span> &gt;&gt; <span class=\"number\">7</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> b = a &gt;&gt; <span class=\"number\">0x1f</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> c = a + b;</span><br><span class=\"line\"></span><br><span class=\"line\">            b = c * <span class=\"number\">0xff</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> d = tmp - b;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"type\">int</span> tmp2 = *((<span class=\"type\">char</span> *)cipher + i) ^ d;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// tmp2 = d;</span></span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp2 &gt; <span class=\"number\">0x7e</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (tmp2 &lt; <span class=\"number\">0x20</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">            flag[i] = tmp2; <span class=\"comment\">// printf(&quot;%c&quot;, tmp2);</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (<span class=\"built_in\">strlen</span>(flag) &gt; <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"built_in\">printf</span>(<span class=\"string\">&quot;%s\\n&quot;</span>, flag);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ezUnity\"><a href=\"#ezUnity\" class=\"headerlink\" title=\"ezUnity\"></a>ezUnity</h2><p>此题略微难在 metadata 文件格式修复<br>可对比 babyUnity 或者其它 Unity 文件的 dll，修复后：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-28.png\" alt=\"alt text\"><br>剩下操作类似 babyUnity<br>能通过 findcrypt 或者分析发现是 aes</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cipher1 = <span class=\"string\">&quot;pNufkEIU9dHjKXYXWiFyrthHYFEfqJAWcPM/t8/zX1w=&quot;</span></span><br><span class=\"line\">key = <span class=\"string\">&quot;a216d5d34c2723f5&quot;</span></span><br><span class=\"line\">iv = <span class=\"string\">&quot;9f68268f755b1363&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p><img src=\"/2024/04/28/xyctf2023-re-writeup/image-29.png\" alt=\"alt text\"><br>XYCTF{IL2CPP_1s_intere5t1ng}</p>\n<h2 id=\"Trustme\"><a href=\"#Trustme\" class=\"headerlink\" title=\"Trustme\"></a>Trustme</h2><p>main 是一个没什么用的 rc4，并且和程序对不上。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-30.png\" alt=\"alt text\"><br>康康别的类<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-31.png\" alt=\"alt text\"><br>有一个对 dex 解密并输出什么的。这里静态解太麻烦了，动态找到安卓机的 data&#x2F;data 里对应的包，发现确实有东西<br>如：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-32.png\" alt=\"alt text\"><br>分析 dex 目录的 apk，发现其主要做了一个数据库查找操作。<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-33.png\" alt=\"alt text\"><br>找到数据库：<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-34.png\" alt=\"alt text\"><br>XYCTF{And0r1d_15_V3ryEasy}</p>\n<h2 id=\"That’s-this\"><a href=\"#That’s-this\" class=\"headerlink\" title=\"That’s this\"></a>That’s this</h2><p>lua 字节码<br><img src=\"/2024/04/28/xyctf2023-re-writeup/image-35.png\" alt=\"alt text\"><br>在线反编译<br><a href=\"https://www.luatool.cn/index.php\">https://www.luatool.cn/index.php</a></p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">value = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">output</span> = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">i = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">true</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"keyword\">local</span> temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(flag, i)</span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(Xor(temp, <span class=\"number\">8</span>) % <span class=\"number\">256</span>)</span><br><span class=\"line\">  value = value .. temp</span><br><span class=\"line\">  i = i + <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> i &gt; <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(flag) <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"keyword\">break</span></span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">1000</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  x = <span class=\"number\">3</span></span><br><span class=\"line\">  y = x * <span class=\"number\">3</span></span><br><span class=\"line\">  z = y / <span class=\"number\">4</span></span><br><span class=\"line\">  w = z - <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> w == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This line will never be executed&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(flag) <span class=\"keyword\">do</span></span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(value, i)</span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(temp + <span class=\"number\">3</span>)</span><br><span class=\"line\">  <span class=\"built_in\">output</span> = <span class=\"built_in\">output</span> .. temp</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\">result = <span class=\"built_in\">output</span>:<span class=\"built_in\">rep</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\">invalid_list = &#123;</span><br><span class=\"line\">  <span class=\"number\">1</span>,</span><br><span class=\"line\">  <span class=\"number\">2</span>,</span><br><span class=\"line\">  <span class=\"number\">3</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">20</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(invalid_list, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  result = result .. <span class=\"string\">&quot;A&quot;</span></span><br><span class=\"line\">  <span class=\"built_in\">table</span>.<span class=\"built_in\">insert</span>(invalid_list, <span class=\"number\">4</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i = <span class=\"number\">1</span>, <span class=\"built_in\">string</span>.<span class=\"built_in\">len</span>(<span class=\"built_in\">output</span>) <span class=\"keyword\">do</span></span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">byte</span>(<span class=\"built_in\">output</span>, i)</span><br><span class=\"line\">  temp = <span class=\"built_in\">string</span>.<span class=\"built_in\">char</span>(temp - <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">30</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  result = result .. <span class=\"built_in\">string</span>.<span class=\"built_in\">lower</span>(<span class=\"built_in\">output</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">950</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  x = <span class=\"number\">3</span></span><br><span class=\"line\">  y = x * <span class=\"number\">3</span></span><br><span class=\"line\">  z = y / <span class=\"number\">4</span></span><br><span class=\"line\">  w = z - <span class=\"number\">5</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> w == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This line will never be executed&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> _ = <span class=\"number\">1</span>, <span class=\"number\">50</span> <span class=\"keyword\">do</span></span><br><span class=\"line\">  x = <span class=\"number\">-1</span></span><br><span class=\"line\">  y = x * <span class=\"number\">4</span></span><br><span class=\"line\">  z = y / <span class=\"number\">2</span></span><br><span class=\"line\">  w = z - <span class=\"number\">3</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> w == <span class=\"number\">0</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;This line will also never be executed&quot;</span>)</span><br><span class=\"line\">  <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">&quot;base64&quot;</span>)</span><br><span class=\"line\">obfuscated_output = to_base64(<span class=\"built_in\">output</span>)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">reverse</span>(obfuscated_output)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(obfuscated_output, <span class=\"string\">&quot;g&quot;</span>, <span class=\"string\">&quot;3&quot;</span>)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(obfuscated_output, <span class=\"string\">&quot;H&quot;</span>, <span class=\"string\">&quot;4&quot;</span>)</span><br><span class=\"line\">obfuscated_output = <span class=\"built_in\">string</span>.<span class=\"built_in\">gsub</span>(obfuscated_output, <span class=\"string\">&quot;W&quot;</span>, <span class=\"string\">&quot;6&quot;</span>)</span><br><span class=\"line\">invalid_variable = obfuscated_output:<span class=\"built_in\">rep</span>(<span class=\"number\">5</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> obfuscated_output == <span class=\"string\">&quot;==AeuFEcwxGPuJ0PBNzbC16ctFnPB5DPzI0bwx6bu9GQ2F1XOR1U&quot;</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;You get the flag.&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">  <span class=\"built_in\">print</span>(<span class=\"string\">&quot;F**k!&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>存在一些混淆代码，但从密文逆推可以很轻松地找到核心逻辑：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> base64</span><br><span class=\"line\"></span><br><span class=\"line\">a = <span class=\"built_in\">list</span>(<span class=\"string\">b&quot;==AeuFEcwxGPuJ0PBNzbC1WctFnPB5DPzI0bwxWbu9GQ2F1XOR1U&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">a.reverse()</span><br><span class=\"line\"></span><br><span class=\"line\">b = <span class=\"built_in\">list</span>(base64.b64decode(<span class=\"built_in\">bytes</span>(a)))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">bytes</span>(a))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(base64.b64decode(<span class=\"built_in\">bytes</span>(a)), <span class=\"built_in\">len</span>(b))</span><br><span class=\"line\"></span><br><span class=\"line\">flag = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(b)):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> l <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0x20</span>, <span class=\"number\">0x7f</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        t = (l ^ <span class=\"number\">8</span>) + <span class=\"number\">3</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> t == b[i]:</span><br><span class=\"line\"></span><br><span class=\"line\">            flag += <span class=\"built_in\">chr</span>(l)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># b[i] += 1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># b[i] -= 3</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># # b[i] &amp;= 0xff</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># b[i] ^= 8</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(flag, <span class=\"built_in\">len</span>(flag))</span><br></pre></td></tr></table></figure>\n\n<p>XYCTF{5dcbaed781363fbfb7d8647c1aee6c}</p>\n","path":"2024/04/28/xyctf2023-re-writeup/","permalink":"http://example.com/2024/04/28/xyctf2023-re-writeup/","tags":[{"name":"CTF","_id":"clvkah59s000264w0cor5d668","slug":"CTF","path":"tags/CTF/","permalink":"http://example.com/tags/CTF/","length":1}],"categories":[],"prev":null,"next":{"title":"Hello World","date":"2024-04-26T14:24:48.664Z","slug":"hello-world","published":true,"updated":"2024-04-26T14:24:48.664Z","_id":"clvkah59m000064w08ncidu3l","layout":"post","photos":[],"excerpt":"","path":"2024/04/26/hello-world/","permalink":"http://example.com/2024/04/26/hello-world/","__post":true},"__post":true}