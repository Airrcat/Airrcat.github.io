{"title":"hash拓展攻击与例题hash_append","date":"2024-04-29T08:28:58.000Z","source":"_posts/hash拓展攻击与例题hash-append.md","raw":"---\ntitle: hash拓展攻击与例题hash_append\ndate: 2024-04-29 16:28:58\ntags: [Crypto, CTF]\n---\n\nhash 长度拓展攻击是一个效果还挺“惊人”的攻击。简单的来说，他能在只知道“一部分”密文的情况下，获得和“完整”密文相同的 hash 结果。只要满足条件，这个攻击现在对 MD5、SHA1、SHA256、SHA512 和 SM3 都能生效。\n\n这个攻击的原理是目前这些主流哈希计算的一个薄弱点。这些哈希计算是基于对明文的分组。比如 64 个字节为一组，不满 64 的倍数则 padding 为 64 位。\n对于每一组的明文来说，它需要与一组“向量”混合加密、输出为一个 hash。而如果不止一组明文，每组明文的 hash 会作为下一组的“向量”，这里的向量可理解为会变的加密密钥。\n\n于是，在分组加密的情况下，实际上是：\n① 每组独立做明文+向量混合运算\n② 向量由上一组的运算结果决定（等于）\n这里要留意这个“独立”。因为这实际上隐含了一个意思：\n假设有一个八个分组的明文，我们不需要知道前七组的明文，只需要知道最后一组——以及第七组（前七组）的运算结果，就能算出这第八组——也就是整个明文的哈希结果。\n\n更进一步的，把前七组的明文看作 flag，第八组的明文看作独立 padding、append 拓展数据、salt 盐，那么这就是长度**拓展**攻击了。\n\n以 MD5 为例子：![](./hash拓展攻击与例题hash-append/参考.png)\n\n放到例题中\n\n```python\nimport os\n\nfrom gmssl import sm3, func\n\n\n\nwith open('flag') as f:\n\n    flag = f.read()\n\n\n\n\nMySecretInfo = os.urandom(64) # 有密文\n\nHashValue = sm3.sm3_hash(func.bytes_to_list(MySecretInfo))\n\nprint('MySecretInfo Hash:', HashValue) # 有密文hash\n\n\n\nAppendData = bytes.fromhex(input('Input AppendData: ')) # salt、append数据\n\nassert len(AppendData) == 64\n\nNewSecretInfo = MySecretInfo + AppendData\n\n\n\nGeneratedHash = input('Input NewSecretInfo Hash: ')\n\nNewHashValue = sm3.sm3_hash(func.bytes_to_list(NewSecretInfo))\n\nprint(NewHashValue)\n\n\n\nif GeneratedHash == NewHashValue:\n\n    print(flag)\n\nelse:\n\n    print('Nope')\n```\n\nsm3 的分组标准是 64 位一组，因此 secret 和 appendData 是分别两组，基本要求满足。\n知晓 secret 的 hash，appendData 自己构造，这就很清晰了。\n但落到实现上：①gmssl 库会默认在加密时做一个 64 位的 padding② 我们如何将 secret 的 hash 构造成加密的向量？\n② 可以翻阅库实现解决：\n首先是 padding 部分：\n![alt text](./hash拓展攻击与例题hash-append/image.png)\n而后是向量 Vector\n![alt text](./hash拓展攻击与例题hash-append/image-1.png)\n这里我们只需要为这个函数添加一个新的参数，作为 V[0]的初始值即可（同时记得 group_count -1）\n参考攻击实现：\nhttps://github.com/hjzin/SM3LengthExtensionAttack\n而对于 ①，这里很有趣\n我们之前的实现逻辑是：\n知道 Hash(Secret)，知道 append，可知 Hash(Secret+append)\n而默认 padding 时：Hash(Secret+padding)，知道 append，可知 Hash(Secret+append+padding)\n发现了么？这两次 hash 的值似乎对不上。\n\n但这里，我要说拓展攻击，是一个很“模板”的攻击。这里不要被 append 这个名词所束缚。它能是 append，它能是 salt，甚至它也能是“padding”——是第一次 hash 的“padding”。\n阅读 padding 部分的代码可知这个 padding 是很朴素的一个 padding，有变化，但变化不多。明文为一组时 padding 固定是：\nb'\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00'\n明文为两组时 padding 固定是：\nb'\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00'\n仅仅在末尾会有一些改变。\n那么我们可以把用第一次 padding 的值去 append，这样就有：\nHash(Secret+padding1)，知道 append，可知 Hash(Secret+padding1+padding2)\nbingo~攻击完成 √\n参考 exp：\n\n```python\n#!/usr/bin/env python\n\n# -*- coding:utf-8 -*-\n\n\"\"\"\n\n@Time：2019/10/12\n\n@Author: hhzjj\n\n@Description：SM3长度扩展攻击\n\n    1.随机生成一个secret，算出secret的hash值\n\n    2.根据hash值推出第一次压缩之后各个寄存器里的值\n\n    3.在secret+padding之后附加一段消息，用上一步寄存器里的值作为IV去加密附加的那段消息，得到hash\n\n    4.用sm3去加密secret+padding+m'，得到hash\n\n    5.第3步和第4步得到的hash值应该相等\n\n\"\"\"\n\nfrom gmssl import sm3, func\n\nimport random\n\nimport my_sm3\n\nimport struct\n\n\n\nsecret = \"3131313131313131313131313131313131313131313131313131313131313131\"\n\n\n\na = func.bytes_to_list(bytes(secret, encoding='utf-8'))\n\nsecret_hash = \"f6dd54733108fa21bb08102f367787ed9ac388b8bc8311a1e999d5b5d09ba0a6\"\n\nprint(secret_hash)\n\nsecret_len = len(secret)\n\nappend_m = b'\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00'\n\npad_str = \"\"\n\npad = []\n\nprint(my_sm3.sm3_hash2(func.bytes_to_list(secret.encode()+append_m)))\n\n\n\n\ndef generate_guess_hash(old_hash, secret_len, append_m):\n\n    # 攻击关键在于重设vector\n\n    \"\"\"\n\n    SM3长度扩展攻击\n\n    :param old_hash: secret的hash值\n\n    :param secret_len: secret的长度\n\n    :param append_m: 附加的消息\n\n    :return: hash(secret + padding + append_m)\n\n    \"\"\"\n\n    vectors = []\n\n    message = \"\"\n\n    # 将old_hash分组，每组8个字节, 并转换为整数\n\n    for r in range(0, len(old_hash), 8):\n\n        vectors.append(int(old_hash[r:r + 8], 16))\n\n\n\n    # # 伪造消息\n\n    if secret_len > 64:\n\n        for i in range(0, int(secret_len / 64) * 64):\n\n            message += 'a'\n\n    for i in range(0, secret_len):\n\n        message += 'a'\n\n    message = func.bytes_to_list(bytes(message, encoding='utf-8'))\n\n    # message = padding(message)\n\n    message.extend(func.bytes_to_list(\n\n        append_m))\n\n    print(\"meesage len\", len(message))\n\n    return my_sm3.sm3_hash(message, vectors)\n\n\n\n\nguess_hash = generate_guess_hash(secret_hash, secret_len, append_m)\n\nprint(guess_hash)\n```\n\n","slug":"hash拓展攻击与例题hash-append","published":true,"updated":"2024-04-30T01:30:22.000Z","_id":"clxidry3w0004ccw032qk2rj6","comments":true,"layout":"post","photos":[],"html":"<p>hash 长度拓展攻击是一个效果还挺“惊人”的攻击。简单的来说，他能在只知道“一部分”密文的情况下，获得和“完整”密文相同的 hash 结果。只要满足条件，这个攻击现在对 MD5、SHA1、SHA256、SHA512 和 SM3 都能生效。</p>\n<p>这个攻击的原理是目前这些主流哈希计算的一个薄弱点。这些哈希计算是基于对明文的分组。比如 64 个字节为一组，不满 64 的倍数则 padding 为 64 位。<br>对于每一组的明文来说，它需要与一组“向量”混合加密、输出为一个 hash。而如果不止一组明文，每组明文的 hash 会作为下一组的“向量”，这里的向量可理解为会变的加密密钥。</p>\n<p>于是，在分组加密的情况下，实际上是：<br>① 每组独立做明文+向量混合运算<br>② 向量由上一组的运算结果决定（等于）<br>这里要留意这个“独立”。因为这实际上隐含了一个意思：<br>假设有一个八个分组的明文，我们不需要知道前七组的明文，只需要知道最后一组——以及第七组（前七组）的运算结果，就能算出这第八组——也就是整个明文的哈希结果。</p>\n<p>更进一步的，把前七组的明文看作 flag，第八组的明文看作独立 padding、append 拓展数据、salt 盐，那么这就是长度<strong>拓展</strong>攻击了。</p>\n<p>以 MD5 为例子：<img src=\"/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/%E5%8F%82%E8%80%83.png\"></p>\n<p>放到例题中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> gmssl <span class=\"keyword\">import</span> sm3, func</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;flag&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"></span><br><span class=\"line\">    flag = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MySecretInfo = os.urandom(<span class=\"number\">64</span>) <span class=\"comment\"># 有密文</span></span><br><span class=\"line\"></span><br><span class=\"line\">HashValue = sm3.sm3_hash(func.bytes_to_list(MySecretInfo))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;MySecretInfo Hash:&#x27;</span>, HashValue) <span class=\"comment\"># 有密文hash</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">AppendData = <span class=\"built_in\">bytes</span>.fromhex(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Input AppendData: &#x27;</span>)) <span class=\"comment\"># salt、append数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(AppendData) == <span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\">NewSecretInfo = MySecretInfo + AppendData</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GeneratedHash = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Input NewSecretInfo Hash: &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">NewHashValue = sm3.sm3_hash(func.bytes_to_list(NewSecretInfo))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(NewHashValue)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> GeneratedHash == NewHashValue:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nope&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>sm3 的分组标准是 64 位一组，因此 secret 和 appendData 是分别两组，基本要求满足。<br>知晓 secret 的 hash，appendData 自己构造，这就很清晰了。<br>但落到实现上：①gmssl 库会默认在加密时做一个 64 位的 padding② 我们如何将 secret 的 hash 构造成加密的向量？<br>② 可以翻阅库实现解决：<br>首先是 padding 部分：<br><img src=\"/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image.png\" alt=\"alt text\"><br>而后是向量 Vector<br><img src=\"/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image-1.png\" alt=\"alt text\"><br>这里我们只需要为这个函数添加一个新的参数，作为 V[0]的初始值即可（同时记得 group_count -1）<br>参考攻击实现：<br><a href=\"https://github.com/hjzin/SM3LengthExtensionAttack\">https://github.com/hjzin/SM3LengthExtensionAttack</a><br>而对于 ①，这里很有趣<br>我们之前的实现逻辑是：<br>知道 Hash(Secret)，知道 append，可知 Hash(Secret+append)<br>而默认 padding 时：Hash(Secret+padding)，知道 append，可知 Hash(Secret+append+padding)<br>发现了么？这两次 hash 的值似乎对不上。</p>\n<p>但这里，我要说拓展攻击，是一个很“模板”的攻击。这里不要被 append 这个名词所束缚。它能是 append，它能是 salt，甚至它也能是“padding”——是第一次 hash 的“padding”。<br>阅读 padding 部分的代码可知这个 padding 是很朴素的一个 padding，有变化，但变化不多。明文为一组时 padding 固定是：<br>b’\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00’<br>明文为两组时 padding 固定是：<br>b’\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00’<br>仅仅在末尾会有一些改变。<br>那么我们可以把用第一次 padding 的值去 append，这样就有：<br>Hash(Secret+padding1)，知道 append，可知 Hash(Secret+padding1+padding2)<br>bingo~攻击完成 √<br>参考 exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Time：2019/10/12</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Author: hhzjj</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Description：SM3长度扩展攻击</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    1.随机生成一个secret，算出secret的hash值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    2.根据hash值推出第一次压缩之后各个寄存器里的值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    3.在secret+padding之后附加一段消息，用上一步寄存器里的值作为IV去加密附加的那段消息，得到hash</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    4.用sm3去加密secret+padding+m&#x27;，得到hash</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    5.第3步和第4步得到的hash值应该相等</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> gmssl <span class=\"keyword\">import</span> sm3, func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> my_sm3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">secret = <span class=\"string\">&quot;3131313131313131313131313131313131313131313131313131313131313131&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = func.bytes_to_list(<span class=\"built_in\">bytes</span>(secret, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">secret_hash = <span class=\"string\">&quot;f6dd54733108fa21bb08102f367787ed9ac388b8bc8311a1e999d5b5d09ba0a6&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(secret_hash)</span><br><span class=\"line\"></span><br><span class=\"line\">secret_len = <span class=\"built_in\">len</span>(secret)</span><br><span class=\"line\"></span><br><span class=\"line\">append_m = <span class=\"string\">b&#x27;\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pad_str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pad = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_sm3.sm3_hash2(func.bytes_to_list(secret.encode()+append_m)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_guess_hash</span>(<span class=\"params\">old_hash, secret_len, append_m</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 攻击关键在于重设vector</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    SM3长度扩展攻击</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param old_hash: secret的hash值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param secret_len: secret的长度</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param append_m: 附加的消息</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :return: hash(secret + padding + append_m)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    vectors = []</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将old_hash分组，每组8个字节, 并转换为整数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(old_hash), <span class=\"number\">8</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        vectors.append(<span class=\"built_in\">int</span>(old_hash[r:r + <span class=\"number\">8</span>], <span class=\"number\">16</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># # 伪造消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> secret_len &gt; <span class=\"number\">64</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">int</span>(secret_len / <span class=\"number\">64</span>) * <span class=\"number\">64</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">            message += <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, secret_len):</span><br><span class=\"line\"></span><br><span class=\"line\">        message += <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    message = func.bytes_to_list(<span class=\"built_in\">bytes</span>(message, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># message = padding(message)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    message.extend(func.bytes_to_list(</span><br><span class=\"line\"></span><br><span class=\"line\">        append_m))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;meesage len&quot;</span>, <span class=\"built_in\">len</span>(message))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> my_sm3.sm3_hash(message, vectors)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">guess_hash = generate_guess_hash(secret_hash, secret_len, append_m)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(guess_hash)</span><br></pre></td></tr></table></figure>\n\n","excerpt":"","more":"<p>hash 长度拓展攻击是一个效果还挺“惊人”的攻击。简单的来说，他能在只知道“一部分”密文的情况下，获得和“完整”密文相同的 hash 结果。只要满足条件，这个攻击现在对 MD5、SHA1、SHA256、SHA512 和 SM3 都能生效。</p>\n<p>这个攻击的原理是目前这些主流哈希计算的一个薄弱点。这些哈希计算是基于对明文的分组。比如 64 个字节为一组，不满 64 的倍数则 padding 为 64 位。<br>对于每一组的明文来说，它需要与一组“向量”混合加密、输出为一个 hash。而如果不止一组明文，每组明文的 hash 会作为下一组的“向量”，这里的向量可理解为会变的加密密钥。</p>\n<p>于是，在分组加密的情况下，实际上是：<br>① 每组独立做明文+向量混合运算<br>② 向量由上一组的运算结果决定（等于）<br>这里要留意这个“独立”。因为这实际上隐含了一个意思：<br>假设有一个八个分组的明文，我们不需要知道前七组的明文，只需要知道最后一组——以及第七组（前七组）的运算结果，就能算出这第八组——也就是整个明文的哈希结果。</p>\n<p>更进一步的，把前七组的明文看作 flag，第八组的明文看作独立 padding、append 拓展数据、salt 盐，那么这就是长度<strong>拓展</strong>攻击了。</p>\n<p>以 MD5 为例子：<img src=\"/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/%E5%8F%82%E8%80%83.png\"></p>\n<p>放到例题中</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> gmssl <span class=\"keyword\">import</span> sm3, func</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;flag&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\"></span><br><span class=\"line\">    flag = f.read()</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">MySecretInfo = os.urandom(<span class=\"number\">64</span>) <span class=\"comment\"># 有密文</span></span><br><span class=\"line\"></span><br><span class=\"line\">HashValue = sm3.sm3_hash(func.bytes_to_list(MySecretInfo))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;MySecretInfo Hash:&#x27;</span>, HashValue) <span class=\"comment\"># 有密文hash</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">AppendData = <span class=\"built_in\">bytes</span>.fromhex(<span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Input AppendData: &#x27;</span>)) <span class=\"comment\"># salt、append数据</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"built_in\">len</span>(AppendData) == <span class=\"number\">64</span></span><br><span class=\"line\"></span><br><span class=\"line\">NewSecretInfo = MySecretInfo + AppendData</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">GeneratedHash = <span class=\"built_in\">input</span>(<span class=\"string\">&#x27;Input NewSecretInfo Hash: &#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">NewHashValue = sm3.sm3_hash(func.bytes_to_list(NewSecretInfo))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(NewHashValue)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> GeneratedHash == NewHashValue:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(flag)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nope&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>sm3 的分组标准是 64 位一组，因此 secret 和 appendData 是分别两组，基本要求满足。<br>知晓 secret 的 hash，appendData 自己构造，这就很清晰了。<br>但落到实现上：①gmssl 库会默认在加密时做一个 64 位的 padding② 我们如何将 secret 的 hash 构造成加密的向量？<br>② 可以翻阅库实现解决：<br>首先是 padding 部分：<br><img src=\"/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image.png\" alt=\"alt text\"><br>而后是向量 Vector<br><img src=\"/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/image-1.png\" alt=\"alt text\"><br>这里我们只需要为这个函数添加一个新的参数，作为 V[0]的初始值即可（同时记得 group_count -1）<br>参考攻击实现：<br><a href=\"https://github.com/hjzin/SM3LengthExtensionAttack\">https://github.com/hjzin/SM3LengthExtensionAttack</a><br>而对于 ①，这里很有趣<br>我们之前的实现逻辑是：<br>知道 Hash(Secret)，知道 append，可知 Hash(Secret+append)<br>而默认 padding 时：Hash(Secret+padding)，知道 append，可知 Hash(Secret+append+padding)<br>发现了么？这两次 hash 的值似乎对不上。</p>\n<p>但这里，我要说拓展攻击，是一个很“模板”的攻击。这里不要被 append 这个名词所束缚。它能是 append，它能是 salt，甚至它也能是“padding”——是第一次 hash 的“padding”。<br>阅读 padding 部分的代码可知这个 padding 是很朴素的一个 padding，有变化，但变化不多。明文为一组时 padding 固定是：<br>b’\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00’<br>明文为两组时 padding 固定是：<br>b’\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x04\\x00’<br>仅仅在末尾会有一些改变。<br>那么我们可以把用第一次 padding 的值去 append，这样就有：<br>Hash(Secret+padding1)，知道 append，可知 Hash(Secret+padding1+padding2)<br>bingo~攻击完成 √<br>参考 exp：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#!/usr/bin/env python</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Time：2019/10/12</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Author: hhzjj</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">@Description：SM3长度扩展攻击</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    1.随机生成一个secret，算出secret的hash值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    2.根据hash值推出第一次压缩之后各个寄存器里的值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    3.在secret+padding之后附加一段消息，用上一步寄存器里的值作为IV去加密附加的那段消息，得到hash</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    4.用sm3去加密secret+padding+m&#x27;，得到hash</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    5.第3步和第4步得到的hash值应该相等</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> gmssl <span class=\"keyword\">import</span> sm3, func</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> my_sm3</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> struct</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">secret = <span class=\"string\">&quot;3131313131313131313131313131313131313131313131313131313131313131&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">a = func.bytes_to_list(<span class=\"built_in\">bytes</span>(secret, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">secret_hash = <span class=\"string\">&quot;f6dd54733108fa21bb08102f367787ed9ac388b8bc8311a1e999d5b5d09ba0a6&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(secret_hash)</span><br><span class=\"line\"></span><br><span class=\"line\">secret_len = <span class=\"built_in\">len</span>(secret)</span><br><span class=\"line\"></span><br><span class=\"line\">append_m = <span class=\"string\">b&#x27;\\x80\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x02\\x00&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pad_str = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">pad = []</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(my_sm3.sm3_hash2(func.bytes_to_list(secret.encode()+append_m)))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">def</span> <span class=\"title function_\">generate_guess_hash</span>(<span class=\"params\">old_hash, secret_len, append_m</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 攻击关键在于重设vector</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    SM3长度扩展攻击</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param old_hash: secret的hash值</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param secret_len: secret的长度</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :param append_m: 附加的消息</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    :return: hash(secret + padding + append_m)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">    &quot;&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    vectors = []</span><br><span class=\"line\"></span><br><span class=\"line\">    message = <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># 将old_hash分组，每组8个字节, 并转换为整数</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> r <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">len</span>(old_hash), <span class=\"number\">8</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">        vectors.append(<span class=\"built_in\">int</span>(old_hash[r:r + <span class=\"number\">8</span>], <span class=\"number\">16</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># # 伪造消息</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> secret_len &gt; <span class=\"number\">64</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"built_in\">int</span>(secret_len / <span class=\"number\">64</span>) * <span class=\"number\">64</span>):</span><br><span class=\"line\"></span><br><span class=\"line\">            message += <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">0</span>, secret_len):</span><br><span class=\"line\"></span><br><span class=\"line\">        message += <span class=\"string\">&#x27;a&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    message = func.bytes_to_list(<span class=\"built_in\">bytes</span>(message, encoding=<span class=\"string\">&#x27;utf-8&#x27;</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\"># message = padding(message)</span></span><br><span class=\"line\"></span><br><span class=\"line\">    message.extend(func.bytes_to_list(</span><br><span class=\"line\"></span><br><span class=\"line\">        append_m))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;meesage len&quot;</span>, <span class=\"built_in\">len</span>(message))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> my_sm3.sm3_hash(message, vectors)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">guess_hash = generate_guess_hash(secret_hash, secret_len, append_m)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(guess_hash)</span><br></pre></td></tr></table></figure>\n\n","path":"2024/04/29/hash拓展攻击与例题hash-append/","permalink":"http://example.com/2024/04/29/hash%E6%8B%93%E5%B1%95%E6%94%BB%E5%87%BB%E4%B8%8E%E4%BE%8B%E9%A2%98hash-append/","tags":[{"name":"CTF","_id":"clxidry3z000bccw01dimat95","slug":"CTF","path":"tags/CTF/","permalink":"http://example.com/tags/CTF/","length":4},{"name":"Crypto","_id":"clxidry40000dccw06ui85i84","slug":"Crypto","path":"tags/Crypto/","permalink":"http://example.com/tags/Crypto/","length":1}],"categories":[],"prev":{"title":"some frida scripts","date":"2024-04-30T02:44:22.000Z","slug":"some-frida-scripts","published":true,"updated":"2024-04-30T03:43:12.000Z","_id":"clxidry3y0007ccw04t9i754b","layout":"post","photos":[],"excerpt":"","path":"2024/04/30/some-frida-scripts/","permalink":"http://example.com/2024/04/30/some-frida-scripts/","__post":true},"next":{"title":"xyctf2023-re-writeup","date":"2024-04-28T14:33:07.000Z","slug":"xyctf2023-re-writeup","published":true,"updated":"2024-04-29T01:54:44.000Z","_id":"clxidry44000nccw0bvvphe89","layout":"post","photos":[],"excerpt":"","path":"2024/04/28/xyctf2023-re-writeup/","permalink":"http://example.com/2024/04/28/xyctf2023-re-writeup/","__post":true},"__post":true}